{
  "version": 3,
  "sources": ["../../clipper-lib/clipper.js"],
  "sourcesContent": ["/*******************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.4.2                                                           *\n * Date      :  27 February 2017                                                *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2017                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.4.2.2                                                         *\n * Date      :  8 September 2017                                                 *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n * Because Javascript lacks support for 64-bit integers, the space              *\n * is a little more restricted than in C# version.                              *\n *                                                                              *\n * C# version has support for coordinate space:                                 *\n * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n * while Javascript version has support for space:                              *\n * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n *                                                                              *\n * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n * http://jsperf.com/big-integer-library-test                                   *\n *                                                                              *\n * This class can be made simpler when (if ever) 64-bit integer support comes   *\n * or floating point Clipper is released.                                       *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Basic JavaScript BN library - subset useful for RSA encryption.              *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n * Copyright (c) 2005  Tom Wu                                                   *\n * All Rights Reserved.                                                         *\n * See \"LICENSE\" for details:                                                   *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n *                                                                              *\n *******************************************************************************/\n(function ()\n{\n\t\"use strict\";\n\tvar ClipperLib = {};\n\tClipperLib.version = '6.4.2.2';\n\n\t//UseLines: Enables open path clipping. Adds a very minor cost to performance.\n\tClipperLib.use_lines = true;\n\n\t//ClipperLib.use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n\tClipperLib.use_xyz = false;\n\n\tvar isNode = false;\n\tif (typeof module !== 'undefined' && module.exports)\n\t{\n\t\tmodule.exports = ClipperLib;\n\t\tisNode = true;\n\t}\n\telse\n\t{\n\t\tif (typeof define === 'function' && define.amd) {\n\t\t\tdefine(ClipperLib);\n\t\t}\n\t\tif (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n\t\telse self['ClipperLib'] = ClipperLib;\n\t}\n\tvar navigator_appName;\n\tif (!isNode)\n\t{\n\t\tvar nav = navigator.userAgent.toString().toLowerCase();\n\t\tnavigator_appName = navigator.appName;\n\t}\n\telse\n\t{\n\t\tvar nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n\t\tnavigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n\t}\n\t// Browser test to speedup performance critical functions\n\tvar browser = {};\n\n\tif (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n\telse browser.chrome = 0;\n\tif (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n\telse browser.chromium = 0;\n\tif (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n\telse browser.safari = 0;\n\tif (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n\telse browser.firefox = 0;\n\tif (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n\telse browser.firefox17 = 0;\n\tif (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n\telse browser.firefox15 = 0;\n\tif (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n\telse browser.firefox3 = 0;\n\tif (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n\telse browser.opera = 0;\n\tif (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n\telse browser.msie10 = 0;\n\tif (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n\telse browser.msie9 = 0;\n\tif (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n\telse browser.msie8 = 0;\n\tif (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n\telse browser.msie7 = 0;\n\tif (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n\telse browser.msie = 0;\n\tClipperLib.biginteger_used = null;\n\n\t// Copyright (c) 2005  Tom Wu\n\t// All Rights Reserved.\n\t// See \"LICENSE\" for details.\n\t// Basic JavaScript BN library - subset useful for RSA encryption.\n\t// Bits per digit\n\tvar dbits;\n\t// JavaScript engine analysis\n\tvar canary = 0xdeadbeefcafe;\n\tvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n\t// (public) Constructor\n\t/**\n\t* @constructor\n\t*/\n\tfunction BigInteger(a, b, c)\n\t{\n\t\t// This test variable can be removed,\n\t\t// but at least for performance tests it is useful piece of knowledge\n\t\t// This is the only ClipperLib related variable in BigInteger library\n\t\tClipperLib.biginteger_used = 1;\n\t\tif (a != null)\n\t\t\tif (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n\t\t\telse if (\"number\" == typeof a) this.fromNumber(a, b, c);\n\t\telse if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n\t\telse this.fromString(a, b);\n\t}\n\t// return new, unset BigInteger\n\tfunction nbi()\n\t{\n\t\treturn new BigInteger(null, undefined, undefined);\n\t}\n\t// am: Compute w_j += (x*this_i), propagate carries,\n\t// c is initial carry, returns final carry.\n\t// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n\t// We need to select the fastest one that works in this environment.\n\t// am1: use a single mult and divide to get the high bits,\n\t// max digit bits should be 26 because\n\t// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\tfunction am1(i, x, w, j, c, n)\n\t{\n\t\twhile (--n >= 0)\n\t\t{\n\t\t\tvar v = x * this[i++] + w[j] + c;\n\t\t\tc = Math.floor(v / 0x4000000);\n\t\t\tw[j++] = v & 0x3ffffff;\n\t\t}\n\t\treturn c;\n\t}\n\t// am2 avoids a big mult-and-extract completely.\n\t// Max digit bits should be <= 30 because we do bitwise ops\n\t// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\tfunction am2(i, x, w, j, c, n)\n\t{\n\t\tvar xl = x & 0x7fff,\n\t\t\txh = x >> 15;\n\t\twhile (--n >= 0)\n\t\t{\n\t\t\tvar l = this[i] & 0x7fff;\n\t\t\tvar h = this[i++] >> 15;\n\t\t\tvar m = xh * l + h * xl;\n\t\t\tl = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n\t\t\tc = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n\t\t\tw[j++] = l & 0x3fffffff;\n\t\t}\n\t\treturn c;\n\t}\n\t// Alternately, set max digit bits to 28 since some\n\t// browsers slow down when dealing with 32-bit numbers.\n\tfunction am3(i, x, w, j, c, n)\n\t{\n\t\tvar xl = x & 0x3fff,\n\t\t\txh = x >> 14;\n\t\twhile (--n >= 0)\n\t\t{\n\t\t\tvar l = this[i] & 0x3fff;\n\t\t\tvar h = this[i++] >> 14;\n\t\t\tvar m = xh * l + h * xl;\n\t\t\tl = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n\t\t\tc = (l >> 28) + (m >> 14) + xh * h;\n\t\t\tw[j++] = l & 0xfffffff;\n\t\t}\n\t\treturn c;\n\t}\n\tif (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n\t{\n\t\tBigInteger.prototype.am = am2;\n\t\tdbits = 30;\n\t}\n\telse if (j_lm && (navigator_appName != \"Netscape\"))\n\t{\n\t\tBigInteger.prototype.am = am1;\n\t\tdbits = 26;\n\t}\n\telse\n\t{ // Mozilla/Netscape seems to prefer am3\n\t\tBigInteger.prototype.am = am3;\n\t\tdbits = 28;\n\t}\n\tBigInteger.prototype.DB = dbits;\n\tBigInteger.prototype.DM = ((1 << dbits) - 1);\n\tBigInteger.prototype.DV = (1 << dbits);\n\tvar BI_FP = 52;\n\tBigInteger.prototype.FV = Math.pow(2, BI_FP);\n\tBigInteger.prototype.F1 = BI_FP - dbits;\n\tBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\t// Digit conversions\n\tvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tvar BI_RC = new Array();\n\tvar rr, vv;\n\trr = \"0\".charCodeAt(0);\n\tfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\trr = \"a\".charCodeAt(0);\n\tfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\trr = \"A\".charCodeAt(0);\n\tfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n\tfunction int2char(n)\n\t{\n\t\treturn BI_RM.charAt(n);\n\t}\n\n\tfunction intAt(s, i)\n\t{\n\t\tvar c = BI_RC[s.charCodeAt(i)];\n\t\treturn (c == null) ? -1 : c;\n\t}\n\t// (protected) copy this to r\n\tfunction bnpCopyTo(r)\n\t{\n\t\tfor (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\t\tr.t = this.t;\n\t\tr.s = this.s;\n\t}\n\t// (protected) set from integer value x, -DV <= x < DV\n\tfunction bnpFromInt(x)\n\t{\n\t\tthis.t = 1;\n\t\tthis.s = (x < 0) ? -1 : 0;\n\t\tif (x > 0) this[0] = x;\n\t\telse if (x < -1) this[0] = x + this.DV;\n\t\telse this.t = 0;\n\t}\n\t// return bigint initialized to value\n\tfunction nbv(i)\n\t{\n\t\tvar r = nbi();\n\t\tr.fromInt(i);\n\t\treturn r;\n\t}\n\t// (protected) set from string and radix\n\tfunction bnpFromString(s, b)\n\t{\n\t\tvar k;\n\t\tif (b == 16) k = 4;\n\t\telse if (b == 8) k = 3;\n\t\telse if (b == 256) k = 8; // byte array\n\t\telse if (b == 2) k = 1;\n\t\telse if (b == 32) k = 5;\n\t\telse if (b == 4) k = 2;\n\t\telse\n\t\t{\n\t\t\tthis.fromRadix(s, b);\n\t\t\treturn;\n\t\t}\n\t\tthis.t = 0;\n\t\tthis.s = 0;\n\t\tvar i = s.length,\n\t\t\tmi = false,\n\t\t\tsh = 0;\n\t\twhile (--i >= 0)\n\t\t{\n\t\t\tvar x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n\t\t\tif (x < 0)\n\t\t\t{\n\t\t\t\tif (s.charAt(i) == \"-\") mi = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmi = false;\n\t\t\tif (sh == 0)\n\t\t\t\tthis[this.t++] = x;\n\t\t\telse if (sh + k > this.DB)\n\t\t\t{\n\t\t\t\tthis[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n\t\t\t\tthis[this.t++] = (x >> (this.DB - sh));\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis[this.t - 1] |= x << sh;\n\t\t\tsh += k;\n\t\t\tif (sh >= this.DB) sh -= this.DB;\n\t\t}\n\t\tif (k == 8 && (s[0] & 0x80) != 0)\n\t\t{\n\t\t\tthis.s = -1;\n\t\t\tif (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n\t\t}\n\t\tthis.clamp();\n\t\tif (mi) BigInteger.ZERO.subTo(this, this);\n\t}\n\t// (protected) clamp off excess high words\n\tfunction bnpClamp()\n\t{\n\t\tvar c = this.s & this.DM;\n\t\twhile (this.t > 0 && this[this.t - 1] == c) --this.t;\n\t}\n\t// (public) return string representation in given radix\n\tfunction bnToString(b)\n\t{\n\t\tif (this.s < 0) return \"-\" + this.negate().toString(b);\n\t\tvar k;\n\t\tif (b == 16) k = 4;\n\t\telse if (b == 8) k = 3;\n\t\telse if (b == 2) k = 1;\n\t\telse if (b == 32) k = 5;\n\t\telse if (b == 4) k = 2;\n\t\telse return this.toRadix(b);\n\t\tvar km = (1 << k) - 1,\n\t\t\td, m = false,\n\t\t\tr = \"\",\n\t\t\ti = this.t;\n\t\tvar p = this.DB - (i * this.DB) % k;\n\t\tif (i-- > 0)\n\t\t{\n\t\t\tif (p < this.DB && (d = this[i] >> p) > 0)\n\t\t\t{\n\t\t\t\tm = true;\n\t\t\t\tr = int2char(d);\n\t\t\t}\n\t\t\twhile (i >= 0)\n\t\t\t{\n\t\t\t\tif (p < k)\n\t\t\t\t{\n\t\t\t\t\td = (this[i] & ((1 << p) - 1)) << (k - p);\n\t\t\t\t\td |= this[--i] >> (p += this.DB - k);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\td = (this[i] >> (p -= k)) & km;\n\t\t\t\t\tif (p <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tp += this.DB;\n\t\t\t\t\t\t--i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (d > 0) m = true;\n\t\t\t\tif (m) r += int2char(d);\n\t\t\t}\n\t\t}\n\t\treturn m ? r : \"0\";\n\t}\n\t// (public) -this\n\tfunction bnNegate()\n\t{\n\t\tvar r = nbi();\n\t\tBigInteger.ZERO.subTo(this, r);\n\t\treturn r;\n\t}\n\t// (public) |this|\n\tfunction bnAbs()\n\t{\n\t\treturn (this.s < 0) ? this.negate() : this;\n\t}\n\t// (public) return + if this > a, - if this < a, 0 if equal\n\tfunction bnCompareTo(a)\n\t{\n\t\tvar r = this.s - a.s;\n\t\tif (r != 0) return r;\n\t\tvar i = this.t;\n\t\tr = i - a.t;\n\t\tif (r != 0) return (this.s < 0) ? -r : r;\n\t\twhile (--i >= 0)\n\t\t\tif ((r = this[i] - a[i]) != 0) return r;\n\t\treturn 0;\n\t}\n\t// returns bit length of the integer x\n\tfunction nbits(x)\n\t{\n\t\tvar r = 1,\n\t\t\tt;\n\t\tif ((t = x >>> 16) != 0)\n\t\t{\n\t\t\tx = t;\n\t\t\tr += 16;\n\t\t}\n\t\tif ((t = x >> 8) != 0)\n\t\t{\n\t\t\tx = t;\n\t\t\tr += 8;\n\t\t}\n\t\tif ((t = x >> 4) != 0)\n\t\t{\n\t\t\tx = t;\n\t\t\tr += 4;\n\t\t}\n\t\tif ((t = x >> 2) != 0)\n\t\t{\n\t\t\tx = t;\n\t\t\tr += 2;\n\t\t}\n\t\tif ((t = x >> 1) != 0)\n\t\t{\n\t\t\tx = t;\n\t\t\tr += 1;\n\t\t}\n\t\treturn r;\n\t}\n\t// (public) return the number of bits in \"this\"\n\tfunction bnBitLength()\n\t{\n\t\tif (this.t <= 0) return 0;\n\t\treturn this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n\t}\n\t// (protected) r = this << n*DB\n\tfunction bnpDLShiftTo(n, r)\n\t{\n\t\tvar i;\n\t\tfor (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\t\tfor (i = n - 1; i >= 0; --i) r[i] = 0;\n\t\tr.t = this.t + n;\n\t\tr.s = this.s;\n\t}\n\t// (protected) r = this >> n*DB\n\tfunction bnpDRShiftTo(n, r)\n\t{\n\t\tfor (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\t\tr.t = Math.max(this.t - n, 0);\n\t\tr.s = this.s;\n\t}\n\t// (protected) r = this << n\n\tfunction bnpLShiftTo(n, r)\n\t{\n\t\tvar bs = n % this.DB;\n\t\tvar cbs = this.DB - bs;\n\t\tvar bm = (1 << cbs) - 1;\n\t\tvar ds = Math.floor(n / this.DB),\n\t\t\tc = (this.s << bs) & this.DM,\n\t\t\ti;\n\t\tfor (i = this.t - 1; i >= 0; --i)\n\t\t{\n\t\t\tr[i + ds + 1] = (this[i] >> cbs) | c;\n\t\t\tc = (this[i] & bm) << bs;\n\t\t}\n\t\tfor (i = ds - 1; i >= 0; --i) r[i] = 0;\n\t\tr[ds] = c;\n\t\tr.t = this.t + ds + 1;\n\t\tr.s = this.s;\n\t\tr.clamp();\n\t}\n\t// (protected) r = this >> n\n\tfunction bnpRShiftTo(n, r)\n\t{\n\t\tr.s = this.s;\n\t\tvar ds = Math.floor(n / this.DB);\n\t\tif (ds >= this.t)\n\t\t{\n\t\t\tr.t = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar bs = n % this.DB;\n\t\tvar cbs = this.DB - bs;\n\t\tvar bm = (1 << bs) - 1;\n\t\tr[0] = this[ds] >> bs;\n\t\tfor (var i = ds + 1; i < this.t; ++i)\n\t\t{\n\t\t\tr[i - ds - 1] |= (this[i] & bm) << cbs;\n\t\t\tr[i - ds] = this[i] >> bs;\n\t\t}\n\t\tif (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n\t\tr.t = this.t - ds;\n\t\tr.clamp();\n\t}\n\t// (protected) r = this - a\n\tfunction bnpSubTo(a, r)\n\t{\n\t\tvar i = 0,\n\t\t\tc = 0,\n\t\t\tm = Math.min(a.t, this.t);\n\t\twhile (i < m)\n\t\t{\n\t\t\tc += this[i] - a[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tif (a.t < this.t)\n\t\t{\n\t\t\tc -= a.s;\n\t\t\twhile (i < this.t)\n\t\t\t{\n\t\t\t\tc += this[i];\n\t\t\t\tr[i++] = c & this.DM;\n\t\t\t\tc >>= this.DB;\n\t\t\t}\n\t\t\tc += this.s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc += this.s;\n\t\t\twhile (i < a.t)\n\t\t\t{\n\t\t\t\tc -= a[i];\n\t\t\t\tr[i++] = c & this.DM;\n\t\t\t\tc >>= this.DB;\n\t\t\t}\n\t\t\tc -= a.s;\n\t\t}\n\t\tr.s = (c < 0) ? -1 : 0;\n\t\tif (c < -1) r[i++] = this.DV + c;\n\t\telse if (c > 0) r[i++] = c;\n\t\tr.t = i;\n\t\tr.clamp();\n\t}\n\t// (protected) r = this * a, r != this,a (HAC 14.12)\n\t// \"this\" should be the larger one if appropriate.\n\tfunction bnpMultiplyTo(a, r)\n\t{\n\t\tvar x = this.abs(),\n\t\t\ty = a.abs();\n\t\tvar i = x.t;\n\t\tr.t = i + y.t;\n\t\twhile (--i >= 0) r[i] = 0;\n\t\tfor (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\t\tr.s = 0;\n\t\tr.clamp();\n\t\tif (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n\t}\n\t// (protected) r = this^2, r != this (HAC 14.16)\n\tfunction bnpSquareTo(r)\n\t{\n\t\tvar x = this.abs();\n\t\tvar i = r.t = 2 * x.t;\n\t\twhile (--i >= 0) r[i] = 0;\n\t\tfor (i = 0; i < x.t - 1; ++i)\n\t\t{\n\t\t\tvar c = x.am(i, x[i], r, 2 * i, 0, 1);\n\t\t\tif ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n\t\t\t{\n\t\t\t\tr[i + x.t] -= x.DV;\n\t\t\t\tr[i + x.t + 1] = 1;\n\t\t\t}\n\t\t}\n\t\tif (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n\t\tr.s = 0;\n\t\tr.clamp();\n\t}\n\t// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n\t// r != q, this != m.  q or r may be null.\n\tfunction bnpDivRemTo(m, q, r)\n\t{\n\t\tvar pm = m.abs();\n\t\tif (pm.t <= 0) return;\n\t\tvar pt = this.abs();\n\t\tif (pt.t < pm.t)\n\t\t{\n\t\t\tif (q != null) q.fromInt(0);\n\t\t\tif (r != null) this.copyTo(r);\n\t\t\treturn;\n\t\t}\n\t\tif (r == null) r = nbi();\n\t\tvar y = nbi(),\n\t\t\tts = this.s,\n\t\t\tms = m.s;\n\t\tvar nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\t\tif (nsh > 0)\n\t\t{\n\t\t\tpm.lShiftTo(nsh, y);\n\t\t\tpt.lShiftTo(nsh, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpm.copyTo(y);\n\t\t\tpt.copyTo(r);\n\t\t}\n\t\tvar ys = y.t;\n\t\tvar y0 = y[ys - 1];\n\t\tif (y0 == 0) return;\n\t\tvar yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n\t\tvar d1 = this.FV / yt,\n\t\t\td2 = (1 << this.F1) / yt,\n\t\t\te = 1 << this.F2;\n\t\tvar i = r.t,\n\t\t\tj = i - ys,\n\t\t\tt = (q == null) ? nbi() : q;\n\t\ty.dlShiftTo(j, t);\n\t\tif (r.compareTo(t) >= 0)\n\t\t{\n\t\t\tr[r.t++] = 1;\n\t\t\tr.subTo(t, r);\n\t\t}\n\t\tBigInteger.ONE.dlShiftTo(ys, t);\n\t\tt.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\t\twhile (y.t < ys) y[y.t++] = 0;\n\t\twhile (--j >= 0)\n\t\t{\n\t\t\t// Estimate quotient digit\n\t\t\tvar qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\t\t\tif ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n\t\t\t{ // Try it out\n\t\t\t\ty.dlShiftTo(j, t);\n\t\t\t\tr.subTo(t, r);\n\t\t\t\twhile (r[i] < --qd) r.subTo(t, r);\n\t\t\t}\n\t\t}\n\t\tif (q != null)\n\t\t{\n\t\t\tr.drShiftTo(ys, q);\n\t\t\tif (ts != ms) BigInteger.ZERO.subTo(q, q);\n\t\t}\n\t\tr.t = ys;\n\t\tr.clamp();\n\t\tif (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\t\tif (ts < 0) BigInteger.ZERO.subTo(r, r);\n\t}\n\t// (public) this mod a\n\tfunction bnMod(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.abs().divRemTo(a, null, r);\n\t\tif (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n\t\treturn r;\n\t}\n\t// Modular reduction using \"classic\" algorithm\n\t/**\n\t* @constructor\n\t*/\n\tfunction Classic(m)\n\t{\n\t\tthis.m = m;\n\t}\n\n\tfunction cConvert(x)\n\t{\n\t\tif (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n\t\telse return x;\n\t}\n\n\tfunction cRevert(x)\n\t{\n\t\treturn x;\n\t}\n\n\tfunction cReduce(x)\n\t{\n\t\tx.divRemTo(this.m, null, x);\n\t}\n\n\tfunction cMulTo(x, y, r)\n\t{\n\t\tx.multiplyTo(y, r);\n\t\tthis.reduce(r);\n\t}\n\n\tfunction cSqrTo(x, r)\n\t{\n\t\tx.squareTo(r);\n\t\tthis.reduce(r);\n\t}\n\tClassic.prototype.convert = cConvert;\n\tClassic.prototype.revert = cRevert;\n\tClassic.prototype.reduce = cReduce;\n\tClassic.prototype.mulTo = cMulTo;\n\tClassic.prototype.sqrTo = cSqrTo;\n\t// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n\t// justification:\n\t//         xy == 1 (mod m)\n\t//         xy =  1+km\n\t//   xy(2-xy) = (1+km)(1-km)\n\t// x[y(2-xy)] = 1-k^2m^2\n\t// x[y(2-xy)] == 1 (mod m^2)\n\t// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n\t// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n\t// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\tfunction bnpInvDigit()\n\t{\n\t\tif (this.t < 1) return 0;\n\t\tvar x = this[0];\n\t\tif ((x & 1) == 0) return 0;\n\t\tvar y = x & 3; // y == 1/x mod 2^2\n\t\ty = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n\t\ty = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n\t\ty = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n\t\t// last step - calculate inverse mod DV directly;\n\t\t// assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\t\ty = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n\t\t// we really want the negative inverse, and -DV < y < DV\n\t\treturn (y > 0) ? this.DV - y : -y;\n\t}\n\t// Montgomery reduction\n\t/**\n\t* @constructor\n\t*/\n\tfunction Montgomery(m)\n\t{\n\t\tthis.m = m;\n\t\tthis.mp = m.invDigit();\n\t\tthis.mpl = this.mp & 0x7fff;\n\t\tthis.mph = this.mp >> 15;\n\t\tthis.um = (1 << (m.DB - 15)) - 1;\n\t\tthis.mt2 = 2 * m.t;\n\t}\n\t// xR mod m\n\tfunction montConvert(x)\n\t{\n\t\tvar r = nbi();\n\t\tx.abs().dlShiftTo(this.m.t, r);\n\t\tr.divRemTo(this.m, null, r);\n\t\tif (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n\t\treturn r;\n\t}\n\t// x/R mod m\n\tfunction montRevert(x)\n\t{\n\t\tvar r = nbi();\n\t\tx.copyTo(r);\n\t\tthis.reduce(r);\n\t\treturn r;\n\t}\n\t// x = x/R mod m (HAC 14.32)\n\tfunction montReduce(x)\n\t{\n\t\twhile (x.t <= this.mt2) // pad x so am has enough room later\n\t\t\tx[x.t++] = 0;\n\t\tfor (var i = 0; i < this.m.t; ++i)\n\t\t{\n\t\t\t// faster way of calculating u0 = x[i]*mp mod DV\n\t\t\tvar j = x[i] & 0x7fff;\n\t\t\tvar u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n\t\t\t// use am to combine the multiply-shift-add into one call\n\t\t\tj = i + this.m.t;\n\t\t\tx[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n\t\t\t// propagate carry\n\t\t\twhile (x[j] >= x.DV)\n\t\t\t{\n\t\t\t\tx[j] -= x.DV;\n\t\t\t\tx[++j]++;\n\t\t\t}\n\t\t}\n\t\tx.clamp();\n\t\tx.drShiftTo(this.m.t, x);\n\t\tif (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t}\n\t// r = \"x^2/R mod m\"; x != r\n\tfunction montSqrTo(x, r)\n\t{\n\t\tx.squareTo(r);\n\t\tthis.reduce(r);\n\t}\n\t// r = \"xy/R mod m\"; x,y != r\n\tfunction montMulTo(x, y, r)\n\t{\n\t\tx.multiplyTo(y, r);\n\t\tthis.reduce(r);\n\t}\n\tMontgomery.prototype.convert = montConvert;\n\tMontgomery.prototype.revert = montRevert;\n\tMontgomery.prototype.reduce = montReduce;\n\tMontgomery.prototype.mulTo = montMulTo;\n\tMontgomery.prototype.sqrTo = montSqrTo;\n\t// (protected) true iff this is even\n\tfunction bnpIsEven()\n\t{\n\t\treturn ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n\t}\n\t// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\tfunction bnpExp(e, z)\n\t{\n\t\tif (e > 0xffffffff || e < 1) return BigInteger.ONE;\n\t\tvar r = nbi(),\n\t\t\tr2 = nbi(),\n\t\t\tg = z.convert(this),\n\t\t\ti = nbits(e) - 1;\n\t\tg.copyTo(r);\n\t\twhile (--i >= 0)\n\t\t{\n\t\t\tz.sqrTo(r, r2);\n\t\t\tif ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar t = r;\n\t\t\t\tr = r2;\n\t\t\t\tr2 = t;\n\t\t\t}\n\t\t}\n\t\treturn z.revert(r);\n\t}\n\t// (public) this^e % m, 0 <= e < 2^32\n\tfunction bnModPowInt(e, m)\n\t{\n\t\tvar z;\n\t\tif (e < 256 || m.isEven()) z = new Classic(m);\n\t\telse z = new Montgomery(m);\n\t\treturn this.exp(e, z);\n\t}\n\t// protected\n\tBigInteger.prototype.copyTo = bnpCopyTo;\n\tBigInteger.prototype.fromInt = bnpFromInt;\n\tBigInteger.prototype.fromString = bnpFromString;\n\tBigInteger.prototype.clamp = bnpClamp;\n\tBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n\tBigInteger.prototype.drShiftTo = bnpDRShiftTo;\n\tBigInteger.prototype.lShiftTo = bnpLShiftTo;\n\tBigInteger.prototype.rShiftTo = bnpRShiftTo;\n\tBigInteger.prototype.subTo = bnpSubTo;\n\tBigInteger.prototype.multiplyTo = bnpMultiplyTo;\n\tBigInteger.prototype.squareTo = bnpSquareTo;\n\tBigInteger.prototype.divRemTo = bnpDivRemTo;\n\tBigInteger.prototype.invDigit = bnpInvDigit;\n\tBigInteger.prototype.isEven = bnpIsEven;\n\tBigInteger.prototype.exp = bnpExp;\n\t// public\n\tBigInteger.prototype.toString = bnToString;\n\tBigInteger.prototype.negate = bnNegate;\n\tBigInteger.prototype.abs = bnAbs;\n\tBigInteger.prototype.compareTo = bnCompareTo;\n\tBigInteger.prototype.bitLength = bnBitLength;\n\tBigInteger.prototype.mod = bnMod;\n\tBigInteger.prototype.modPowInt = bnModPowInt;\n\t// \"constants\"\n\tBigInteger.ZERO = nbv(0);\n\tBigInteger.ONE = nbv(1);\n\t// Copyright (c) 2005-2009  Tom Wu\n\t// All Rights Reserved.\n\t// See \"LICENSE\" for details.\n\t// Extended JavaScript BN functions, required for RSA private ops.\n\t// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\t// Version 1.2: square() API, isProbablePrime fix\n\t// (public)\n\tfunction bnClone()\n\t{\n\t\tvar r = nbi();\n\t\tthis.copyTo(r);\n\t\treturn r;\n\t}\n\t// (public) return value as integer\n\tfunction bnIntValue()\n\t{\n\t\tif (this.s < 0)\n\t\t{\n\t\t\tif (this.t == 1) return this[0] - this.DV;\n\t\t\telse if (this.t == 0) return -1;\n\t\t}\n\t\telse if (this.t == 1) return this[0];\n\t\telse if (this.t == 0) return 0;\n\t\t// assumes 16 < DB < 32\n\t\treturn ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n\t}\n\t// (public) return value as byte\n\tfunction bnByteValue()\n\t{\n\t\treturn (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n\t}\n\t// (public) return value as short (assumes DB>=16)\n\tfunction bnShortValue()\n\t{\n\t\treturn (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n\t}\n\t// (protected) return x s.t. r^x < DV\n\tfunction bnpChunkSize(r)\n\t{\n\t\treturn Math.floor(Math.LN2 * this.DB / Math.log(r));\n\t}\n\t// (public) 0 if this == 0, 1 if this > 0\n\tfunction bnSigNum()\n\t{\n\t\tif (this.s < 0) return -1;\n\t\telse if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n\t\telse return 1;\n\t}\n\t// (protected) convert to radix string\n\tfunction bnpToRadix(b)\n\t{\n\t\tif (b == null) b = 10;\n\t\tif (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n\t\tvar cs = this.chunkSize(b);\n\t\tvar a = Math.pow(b, cs);\n\t\tvar d = nbv(a),\n\t\t\ty = nbi(),\n\t\t\tz = nbi(),\n\t\t\tr = \"\";\n\t\tthis.divRemTo(d, y, z);\n\t\twhile (y.signum() > 0)\n\t\t{\n\t\t\tr = (a + z.intValue()).toString(b).substr(1) + r;\n\t\t\ty.divRemTo(d, y, z);\n\t\t}\n\t\treturn z.intValue().toString(b) + r;\n\t}\n\t// (protected) convert from radix string\n\tfunction bnpFromRadix(s, b)\n\t{\n\t\tthis.fromInt(0);\n\t\tif (b == null) b = 10;\n\t\tvar cs = this.chunkSize(b);\n\t\tvar d = Math.pow(b, cs),\n\t\t\tmi = false,\n\t\t\tj = 0,\n\t\t\tw = 0;\n\t\tfor (var i = 0; i < s.length; ++i)\n\t\t{\n\t\t\tvar x = intAt(s, i);\n\t\t\tif (x < 0)\n\t\t\t{\n\t\t\t\tif (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tw = b * w + x;\n\t\t\tif (++j >= cs)\n\t\t\t{\n\t\t\t\tthis.dMultiply(d);\n\t\t\t\tthis.dAddOffset(w, 0);\n\t\t\t\tj = 0;\n\t\t\t\tw = 0;\n\t\t\t}\n\t\t}\n\t\tif (j > 0)\n\t\t{\n\t\t\tthis.dMultiply(Math.pow(b, j));\n\t\t\tthis.dAddOffset(w, 0);\n\t\t}\n\t\tif (mi) BigInteger.ZERO.subTo(this, this);\n\t}\n\t// (protected) alternate constructor\n\tfunction bnpFromNumber(a, b, c)\n\t{\n\t\tif (\"number\" == typeof b)\n\t\t{\n\t\t\t// new BigInteger(int,int,RNG)\n\t\t\tif (a < 2) this.fromInt(1);\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.fromNumber(a, c);\n\t\t\t\tif (!this.testBit(a - 1)) // force MSB set\n\t\t\t\t\tthis.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n\t\t\t\tif (this.isEven()) this.dAddOffset(1, 0); // force odd\n\t\t\t\twhile (!this.isProbablePrime(b))\n\t\t\t\t{\n\t\t\t\t\tthis.dAddOffset(2, 0);\n\t\t\t\t\tif (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// new BigInteger(int,RNG)\n\t\t\tvar x = new Array(),\n\t\t\t\tt = a & 7;\n\t\t\tx.length = (a >> 3) + 1;\n\t\t\tb.nextBytes(x);\n\t\t\tif (t > 0) x[0] &= ((1 << t) - 1);\n\t\t\telse x[0] = 0;\n\t\t\tthis.fromString(x, 256);\n\t\t}\n\t}\n\t// (public) convert to bigendian byte array\n\tfunction bnToByteArray()\n\t{\n\t\tvar i = this.t,\n\t\t\tr = new Array();\n\t\tr[0] = this.s;\n\t\tvar p = this.DB - (i * this.DB) % 8,\n\t\t\td, k = 0;\n\t\tif (i-- > 0)\n\t\t{\n\t\t\tif (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n\t\t\t\tr[k++] = d | (this.s << (this.DB - p));\n\t\t\twhile (i >= 0)\n\t\t\t{\n\t\t\t\tif (p < 8)\n\t\t\t\t{\n\t\t\t\t\td = (this[i] & ((1 << p) - 1)) << (8 - p);\n\t\t\t\t\td |= this[--i] >> (p += this.DB - 8);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\td = (this[i] >> (p -= 8)) & 0xff;\n\t\t\t\t\tif (p <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tp += this.DB;\n\t\t\t\t\t\t--i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((d & 0x80) != 0) d |= -256;\n\t\t\t\tif (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n\t\t\t\tif (k > 0 || d != this.s) r[k++] = d;\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\n\tfunction bnEquals(a)\n\t{\n\t\treturn (this.compareTo(a) == 0);\n\t}\n\n\tfunction bnMin(a)\n\t{\n\t\treturn (this.compareTo(a) < 0) ? this : a;\n\t}\n\n\tfunction bnMax(a)\n\t{\n\t\treturn (this.compareTo(a) > 0) ? this : a;\n\t}\n\t// (protected) r = this op a (bitwise)\n\tfunction bnpBitwiseTo(a, op, r)\n\t{\n\t\tvar i, f, m = Math.min(a.t, this.t);\n\t\tfor (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n\t\tif (a.t < this.t)\n\t\t{\n\t\t\tf = a.s & this.DM;\n\t\t\tfor (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n\t\t\tr.t = this.t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tf = this.s & this.DM;\n\t\t\tfor (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\t\t\tr.t = a.t;\n\t\t}\n\t\tr.s = op(this.s, a.s);\n\t\tr.clamp();\n\t}\n\t// (public) this & a\n\tfunction op_and(x, y)\n\t{\n\t\treturn x & y;\n\t}\n\n\tfunction bnAnd(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.bitwiseTo(a, op_and, r);\n\t\treturn r;\n\t}\n\t// (public) this | a\n\tfunction op_or(x, y)\n\t{\n\t\treturn x | y;\n\t}\n\n\tfunction bnOr(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.bitwiseTo(a, op_or, r);\n\t\treturn r;\n\t}\n\t// (public) this ^ a\n\tfunction op_xor(x, y)\n\t{\n\t\treturn x ^ y;\n\t}\n\n\tfunction bnXor(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.bitwiseTo(a, op_xor, r);\n\t\treturn r;\n\t}\n\t// (public) this & ~a\n\tfunction op_andnot(x, y)\n\t{\n\t\treturn x & ~y;\n\t}\n\n\tfunction bnAndNot(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.bitwiseTo(a, op_andnot, r);\n\t\treturn r;\n\t}\n\t// (public) ~this\n\tfunction bnNot()\n\t{\n\t\tvar r = nbi();\n\t\tfor (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\t\tr.t = this.t;\n\t\tr.s = ~this.s;\n\t\treturn r;\n\t}\n\t// (public) this << n\n\tfunction bnShiftLeft(n)\n\t{\n\t\tvar r = nbi();\n\t\tif (n < 0) this.rShiftTo(-n, r);\n\t\telse this.lShiftTo(n, r);\n\t\treturn r;\n\t}\n\t// (public) this >> n\n\tfunction bnShiftRight(n)\n\t{\n\t\tvar r = nbi();\n\t\tif (n < 0) this.lShiftTo(-n, r);\n\t\telse this.rShiftTo(n, r);\n\t\treturn r;\n\t}\n\t// return index of lowest 1-bit in x, x < 2^31\n\tfunction lbit(x)\n\t{\n\t\tif (x == 0) return -1;\n\t\tvar r = 0;\n\t\tif ((x & 0xffff) == 0)\n\t\t{\n\t\t\tx >>= 16;\n\t\t\tr += 16;\n\t\t}\n\t\tif ((x & 0xff) == 0)\n\t\t{\n\t\t\tx >>= 8;\n\t\t\tr += 8;\n\t\t}\n\t\tif ((x & 0xf) == 0)\n\t\t{\n\t\t\tx >>= 4;\n\t\t\tr += 4;\n\t\t}\n\t\tif ((x & 3) == 0)\n\t\t{\n\t\t\tx >>= 2;\n\t\t\tr += 2;\n\t\t}\n\t\tif ((x & 1) == 0) ++r;\n\t\treturn r;\n\t}\n\t// (public) returns index of lowest 1-bit (or -1 if none)\n\tfunction bnGetLowestSetBit()\n\t{\n\t\tfor (var i = 0; i < this.t; ++i)\n\t\t\tif (this[i] != 0) return i * this.DB + lbit(this[i]);\n\t\tif (this.s < 0) return this.t * this.DB;\n\t\treturn -1;\n\t}\n\t// return number of 1 bits in x\n\tfunction cbit(x)\n\t{\n\t\tvar r = 0;\n\t\twhile (x != 0)\n\t\t{\n\t\t\tx &= x - 1;\n\t\t\t++r;\n\t\t}\n\t\treturn r;\n\t}\n\t// (public) return number of set bits\n\tfunction bnBitCount()\n\t{\n\t\tvar r = 0,\n\t\t\tx = this.s & this.DM;\n\t\tfor (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n\t\treturn r;\n\t}\n\t// (public) true iff nth bit is set\n\tfunction bnTestBit(n)\n\t{\n\t\tvar j = Math.floor(n / this.DB);\n\t\tif (j >= this.t) return (this.s != 0);\n\t\treturn ((this[j] & (1 << (n % this.DB))) != 0);\n\t}\n\t// (protected) this op (1<<n)\n\tfunction bnpChangeBit(n, op)\n\t{\n\t\tvar r = BigInteger.ONE.shiftLeft(n);\n\t\tthis.bitwiseTo(r, op, r);\n\t\treturn r;\n\t}\n\t// (public) this | (1<<n)\n\tfunction bnSetBit(n)\n\t{\n\t\treturn this.changeBit(n, op_or);\n\t}\n\t// (public) this & ~(1<<n)\n\tfunction bnClearBit(n)\n\t{\n\t\treturn this.changeBit(n, op_andnot);\n\t}\n\t// (public) this ^ (1<<n)\n\tfunction bnFlipBit(n)\n\t{\n\t\treturn this.changeBit(n, op_xor);\n\t}\n\t// (protected) r = this + a\n\tfunction bnpAddTo(a, r)\n\t{\n\t\tvar i = 0,\n\t\t\tc = 0,\n\t\t\tm = Math.min(a.t, this.t);\n\t\twhile (i < m)\n\t\t{\n\t\t\tc += this[i] + a[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tif (a.t < this.t)\n\t\t{\n\t\t\tc += a.s;\n\t\t\twhile (i < this.t)\n\t\t\t{\n\t\t\t\tc += this[i];\n\t\t\t\tr[i++] = c & this.DM;\n\t\t\t\tc >>= this.DB;\n\t\t\t}\n\t\t\tc += this.s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc += this.s;\n\t\t\twhile (i < a.t)\n\t\t\t{\n\t\t\t\tc += a[i];\n\t\t\t\tr[i++] = c & this.DM;\n\t\t\t\tc >>= this.DB;\n\t\t\t}\n\t\t\tc += a.s;\n\t\t}\n\t\tr.s = (c < 0) ? -1 : 0;\n\t\tif (c > 0) r[i++] = c;\n\t\telse if (c < -1) r[i++] = this.DV + c;\n\t\tr.t = i;\n\t\tr.clamp();\n\t}\n\t// (public) this + a\n\tfunction bnAdd(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.addTo(a, r);\n\t\treturn r;\n\t}\n\t// (public) this - a\n\tfunction bnSubtract(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.subTo(a, r);\n\t\treturn r;\n\t}\n\t// (public) this * a\n\tfunction bnMultiply(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.multiplyTo(a, r);\n\t\treturn r;\n\t}\n\t// (public) this^2\n\tfunction bnSquare()\n\t{\n\t\tvar r = nbi();\n\t\tthis.squareTo(r);\n\t\treturn r;\n\t}\n\t// (public) this / a\n\tfunction bnDivide(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.divRemTo(a, r, null);\n\t\treturn r;\n\t}\n\t// (public) this % a\n\tfunction bnRemainder(a)\n\t{\n\t\tvar r = nbi();\n\t\tthis.divRemTo(a, null, r);\n\t\treturn r;\n\t}\n\t// (public) [this/a,this%a]\n\tfunction bnDivideAndRemainder(a)\n\t{\n\t\tvar q = nbi(),\n\t\t\tr = nbi();\n\t\tthis.divRemTo(a, q, r);\n\t\treturn new Array(q, r);\n\t}\n\t// (protected) this *= n, this >= 0, 1 < n < DV\n\tfunction bnpDMultiply(n)\n\t{\n\t\tthis[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n\t\t++this.t;\n\t\tthis.clamp();\n\t}\n\t// (protected) this += n << w words, this >= 0\n\tfunction bnpDAddOffset(n, w)\n\t{\n\t\tif (n == 0) return;\n\t\twhile (this.t <= w) this[this.t++] = 0;\n\t\tthis[w] += n;\n\t\twhile (this[w] >= this.DV)\n\t\t{\n\t\t\tthis[w] -= this.DV;\n\t\t\tif (++w >= this.t) this[this.t++] = 0;\n\t\t\t++this[w];\n\t\t}\n\t}\n\t// A \"null\" reducer\n\t/**\n\t* @constructor\n\t*/\n\tfunction NullExp()\n\t{}\n\n\tfunction nNop(x)\n\t{\n\t\treturn x;\n\t}\n\n\tfunction nMulTo(x, y, r)\n\t{\n\t\tx.multiplyTo(y, r);\n\t}\n\n\tfunction nSqrTo(x, r)\n\t{\n\t\tx.squareTo(r);\n\t}\n\tNullExp.prototype.convert = nNop;\n\tNullExp.prototype.revert = nNop;\n\tNullExp.prototype.mulTo = nMulTo;\n\tNullExp.prototype.sqrTo = nSqrTo;\n\t// (public) this^e\n\tfunction bnPow(e)\n\t{\n\t\treturn this.exp(e, new NullExp());\n\t}\n\t// (protected) r = lower n words of \"this * a\", a.t <= n\n\t// \"this\" should be the larger one if appropriate.\n\tfunction bnpMultiplyLowerTo(a, n, r)\n\t{\n\t\tvar i = Math.min(this.t + a.t, n);\n\t\tr.s = 0; // assumes a,this >= 0\n\t\tr.t = i;\n\t\twhile (i > 0) r[--i] = 0;\n\t\tvar j;\n\t\tfor (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\t\tfor (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\t\tr.clamp();\n\t}\n\t// (protected) r = \"this * a\" without lower n words, n > 0\n\t// \"this\" should be the larger one if appropriate.\n\tfunction bnpMultiplyUpperTo(a, n, r)\n\t{\n\t\t--n;\n\t\tvar i = r.t = this.t + a.t - n;\n\t\tr.s = 0; // assumes a,this >= 0\n\t\twhile (--i >= 0) r[i] = 0;\n\t\tfor (i = Math.max(n - this.t, 0); i < a.t; ++i)\n\t\t\tr[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\t\tr.clamp();\n\t\tr.drShiftTo(1, r);\n\t}\n\t// Barrett modular reduction\n\t/**\n\t* @constructor\n\t*/\n\tfunction Barrett(m)\n\t{\n\t\t// setup Barrett\n\t\tthis.r2 = nbi();\n\t\tthis.q3 = nbi();\n\t\tBigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n\t\tthis.mu = this.r2.divide(m);\n\t\tthis.m = m;\n\t}\n\n\tfunction barrettConvert(x)\n\t{\n\t\tif (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n\t\telse if (x.compareTo(this.m) < 0) return x;\n\t\telse\n\t\t{\n\t\t\tvar r = nbi();\n\t\t\tx.copyTo(r);\n\t\t\tthis.reduce(r);\n\t\t\treturn r;\n\t\t}\n\t}\n\n\tfunction barrettRevert(x)\n\t{\n\t\treturn x;\n\t}\n\t// x = x mod m (HAC 14.42)\n\tfunction barrettReduce(x)\n\t{\n\t\tx.drShiftTo(this.m.t - 1, this.r2);\n\t\tif (x.t > this.m.t + 1)\n\t\t{\n\t\t\tx.t = this.m.t + 1;\n\t\t\tx.clamp();\n\t\t}\n\t\tthis.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n\t\tthis.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\t\twhile (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n\t\tx.subTo(this.r2, x);\n\t\twhile (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t}\n\t// r = x^2 mod m; x != r\n\tfunction barrettSqrTo(x, r)\n\t{\n\t\tx.squareTo(r);\n\t\tthis.reduce(r);\n\t}\n\t// r = x*y mod m; x,y != r\n\tfunction barrettMulTo(x, y, r)\n\t{\n\t\tx.multiplyTo(y, r);\n\t\tthis.reduce(r);\n\t}\n\tBarrett.prototype.convert = barrettConvert;\n\tBarrett.prototype.revert = barrettRevert;\n\tBarrett.prototype.reduce = barrettReduce;\n\tBarrett.prototype.mulTo = barrettMulTo;\n\tBarrett.prototype.sqrTo = barrettSqrTo;\n\t// (public) this^e % m (HAC 14.85)\n\tfunction bnModPow(e, m)\n\t{\n\t\tvar i = e.bitLength(),\n\t\t\tk, r = nbv(1),\n\t\t\tz;\n\t\tif (i <= 0) return r;\n\t\telse if (i < 18) k = 1;\n\t\telse if (i < 48) k = 3;\n\t\telse if (i < 144) k = 4;\n\t\telse if (i < 768) k = 5;\n\t\telse k = 6;\n\t\tif (i < 8)\n\t\t\tz = new Classic(m);\n\t\telse if (m.isEven())\n\t\t\tz = new Barrett(m);\n\t\telse\n\t\t\tz = new Montgomery(m);\n\t\t// precomputation\n\t\tvar g = new Array(),\n\t\t\tn = 3,\n\t\t\tk1 = k - 1,\n\t\t\tkm = (1 << k) - 1;\n\t\tg[1] = z.convert(this);\n\t\tif (k > 1)\n\t\t{\n\t\t\tvar g2 = nbi();\n\t\t\tz.sqrTo(g[1], g2);\n\t\t\twhile (n <= km)\n\t\t\t{\n\t\t\t\tg[n] = nbi();\n\t\t\t\tz.mulTo(g2, g[n - 2], g[n]);\n\t\t\t\tn += 2;\n\t\t\t}\n\t\t}\n\t\tvar j = e.t - 1,\n\t\t\tw, is1 = true,\n\t\t\tr2 = nbi(),\n\t\t\tt;\n\t\ti = nbits(e[j]) - 1;\n\t\twhile (j >= 0)\n\t\t{\n\t\t\tif (i >= k1) w = (e[j] >> (i - k1)) & km;\n\t\t\telse\n\t\t\t{\n\t\t\t\tw = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n\t\t\t\tif (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n\t\t\t}\n\t\t\tn = k;\n\t\t\twhile ((w & 1) == 0)\n\t\t\t{\n\t\t\t\tw >>= 1;\n\t\t\t\t--n;\n\t\t\t}\n\t\t\tif ((i -= n) < 0)\n\t\t\t{\n\t\t\t\ti += this.DB;\n\t\t\t\t--j;\n\t\t\t}\n\t\t\tif (is1)\n\t\t\t{ // ret == 1, don't bother squaring or multiplying it\n\t\t\t\tg[w].copyTo(r);\n\t\t\t\tis1 = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (n > 1)\n\t\t\t\t{\n\t\t\t\t\tz.sqrTo(r, r2);\n\t\t\t\t\tz.sqrTo(r2, r);\n\t\t\t\t\tn -= 2;\n\t\t\t\t}\n\t\t\t\tif (n > 0) z.sqrTo(r, r2);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tt = r;\n\t\t\t\t\tr = r2;\n\t\t\t\t\tr2 = t;\n\t\t\t\t}\n\t\t\t\tz.mulTo(r2, g[w], r);\n\t\t\t}\n\t\t\twhile (j >= 0 && (e[j] & (1 << i)) == 0)\n\t\t\t{\n\t\t\t\tz.sqrTo(r, r2);\n\t\t\t\tt = r;\n\t\t\t\tr = r2;\n\t\t\t\tr2 = t;\n\t\t\t\tif (--i < 0)\n\t\t\t\t{\n\t\t\t\t\ti = this.DB - 1;\n\t\t\t\t\t--j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn z.revert(r);\n\t}\n\t// (public) gcd(this,a) (HAC 14.54)\n\tfunction bnGCD(a)\n\t{\n\t\tvar x = (this.s < 0) ? this.negate() : this.clone();\n\t\tvar y = (a.s < 0) ? a.negate() : a.clone();\n\t\tif (x.compareTo(y) < 0)\n\t\t{\n\t\t\tvar t = x;\n\t\t\tx = y;\n\t\t\ty = t;\n\t\t}\n\t\tvar i = x.getLowestSetBit(),\n\t\t\tg = y.getLowestSetBit();\n\t\tif (g < 0) return x;\n\t\tif (i < g) g = i;\n\t\tif (g > 0)\n\t\t{\n\t\t\tx.rShiftTo(g, x);\n\t\t\ty.rShiftTo(g, y);\n\t\t}\n\t\twhile (x.signum() > 0)\n\t\t{\n\t\t\tif ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n\t\t\tif ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\t\t\tif (x.compareTo(y) >= 0)\n\t\t\t{\n\t\t\t\tx.subTo(y, x);\n\t\t\t\tx.rShiftTo(1, x);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty.subTo(x, y);\n\t\t\t\ty.rShiftTo(1, y);\n\t\t\t}\n\t\t}\n\t\tif (g > 0) y.lShiftTo(g, y);\n\t\treturn y;\n\t}\n\t// (protected) this % n, n < 2^26\n\tfunction bnpModInt(n)\n\t{\n\t\tif (n <= 0) return 0;\n\t\tvar d = this.DV % n,\n\t\t\tr = (this.s < 0) ? n - 1 : 0;\n\t\tif (this.t > 0)\n\t\t\tif (d == 0) r = this[0] % n;\n\t\t\telse\n\t\t\t\tfor (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n\t\treturn r;\n\t}\n\t// (public) 1/this % m (HAC 14.61)\n\tfunction bnModInverse(m)\n\t{\n\t\tvar ac = m.isEven();\n\t\tif ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n\t\tvar u = m.clone(),\n\t\t\tv = this.clone();\n\t\tvar a = nbv(1),\n\t\t\tb = nbv(0),\n\t\t\tc = nbv(0),\n\t\t\td = nbv(1);\n\t\twhile (u.signum() != 0)\n\t\t{\n\t\t\twhile (u.isEven())\n\t\t\t{\n\t\t\t\tu.rShiftTo(1, u);\n\t\t\t\tif (ac)\n\t\t\t\t{\n\t\t\t\t\tif (!a.isEven() || !b.isEven())\n\t\t\t\t\t{\n\t\t\t\t\t\ta.addTo(this, a);\n\t\t\t\t\t\tb.subTo(m, b);\n\t\t\t\t\t}\n\t\t\t\t\ta.rShiftTo(1, a);\n\t\t\t\t}\n\t\t\t\telse if (!b.isEven()) b.subTo(m, b);\n\t\t\t\tb.rShiftTo(1, b);\n\t\t\t}\n\t\t\twhile (v.isEven())\n\t\t\t{\n\t\t\t\tv.rShiftTo(1, v);\n\t\t\t\tif (ac)\n\t\t\t\t{\n\t\t\t\t\tif (!c.isEven() || !d.isEven())\n\t\t\t\t\t{\n\t\t\t\t\t\tc.addTo(this, c);\n\t\t\t\t\t\td.subTo(m, d);\n\t\t\t\t\t}\n\t\t\t\t\tc.rShiftTo(1, c);\n\t\t\t\t}\n\t\t\t\telse if (!d.isEven()) d.subTo(m, d);\n\t\t\t\td.rShiftTo(1, d);\n\t\t\t}\n\t\t\tif (u.compareTo(v) >= 0)\n\t\t\t{\n\t\t\t\tu.subTo(v, u);\n\t\t\t\tif (ac) a.subTo(c, a);\n\t\t\t\tb.subTo(d, b);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tv.subTo(u, v);\n\t\t\t\tif (ac) c.subTo(a, c);\n\t\t\t\td.subTo(b, d);\n\t\t\t}\n\t\t}\n\t\tif (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n\t\tif (d.compareTo(m) >= 0) return d.subtract(m);\n\t\tif (d.signum() < 0) d.addTo(m, d);\n\t\telse return d;\n\t\tif (d.signum() < 0) return d.add(m);\n\t\telse return d;\n\t}\n\tvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n\tvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\t// (public) test primality with certainty >= 1-.5^t\n\tfunction bnIsProbablePrime(t)\n\t{\n\t\tvar i, x = this.abs();\n\t\tif (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n\t\t{\n\t\t\tfor (i = 0; i < lowprimes.length; ++i)\n\t\t\t\tif (x[0] == lowprimes[i]) return true;\n\t\t\treturn false;\n\t\t}\n\t\tif (x.isEven()) return false;\n\t\ti = 1;\n\t\twhile (i < lowprimes.length)\n\t\t{\n\t\t\tvar m = lowprimes[i],\n\t\t\t\tj = i + 1;\n\t\t\twhile (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\t\t\tm = x.modInt(m);\n\t\t\twhile (i < j)\n\t\t\t\tif (m % lowprimes[i++] == 0) return false;\n\t\t}\n\t\treturn x.millerRabin(t);\n\t}\n\t// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\tfunction bnpMillerRabin(t)\n\t{\n\t\tvar n1 = this.subtract(BigInteger.ONE);\n\t\tvar k = n1.getLowestSetBit();\n\t\tif (k <= 0) return false;\n\t\tvar r = n1.shiftRight(k);\n\t\tt = (t + 1) >> 1;\n\t\tif (t > lowprimes.length) t = lowprimes.length;\n\t\tvar a = nbi();\n\t\tfor (var i = 0; i < t; ++i)\n\t\t{\n\t\t\t//Pick bases at random, instead of starting at 2\n\t\t\ta.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n\t\t\tvar y = a.modPow(r, this);\n\t\t\tif (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n\t\t\t{\n\t\t\t\tvar j = 1;\n\t\t\t\twhile (j++ < k && y.compareTo(n1) != 0)\n\t\t\t\t{\n\t\t\t\t\ty = y.modPowInt(2, this);\n\t\t\t\t\tif (y.compareTo(BigInteger.ONE) == 0) return false;\n\t\t\t\t}\n\t\t\t\tif (y.compareTo(n1) != 0) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t// protected\n\tBigInteger.prototype.chunkSize = bnpChunkSize;\n\tBigInteger.prototype.toRadix = bnpToRadix;\n\tBigInteger.prototype.fromRadix = bnpFromRadix;\n\tBigInteger.prototype.fromNumber = bnpFromNumber;\n\tBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n\tBigInteger.prototype.changeBit = bnpChangeBit;\n\tBigInteger.prototype.addTo = bnpAddTo;\n\tBigInteger.prototype.dMultiply = bnpDMultiply;\n\tBigInteger.prototype.dAddOffset = bnpDAddOffset;\n\tBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n\tBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n\tBigInteger.prototype.modInt = bnpModInt;\n\tBigInteger.prototype.millerRabin = bnpMillerRabin;\n\t// public\n\tBigInteger.prototype.clone = bnClone;\n\tBigInteger.prototype.intValue = bnIntValue;\n\tBigInteger.prototype.byteValue = bnByteValue;\n\tBigInteger.prototype.shortValue = bnShortValue;\n\tBigInteger.prototype.signum = bnSigNum;\n\tBigInteger.prototype.toByteArray = bnToByteArray;\n\tBigInteger.prototype.equals = bnEquals;\n\tBigInteger.prototype.min = bnMin;\n\tBigInteger.prototype.max = bnMax;\n\tBigInteger.prototype.and = bnAnd;\n\tBigInteger.prototype.or = bnOr;\n\tBigInteger.prototype.xor = bnXor;\n\tBigInteger.prototype.andNot = bnAndNot;\n\tBigInteger.prototype.not = bnNot;\n\tBigInteger.prototype.shiftLeft = bnShiftLeft;\n\tBigInteger.prototype.shiftRight = bnShiftRight;\n\tBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n\tBigInteger.prototype.bitCount = bnBitCount;\n\tBigInteger.prototype.testBit = bnTestBit;\n\tBigInteger.prototype.setBit = bnSetBit;\n\tBigInteger.prototype.clearBit = bnClearBit;\n\tBigInteger.prototype.flipBit = bnFlipBit;\n\tBigInteger.prototype.add = bnAdd;\n\tBigInteger.prototype.subtract = bnSubtract;\n\tBigInteger.prototype.multiply = bnMultiply;\n\tBigInteger.prototype.divide = bnDivide;\n\tBigInteger.prototype.remainder = bnRemainder;\n\tBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n\tBigInteger.prototype.modPow = bnModPow;\n\tBigInteger.prototype.modInverse = bnModInverse;\n\tBigInteger.prototype.pow = bnPow;\n\tBigInteger.prototype.gcd = bnGCD;\n\tBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\t// JSBN-specific extension\n\tBigInteger.prototype.square = bnSquare;\n\tvar Int128 = BigInteger;\n\t// BigInteger interfaces not implemented in jsbn:\n\t// BigInteger(int signum, byte[] magnitude)\n\t// double doubleValue()\n\t// float floatValue()\n\t// int hashCode()\n\t// long longValue()\n\t// static BigInteger valueOf(long val)\n\t// Helper functions to make BigInteger functions callable with two parameters\n\t// as in original C# Clipper\n\tInt128.prototype.IsNegative = function ()\n\t{\n\t\tif (this.compareTo(Int128.ZERO) == -1) return true;\n\t\telse return false;\n\t};\n\n\tInt128.op_Equality = function (val1, val2)\n\t{\n\t\tif (val1.compareTo(val2) == 0) return true;\n\t\telse return false;\n\t};\n\n\tInt128.op_Inequality = function (val1, val2)\n\t{\n\t\tif (val1.compareTo(val2) != 0) return true;\n\t\telse return false;\n\t};\n\n\tInt128.op_GreaterThan = function (val1, val2)\n\t{\n\t\tif (val1.compareTo(val2) > 0) return true;\n\t\telse return false;\n\t};\n\n\tInt128.op_LessThan = function (val1, val2)\n\t{\n\t\tif (val1.compareTo(val2) < 0) return true;\n\t\telse return false;\n\t};\n\n\tInt128.op_Addition = function (lhs, rhs)\n\t{\n\t\treturn new Int128(lhs, undefined, undefined).add(new Int128(rhs, undefined, undefined));\n\t};\n\n\tInt128.op_Subtraction = function (lhs, rhs)\n\t{\n\t\treturn new Int128(lhs, undefined, undefined).subtract(new Int128(rhs, undefined, undefined));\n\t};\n\n\tInt128.Int128Mul = function (lhs, rhs)\n\t{\n\t\treturn new Int128(lhs, undefined, undefined).multiply(new Int128(rhs, undefined, undefined));\n\t};\n\n\tInt128.op_Division = function (lhs, rhs)\n\t{\n\t\treturn lhs.divide(rhs);\n\t};\n\n\tInt128.prototype.ToDouble = function ()\n\t{\n\t\treturn parseFloat(this.toString()); // This could be something faster\n\t};\n\n\t// end of Int128 section\n\t/*\n\t// Uncomment the following two lines if you want to use Int128 outside ClipperLib\n\tif (typeof(document) !== \"undefined\") window.Int128 = Int128;\n\telse self.Int128 = Int128;\n\t*/\n\n\t// ---------------------------------------------\n\n\t// Here starts the actual Clipper library:\n\t// Helper function to support Inheritance in Javascript\n\tvar Inherit = function (ce, ce2)\n\t{\n\t\tvar p;\n\t\tif (typeof (Object.getOwnPropertyNames) === 'undefined')\n\t\t{\n\t\t\tfor (p in ce2.prototype)\n\t\t\t\tif (typeof (ce.prototype[p]) === 'undefined' || ce.prototype[p] === Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) === 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Path = function ()\n\t{\n\t\treturn [];\n\t};\n\n\tClipperLib.Path.prototype.push = Array.prototype.push;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Paths = function ()\n\t{\n\t\treturn []; // Was previously [[]], but caused problems when pushed\n\t};\n\n\tClipperLib.Paths.prototype.push = Array.prototype.push;\n\n\t// Preserves the calling way of original C# Clipper\n\t// Is essential due to compatibility, because DoublePoint is public class in original C# version\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.DoublePoint = function ()\n\t{\n\t\tvar a = arguments;\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t\t// public DoublePoint(DoublePoint dp)\n\t\t// public DoublePoint(IntPoint ip)\n\t\tif (a.length === 1)\n\t\t{\n\t\t\tthis.X = a[0].X;\n\t\t\tthis.Y = a[0].Y;\n\t\t}\n\t\telse if (a.length === 2)\n\t\t{\n\t\t\tthis.X = a[0];\n\t\t\tthis.Y = a[1];\n\t\t}\n\t}; // This is internal faster function when called without arguments\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.DoublePoint0 = function ()\n\t{\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t};\n\n\tClipperLib.DoublePoint0.prototype = ClipperLib.DoublePoint.prototype;\n\n\t// This is internal faster function when called with 1 argument (dp or ip)\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.DoublePoint1 = function (dp)\n\t{\n\t\tthis.X = dp.X;\n\t\tthis.Y = dp.Y;\n\t};\n\n\tClipperLib.DoublePoint1.prototype = ClipperLib.DoublePoint.prototype;\n\n\t// This is internal faster function when called with 2 arguments (x and y)\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.DoublePoint2 = function (x, y)\n\t{\n\t\tthis.X = x;\n\t\tthis.Y = y;\n\t};\n\n\tClipperLib.DoublePoint2.prototype = ClipperLib.DoublePoint.prototype;\n\n\t// PolyTree & PolyNode start\n\t/**\n\t* @suppress {missingProperties}\n\t*/\n\tClipperLib.PolyNode = function ()\n\t{\n\t\tthis.m_Parent = null;\n\t\tthis.m_polygon = new ClipperLib.Path();\n\t\tthis.m_Index = 0;\n\t\tthis.m_jointype = 0;\n\t\tthis.m_endtype = 0;\n\t\tthis.m_Childs = [];\n\t\tthis.IsOpen = false;\n\t};\n\n\tClipperLib.PolyNode.prototype.IsHoleNode = function ()\n\t{\n\t\tvar result = true;\n\t\tvar node = this.m_Parent;\n\t\twhile (node !== null)\n\t\t{\n\t\t\tresult = !result;\n\t\t\tnode = node.m_Parent;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.PolyNode.prototype.ChildCount = function ()\n\t{\n\t\treturn this.m_Childs.length;\n\t};\n\n\tClipperLib.PolyNode.prototype.Contour = function ()\n\t{\n\t\treturn this.m_polygon;\n\t};\n\n\tClipperLib.PolyNode.prototype.AddChild = function (Child)\n\t{\n\t\tvar cnt = this.m_Childs.length;\n\t\tthis.m_Childs.push(Child);\n\t\tChild.m_Parent = this;\n\t\tChild.m_Index = cnt;\n\t};\n\n\tClipperLib.PolyNode.prototype.GetNext = function ()\n\t{\n\t\tif (this.m_Childs.length > 0)\n\t\t\treturn this.m_Childs[0];\n\t\telse\n\t\t\treturn this.GetNextSiblingUp();\n\t};\n\n\tClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n\t{\n\t\tif (this.m_Parent === null)\n\t\t\treturn null;\n\t\telse if (this.m_Index === this.m_Parent.m_Childs.length - 1)\n\t\t\treturn this.m_Parent.GetNextSiblingUp();\n\t\telse\n\t\t\treturn this.m_Parent.m_Childs[this.m_Index + 1];\n\t};\n\n\tClipperLib.PolyNode.prototype.Childs = function ()\n\t{\n\t\treturn this.m_Childs;\n\t};\n\n\tClipperLib.PolyNode.prototype.Parent = function ()\n\t{\n\t\treturn this.m_Parent;\n\t};\n\n\tClipperLib.PolyNode.prototype.IsHole = function ()\n\t{\n\t\treturn this.IsHoleNode();\n\t};\n\n\t// PolyTree : PolyNode\n\t/**\n\t * @suppress {missingProperties}\n\t * @constructor\n\t */\n\tClipperLib.PolyTree = function ()\n\t{\n\t\tthis.m_AllPolys = [];\n\t\tClipperLib.PolyNode.call(this);\n\t};\n\n\tClipperLib.PolyTree.prototype.Clear = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n\t\t\tthis.m_AllPolys[i] = null;\n\t\tthis.m_AllPolys.length = 0;\n\t\tthis.m_Childs.length = 0;\n\t};\n\n\tClipperLib.PolyTree.prototype.GetFirst = function ()\n\t{\n\t\tif (this.m_Childs.length > 0)\n\t\t\treturn this.m_Childs[0];\n\t\telse\n\t\t\treturn null;\n\t};\n\n\tClipperLib.PolyTree.prototype.Total = function ()\n\t{\n\t\tvar result = this.m_AllPolys.length;\n\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\tif (result > 0 && this.m_Childs[0] !== this.m_AllPolys[0]) result--;\n\t\treturn result;\n\t};\n\n\tInherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\n\t// PolyTree & PolyNode end\n\n\tClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n\t{\n\t\treturn Math.abs(a);\n\t};\n\n\tClipperLib.Math_Max_Int32_Int32 = function (a, b)\n\t{\n\t\treturn Math.max(a, b);\n\t};\n\n\t/*\n\t-----------------------------------\n\tcast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n\t-----------------------------------\n\t*/\n\tif (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n\t{\n\t\treturn a | 0;\n\t};\n\n\telse ClipperLib.Cast_Int32 = function (a)\n\t{ // eg. browser.chrome || browser.chromium || browser.firefox\n\t\treturn ~~a;\n\t};\n\n\t/*\n\t--------------------------\n\tcast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n\tChrome: bitwise_not_floor\n\tFirefox17: toInteger (typeof test)\n\tIE9: bitwise_or_floor\n\tIE7 and IE8: to_parseint\n\tChromium: to_floor_or_ceil\n\tFirefox3: to_floor_or_ceil\n\tFirefox15: to_floor_or_ceil\n\tOpera: to_floor_or_ceil\n\tSafari: to_floor_or_ceil\n\t--------------------------\n\t*/\n\tif (typeof Number.toInteger === \"undefined\")\n\t\tNumber.toInteger = null;\n\n\tif (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n\t{\n\t\tif (a < -2147483648 || a > 2147483647)\n\t\t\treturn a < 0 ? Math.ceil(a) : Math.floor(a);\n\t\telse return ~~a;\n\t};\n\n\telse if (browser.firefox && typeof (Number.toInteger) === \"function\") ClipperLib.Cast_Int64 = function (a)\n\t{\n\t\treturn Number.toInteger(a);\n\t};\n\n\telse if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n\t{\n\t\treturn parseInt(a, 10);\n\t};\n\n\telse if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n\t{\n\t\tif (a < -2147483648 || a > 2147483647)\n\t\t\treturn a < 0 ? Math.ceil(a) : Math.floor(a);\n\t\treturn a | 0;\n\t};\n\n\t// eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n\telse ClipperLib.Cast_Int64 = function (a)\n\t{\n\t\treturn a < 0 ? Math.ceil(a) : Math.floor(a);\n\t};\n\n\tClipperLib.Clear = function (a)\n\t{\n\t\ta.length = 0;\n\t};\n\n\t//ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n\tClipperLib.PI = 3.141592653589793;\n\tClipperLib.PI2 = 2 * 3.141592653589793;\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntPoint = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tthis.Z = 0;\n\t\t\tif (alen === 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t\tthis.Z = a[2];\n\t\t\t}\n\t\t\telse if (alen === 2) // public IntPoint(cInt x, cInt y)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t\tthis.Z = 0;\n\t\t\t}\n\t\t\telse if (alen === 1)\n\t\t\t{\n\t\t\t\tif (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t\t\t\t{\n\t\t\t\t\tvar dp = a[0];\n\t\t\t\t\tthis.X = ClipperLib.Clipper.Round(dp.X);\n\t\t\t\t\tthis.Y = ClipperLib.Clipper.Round(dp.Y);\n\t\t\t\t\tthis.Z = 0;\n\t\t\t\t}\n\t\t\t\telse // public IntPoint(IntPoint pt)\n\t\t\t\t{\n\t\t\t\t\tvar pt = a[0];\n\t\t\t\t\tif (typeof (pt.Z) === \"undefined\") pt.Z = 0;\n\t\t\t\t\tthis.X = pt.X;\n\t\t\t\t\tthis.Y = pt.Y;\n\t\t\t\t\tthis.Z = pt.Z;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse // public IntPoint()\n\t\t\t{\n\t\t\t\tthis.X = 0;\n\t\t\t\tthis.Y = 0;\n\t\t\t\tthis.Z = 0;\n\t\t\t}\n\t\t}\n\t\telse // if (!ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (alen === 2) // public IntPoint(cInt X, cInt Y)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t}\n\t\t\telse if (alen === 1)\n\t\t\t{\n\t\t\t\tif (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t\t\t\t{\n\t\t\t\t\tvar dp = a[0];\n\t\t\t\t\tthis.X = ClipperLib.Clipper.Round(dp.X);\n\t\t\t\t\tthis.Y = ClipperLib.Clipper.Round(dp.Y);\n\t\t\t\t}\n\t\t\t\telse // public IntPoint(IntPoint pt)\n\t\t\t\t{\n\t\t\t\t\tvar pt = a[0];\n\t\t\t\t\tthis.X = pt.X;\n\t\t\t\t\tthis.Y = pt.Y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse // public IntPoint(IntPoint pt)\n\t\t\t{\n\t\t\t\tthis.X = 0;\n\t\t\t\tthis.Y = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.IntPoint.op_Equality = function (a, b)\n\t{\n\t\t//return a == b;\n\t\treturn a.X === b.X && a.Y === b.Y;\n\t};\n\n\tClipperLib.IntPoint.op_Inequality = function (a, b)\n\t{\n\t\t//return a !== b;\n\t\treturn a.X !== b.X || a.Y !== b.Y;\n\t};\n\n\t/*\n  ClipperLib.IntPoint.prototype.Equals = function (obj)\n  {\n\tif (obj === null)\n\t\treturn false;\n\tif (obj instanceof ClipperLib.IntPoint)\n\t{\n\t\tvar a = Cast(obj, ClipperLib.IntPoint);\n\t\treturn (this.X == a.X) && (this.Y == a.Y);\n\t}\n\telse\n\t\treturn false;\n  };\n\n\t*/\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntPoint0 = function ()\n\t{\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.Z = 0;\n\t};\n\n\tClipperLib.IntPoint0.prototype = ClipperLib.IntPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntPoint1 = function (pt)\n\t{\n\t\tthis.X = pt.X;\n\t\tthis.Y = pt.Y;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (typeof pt.Z === \"undefined\") this.Z = 0;\n\t\t\telse this.Z = pt.Z;\n\t\t}\n\t};\n\n\tClipperLib.IntPoint1.prototype = ClipperLib.IntPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntPoint1dp = function (dp)\n\t{\n\t\tthis.X = ClipperLib.Clipper.Round(dp.X);\n\t\tthis.Y = ClipperLib.Clipper.Round(dp.Y);\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.Z = 0;\n\t};\n\n\tClipperLib.IntPoint1dp.prototype = ClipperLib.IntPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntPoint2 = function (x, y, z)\n\t{\n\t\tthis.X = x;\n\t\tthis.Y = y;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (typeof z === \"undefined\") this.Z = 0;\n\t\t\telse this.Z = z;\n\t\t}\n\t};\n\n\tClipperLib.IntPoint2.prototype = ClipperLib.IntPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntRect = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tif (alen === 4) // function (l, t, r, b)\n\t\t{\n\t\t\tthis.left = a[0];\n\t\t\tthis.top = a[1];\n\t\t\tthis.right = a[2];\n\t\t\tthis.bottom = a[3];\n\t\t}\n\t\telse if (alen === 1) // function (ir)\n\t\t{\n\t\t\tvar ir = a[0];\n\t\t\tthis.left = ir.left;\n\t\t\tthis.top = ir.top;\n\t\t\tthis.right = ir.right;\n\t\t\tthis.bottom = ir.bottom;\n\t\t}\n\t\telse // function ()\n\t\t{\n\t\t\tthis.left = 0;\n\t\t\tthis.top = 0;\n\t\t\tthis.right = 0;\n\t\t\tthis.bottom = 0;\n\t\t}\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntRect0 = function ()\n\t{\n\t\tthis.left = 0;\n\t\tthis.top = 0;\n\t\tthis.right = 0;\n\t\tthis.bottom = 0;\n\t};\n\n\tClipperLib.IntRect0.prototype = ClipperLib.IntRect.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntRect1 = function (ir)\n\t{\n\t\tthis.left = ir.left;\n\t\tthis.top = ir.top;\n\t\tthis.right = ir.right;\n\t\tthis.bottom = ir.bottom;\n\t};\n\n\tClipperLib.IntRect1.prototype = ClipperLib.IntRect.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntRect4 = function (l, t, r, b)\n\t{\n\t\tthis.left = l;\n\t\tthis.top = t;\n\t\tthis.right = r;\n\t\tthis.bottom = b;\n\t};\n\n\tClipperLib.IntRect4.prototype = ClipperLib.IntRect.prototype;\n\n\tClipperLib.ClipType = {\n\t\tctIntersection: 0,\n\t\tctUnion: 1,\n\t\tctDifference: 2,\n\t\tctXor: 3\n\t};\n\n\tClipperLib.PolyType = {\n\t\tptSubject: 0,\n\t\tptClip: 1\n\t};\n\n\tClipperLib.PolyFillType = {\n\t\tpftEvenOdd: 0,\n\t\tpftNonZero: 1,\n\t\tpftPositive: 2,\n\t\tpftNegative: 3\n\t};\n\n\tClipperLib.JoinType = {\n\t\tjtSquare: 0,\n\t\tjtRound: 1,\n\t\tjtMiter: 2\n\t};\n\n\tClipperLib.EndType = {\n\t\tetOpenSquare: 0,\n\t\tetOpenRound: 1,\n\t\tetOpenButt: 2,\n\t\tetClosedLine: 3,\n\t\tetClosedPolygon: 4\n\t};\n\n\tClipperLib.EdgeSide = {\n\t\tesLeft: 0,\n\t\tesRight: 1\n\t};\n\n\tClipperLib.Direction = {\n\t\tdRightToLeft: 0,\n\t\tdLeftToRight: 1\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.TEdge = function ()\n\t{\n\t\tthis.Bot = new ClipperLib.IntPoint0();\n\t\tthis.Curr = new ClipperLib.IntPoint0(); //current (updated for every new scanbeam)\n\t\tthis.Top = new ClipperLib.IntPoint0();\n\t\tthis.Delta = new ClipperLib.IntPoint0();\n\t\tthis.Dx = 0;\n\t\tthis.PolyTyp = ClipperLib.PolyType.ptSubject;\n\t\tthis.Side = ClipperLib.EdgeSide.esLeft; //side only refers to current side of solution poly\n\t\tthis.WindDelta = 0; //1 or -1 depending on winding direction\n\t\tthis.WindCnt = 0;\n\t\tthis.WindCnt2 = 0; //winding count of the opposite polytype\n\t\tthis.OutIdx = 0;\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t\tthis.NextInLML = null;\n\t\tthis.NextInAEL = null;\n\t\tthis.PrevInAEL = null;\n\t\tthis.NextInSEL = null;\n\t\tthis.PrevInSEL = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntersectNode = function ()\n\t{\n\t\tthis.Edge1 = null;\n\t\tthis.Edge2 = null;\n\t\tthis.Pt = new ClipperLib.IntPoint0();\n\t};\n\n\tClipperLib.MyIntersectNodeSort = function () {};\n\n\tClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n\t{\n\t\tvar i = node2.Pt.Y - node1.Pt.Y;\n\t\tif (i > 0) return 1;\n\t\telse if (i < 0) return -1;\n\t\telse return 0;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.LocalMinima = function ()\n\t{\n\t\tthis.Y = 0;\n\t\tthis.LeftBound = null;\n\t\tthis.RightBound = null;\n\t\tthis.Next = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Scanbeam = function ()\n\t{\n\t\tthis.Y = 0;\n\t\tthis.Next = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Maxima = function ()\n\t{\n\t\tthis.X = 0;\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t};\n\n\t//OutRec: contains a path in the clipping solution. Edges in the AEL will\n\t//carry a pointer to an OutRec when they are part of the clipping solution.\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.OutRec = function ()\n\t{\n\t\tthis.Idx = 0;\n\t\tthis.IsHole = false;\n\t\tthis.IsOpen = false;\n\t\tthis.FirstLeft = null; //see comments in clipper.pas\n\t\tthis.Pts = null;\n\t\tthis.BottomPt = null;\n\t\tthis.PolyNode = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.OutPt = function ()\n\t{\n\t\tthis.Idx = 0;\n\t\tthis.Pt = new ClipperLib.IntPoint0();\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Join = function ()\n\t{\n\t\tthis.OutPt1 = null;\n\t\tthis.OutPt2 = null;\n\t\tthis.OffPt = new ClipperLib.IntPoint0();\n\t};\n\n\tClipperLib.ClipperBase = function ()\n\t{\n\t\tthis.m_MinimaList = null;\n\t\tthis.m_CurrentLM = null;\n\t\tthis.m_edges = new Array();\n\t\tthis.m_UseFullRange = false;\n\t\tthis.m_HasOpenPaths = false;\n\t\tthis.PreserveCollinear = false;\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_PolyOuts = null;\n\t\tthis.m_ActiveEdges = null;\n\t};\n\n\t// Ranges are in original C# too high for Javascript (in current state 2013 september):\n\t// protected const double horizontal = -3.4E+38;\n\t// internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n\t// internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n\t// So had to adjust them to more suitable for Javascript.\n\t// If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n\t// and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n\tClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n\tClipperLib.ClipperBase.Skip = -2;\n\tClipperLib.ClipperBase.Unassigned = -1;\n\tClipperLib.ClipperBase.tolerance = 1E-20;\n\tClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n\tClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n\n\tClipperLib.ClipperBase.near_zero = function (val)\n\t{\n\t\treturn (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n\t};\n\n\tClipperLib.ClipperBase.IsHorizontal = function (e)\n\t{\n\t\treturn e.Delta.Y === 0;\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n\t{\n\t\tvar pp2 = pp;\n\t\tdo {\n\t\t\tif (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n\t\t\t\treturn true;\n\t\t\tpp2 = pp2.Next;\n\t\t}\n\t\twhile (pp2 !== pp)\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n\t{\n\t\tif (UseFullRange)\n\t\t\treturn ((pt.X === linePt1.X) && (pt.Y === linePt1.Y)) ||\n\t\t\t\t((pt.X === linePt2.X) && (pt.Y === linePt2.Y)) ||\n\t\t\t\t(((pt.X > linePt1.X) === (pt.X < linePt2.X)) &&\n\t\t\t\t\t((pt.Y > linePt1.Y) === (pt.Y < linePt2.Y)) &&\n\t\t\t\t\t(Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n\t\t\t\t\t\tInt128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n\t\telse\n\t\t\treturn ((pt.X === linePt1.X) && (pt.Y === linePt1.Y)) || ((pt.X === linePt2.X) && (pt.Y === linePt2.Y)) || (((pt.X > linePt1.X) === (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) === (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) === (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n\t{\n\t\tvar pp2 = pp;\n\t\twhile (true)\n\t\t{\n\t\t\tif (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n\t\t\t\treturn true;\n\t\t\tpp2 = pp2.Next;\n\t\t\tif (pp2 === pp)\n\t\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tvar e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n\t\tif (alen === 3) // function (e1, e2, UseFullRange)\n\t\t{\n\t\t\te1 = a[0];\n\t\t\te2 = a[1];\n\t\t\tUseFullRange = a[2];\n\t\t\tif (UseFullRange)\n\t\t\t\treturn Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t\t\telse\n\t\t\t\treturn ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) === ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t\t}\n\t\telse if (alen === 4) // function (pt1, pt2, pt3, UseFullRange)\n\t\t{\n\t\t\tpt1 = a[0];\n\t\t\tpt2 = a[1];\n\t\t\tpt3 = a[2];\n\t\t\tUseFullRange = a[3];\n\t\t\tif (UseFullRange)\n\t\t\t\treturn Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t\t\telse\n\t\t\t\treturn ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t\t}\n\t\telse // function (pt1, pt2, pt3, pt4, UseFullRange)\n\t\t{\n\t\t\tpt1 = a[0];\n\t\t\tpt2 = a[1];\n\t\t\tpt3 = a[2];\n\t\t\tpt4 = a[3];\n\t\t\tUseFullRange = a[4];\n\t\t\tif (UseFullRange)\n\t\t\t\treturn Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t\t\telse\n\t\t\t\treturn ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n\t{\n\t\tif (UseFullRange)\n\t\t\treturn Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t\telse\n\t\t\treturn ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) === ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n\t{\n\t\tif (UseFullRange)\n\t\t\treturn Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t\telse\n\t\t\treturn ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n\t{\n\t\tif (UseFullRange)\n\t\t\treturn Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t\telse\n\t\t\treturn ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t};\n\n\tClipperLib.ClipperBase.prototype.Clear = function ()\n\t{\n\t\tthis.DisposeLocalMinimaList();\n\t\tfor (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n\t\t{\n\t\t\tfor (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n\t\t\t\tthis.m_edges[i][j] = null;\n\t\t\tClipperLib.Clear(this.m_edges[i]);\n\t\t}\n\t\tClipperLib.Clear(this.m_edges);\n\t\tthis.m_UseFullRange = false;\n\t\tthis.m_HasOpenPaths = false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n\t{\n\t\twhile (this.m_MinimaList !== null)\n\t\t{\n\t\t\tvar tmpLm = this.m_MinimaList.Next;\n\t\t\tthis.m_MinimaList = null;\n\t\t\tthis.m_MinimaList = tmpLm;\n\t\t}\n\t\tthis.m_CurrentLM = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n\t{\n\t\tif (useFullRange.Value)\n\t\t{\n\t\t\tif (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n\t\t\t\tClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n\t\t}\n\t\telse if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n\t\t{\n\t\t\tuseFullRange.Value = true;\n\t\t\tthis.RangeTest(Pt, useFullRange);\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n\t{\n\t\te.Next = eNext;\n\t\te.Prev = ePrev;\n\t\t//e.Curr = pt;\n\t\te.Curr.X = pt.X;\n\t\te.Curr.Y = pt.Y;\n\t\tif (ClipperLib.use_xyz) e.Curr.Z = pt.Z;\n\t\te.OutIdx = -1;\n\t};\n\n\tClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n\t{\n\t\tif (e.Curr.Y >= e.Next.Curr.Y)\n\t\t{\n\t\t\t//e.Bot = e.Curr;\n\t\t\te.Bot.X = e.Curr.X;\n\t\t\te.Bot.Y = e.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Bot.Z = e.Curr.Z;\n\t\t\t//e.Top = e.Next.Curr;\n\t\t\te.Top.X = e.Next.Curr.X;\n\t\t\te.Top.Y = e.Next.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Top.Z = e.Next.Curr.Z;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//e.Top = e.Curr;\n\t\t\te.Top.X = e.Curr.X;\n\t\t\te.Top.Y = e.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Top.Z = e.Curr.Z;\n\t\t\t//e.Bot = e.Next.Curr;\n\t\t\te.Bot.X = e.Next.Curr.X;\n\t\t\te.Bot.Y = e.Next.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Bot.Z = e.Next.Curr.Z;\n\t\t}\n\t\tthis.SetDx(e);\n\t\te.PolyTyp = polyType;\n\t};\n\n\tClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n\t{\n\t\tvar E2;\n\t\tfor (;;)\n\t\t{\n\t\t\twhile (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n\t\t\t\tE = E.Next;\n\t\t\tif (E.Dx !== ClipperLib.ClipperBase.horizontal && E.Prev.Dx !== ClipperLib.ClipperBase.horizontal)\n\t\t\t\tbreak;\n\t\t\twhile (E.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\tE = E.Prev;\n\t\t\tE2 = E;\n\t\t\twhile (E.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\tE = E.Next;\n\t\t\tif (E.Top.Y === E.Prev.Bot.Y)\n\t\t\t\tcontinue;\n\t\t\t//ie just an intermediate horz.\n\t\t\tif (E2.Prev.Bot.X < E.Bot.X)\n\t\t\t\tE = E2;\n\t\t\tbreak;\n\t\t}\n\t\treturn E;\n\t};\n\n\tClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n\t{\n\t\tvar EStart;\n\t\tvar Result = E;\n\t\tvar Horz;\n\n\t\tif (Result.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t{\n\t\t\t//check if there are edges beyond the skip edge in the bound and if so\n\t\t\t//create another LocMin and calling ProcessBound once more ...\n\t\t\tE = Result;\n\t\t\tif (LeftBoundIsForward)\n\t\t\t{\n\t\t\t\twhile (E.Top.Y === E.Next.Bot.Y) E = E.Next;\n\t\t\t\twhile (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (E.Top.Y === E.Prev.Bot.Y) E = E.Prev;\n\t\t\t\twhile (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Next;\n\t\t\t}\n\t\t\tif (E === Result)\n\t\t\t{\n\t\t\t\tif (LeftBoundIsForward) Result = E.Next;\n\t\t\t\telse Result = E.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//there are more edges in the bound beyond result starting with E\n\t\t\t\tif (LeftBoundIsForward)\n\t\t\t\t\tE = Result.Next;\n\t\t\t\telse\n\t\t\t\t\tE = Result.Prev;\n\t\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\t\tlocMin.Next = null;\n\t\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\t\tlocMin.LeftBound = null;\n\t\t\t\tlocMin.RightBound = E;\n\t\t\t\tE.WindDelta = 0;\n\t\t\t\tResult = this.ProcessBound(E, LeftBoundIsForward);\n\t\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\t}\n\t\t\treturn Result;\n\t\t}\n\n\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t{\n\t\t\t//We need to be careful with open paths because this may not be a\n\t\t\t//true local minima (ie E may be following a skip edge).\n\t\t\t//Also, consecutive horz. edges may start heading left before going right.\n\t\t\tif (LeftBoundIsForward) EStart = E.Prev;\n\t\t\telse EStart = E.Next;\n\n\t\t\tif (EStart.Dx === ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n\t\t\t{\n\t\t\t\tif (EStart.Bot.X !== E.Bot.X && EStart.Top.X !== E.Bot.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t}\n\t\t\telse if (EStart.Bot.X !== E.Bot.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t}\n\n\t\tEStart = E;\n\t\tif (LeftBoundIsForward)\n\t\t{\n\t\t\twhile (Result.Top.Y === Result.Next.Bot.Y && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t\tResult = Result.Next;\n\t\t\tif (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t{\n\t\t\t\t//nb: at the top of a bound, horizontals are added to the bound\n\t\t\t\t//only when the preceding edge attaches to the horizontal's left vertex\n\t\t\t\t//unless a Skip edge is encountered when that becomes the top divide\n\t\t\t\tHorz = Result;\n\t\t\t\twhile (Horz.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\t\tHorz = Horz.Prev;\n\t\t\t\tif (Horz.Prev.Top.X > Result.Next.Top.X)\n\t\t\t\t\tResult = Horz.Prev;\n\t\t\t}\n\t\t\twhile (E !== Result)\n\t\t\t{\n\t\t\t\tE.NextInLML = E.Next;\n\t\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t\tE = E.Next;\n\t\t\t}\n\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\tResult = Result.Next;\n\t\t\t//move to the edge just beyond current bound\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (Result.Top.Y === Result.Prev.Bot.Y && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t\tResult = Result.Prev;\n\t\t\tif (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t{\n\t\t\t\tHorz = Result;\n\t\t\t\twhile (Horz.Next.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\t\tHorz = Horz.Next;\n\t\t\t\tif (Horz.Next.Top.X === Result.Prev.Top.X || Horz.Next.Top.X > Result.Prev.Top.X)\n\t\t\t\t{\n\t\t\t\t\tResult = Horz.Next;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (E !== Result)\n\t\t\t{\n\t\t\t\tE.NextInLML = E.Prev;\n\t\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t\tE = E.Prev;\n\t\t\t}\n\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\tResult = Result.Prev;\n\t\t\t//move to the edge just beyond current bound\n\t\t}\n\n\t\treturn Result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n\t{\n\t\tif (ClipperLib.use_lines)\n\t\t{\n\t\t\tif (!Closed && polyType === ClipperLib.PolyType.ptClip)\n\t\t\t\tClipperLib.Error(\"AddPath: Open paths must be subject.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!Closed)\n\t\t\t\tClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n\t\t}\n\t\tvar highI = pg.length - 1;\n\t\tif (Closed)\n\t\t\twhile (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n\t\t\t\t--highI;\n\t\twhile (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n\t\t\t--highI;\n\t\tif ((Closed && highI < 2) || (!Closed && highI < 1))\n\t\t\treturn false;\n\t\t//create a new edge array ...\n\t\tvar edges = new Array();\n\t\tfor (var i = 0; i <= highI; i++)\n\t\t\tedges.push(new ClipperLib.TEdge());\n\t\tvar IsFlat = true;\n\t\t//1. Basic (first) edge initialization ...\n\n\t\t//edges[1].Curr = pg[1];\n\t\tedges[1].Curr.X = pg[1].X;\n\t\tedges[1].Curr.Y = pg[1].Y;\n\t\tif (ClipperLib.use_xyz) edges[1].Curr.Z = pg[1].Z;\n\n\t\tvar $1 = {\n\t\t\tValue: this.m_UseFullRange\n\t\t};\n\n\t\tthis.RangeTest(pg[0], $1);\n\t\tthis.m_UseFullRange = $1.Value;\n\n\t\t$1.Value = this.m_UseFullRange;\n\t\tthis.RangeTest(pg[highI], $1);\n\t\tthis.m_UseFullRange = $1.Value;\n\n\t\tthis.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n\t\tthis.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n\t\tfor (var i = highI - 1; i >= 1; --i)\n\t\t{\n\t\t\t$1.Value = this.m_UseFullRange;\n\t\t\tthis.RangeTest(pg[i], $1);\n\t\t\tthis.m_UseFullRange = $1.Value;\n\n\t\t\tthis.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n\t\t}\n\n\t\tvar eStart = edges[0];\n\t\t//2. Remove duplicate vertices, and (when closed) collinear edges ...\n\t\tvar E = eStart,\n\t\t\teLoopStop = eStart;\n\t\tfor (;;)\n\t\t{\n\t\t\t//console.log(E.Next, eStart);\n\t\t\t//nb: allows matching start and end points when not Closed ...\n\t\t\tif (E.Curr === E.Next.Curr && (Closed || E.Next !== eStart))\n\t\t\t{\n\t\t\t\tif (E === E.Next)\n\t\t\t\t\tbreak;\n\t\t\t\tif (E === eStart)\n\t\t\t\t\teStart = E.Next;\n\t\t\t\tE = this.RemoveEdge(E);\n\t\t\t\teLoopStop = E;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (E.Prev === E.Next)\n\t\t\t\tbreak;\n\t\t\telse if (Closed && ClipperLib.ClipperBase.SlopesEqual4(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n\t\t\t{\n\t\t\t\t//Collinear edges are allowed for open paths but in closed paths\n\t\t\t\t//the default is to merge adjacent collinear edges into a single edge.\n\t\t\t\t//However, if the PreserveCollinear property is enabled, only overlapping\n\t\t\t\t//collinear edges (ie spikes) will be removed from closed paths.\n\t\t\t\tif (E === eStart)\n\t\t\t\t\teStart = E.Next;\n\t\t\t\tE = this.RemoveEdge(E);\n\t\t\t\tE = E.Prev;\n\t\t\t\teLoopStop = E;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tE = E.Next;\n\t\t\tif ((E === eLoopStop) || (!Closed && E.Next === eStart)) break;\n\t\t}\n\t\tif ((!Closed && (E === E.Next)) || (Closed && (E.Prev === E.Next)))\n\t\t\treturn false;\n\t\tif (!Closed)\n\t\t{\n\t\t\tthis.m_HasOpenPaths = true;\n\t\t\teStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t\t}\n\t\t//3. Do second stage of edge initialization ...\n\t\tE = eStart;\n\t\tdo {\n\t\t\tthis.InitEdge2(E, polyType);\n\t\t\tE = E.Next;\n\t\t\tif (IsFlat && E.Curr.Y !== eStart.Curr.Y)\n\t\t\t\tIsFlat = false;\n\t\t}\n\t\twhile (E !== eStart)\n\t\t//4. Finally, add edge bounds to LocalMinima list ...\n\t\t//Totally flat paths must be handled differently when adding them\n\t\t//to LocalMinima list to avoid endless loops etc ...\n\t\tif (IsFlat)\n\t\t{\n\t\t\tif (Closed)\n\t\t\t\treturn false;\n\n\t\t\tE.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\n\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\tlocMin.Next = null;\n\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\tlocMin.LeftBound = null;\n\t\t\tlocMin.RightBound = E;\n\t\t\tlocMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t\t\tlocMin.RightBound.WindDelta = 0;\n\n\t\t\tfor (;;)\n\t\t\t{\n\t\t\t\tif (E.Bot.X !== E.Prev.Top.X) this.ReverseHorizontal(E);\n\t\t\t\tif (E.Next.OutIdx === ClipperLib.ClipperBase.Skip) break;\n\t\t\t\tE.NextInLML = E.Next;\n\t\t\t\tE = E.Next;\n\t\t\t}\n\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\tthis.m_edges.push(edges);\n\t\t\treturn true;\n\t\t}\n\t\tthis.m_edges.push(edges);\n\t\tvar leftBoundIsForward;\n\t\tvar EMin = null;\n\n\t\t//workaround to avoid an endless loop in the while loop below when\n\t\t//open paths have matching start and end points ...\n\t\tif (ClipperLib.IntPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n\t\t\tE = E.Next;\n\n\t\tfor (;;)\n\t\t{\n\t\t\tE = this.FindNextLocMin(E);\n\t\t\tif (E === EMin)\n\t\t\t\tbreak;\n\t\t\telse if (EMin === null)\n\t\t\t\tEMin = E;\n\t\t\t//E and E.Prev now share a local minima (left aligned if horizontal).\n\t\t\t//Compare their slopes to find which starts which bound ...\n\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\tlocMin.Next = null;\n\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\tif (E.Dx < E.Prev.Dx)\n\t\t\t{\n\t\t\t\tlocMin.LeftBound = E.Prev;\n\t\t\t\tlocMin.RightBound = E;\n\t\t\t\tleftBoundIsForward = false;\n\t\t\t\t//Q.nextInLML = Q.prev\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlocMin.LeftBound = E;\n\t\t\t\tlocMin.RightBound = E.Prev;\n\t\t\t\tleftBoundIsForward = true;\n\t\t\t\t//Q.nextInLML = Q.next\n\t\t\t}\n\t\t\tlocMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\tlocMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t\t\tif (!Closed)\n\t\t\t\tlocMin.LeftBound.WindDelta = 0;\n\t\t\telse if (locMin.LeftBound.Next === locMin.RightBound)\n\t\t\t\tlocMin.LeftBound.WindDelta = -1;\n\t\t\telse\n\t\t\t\tlocMin.LeftBound.WindDelta = 1;\n\t\t\tlocMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n\t\t\tE = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n\t\t\tif (E.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tE = this.ProcessBound(E, leftBoundIsForward);\n\t\t\tvar E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n\t\t\tif (E2.OutIdx === ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n\t\t\tif (locMin.LeftBound.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tlocMin.LeftBound = null;\n\t\t\telse if (locMin.RightBound.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tlocMin.RightBound = null;\n\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\tif (!leftBoundIsForward)\n\t\t\t\tE = E2;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n\t{\n\t\t//  console.log(\"-------------------------------------------\");\n\t\t//  console.log(JSON.stringify(ppg));\n\t\tvar result = false;\n\t\tfor (var i = 0, ilen = ppg.length; i < ilen; ++i)\n\t\t\tif (this.AddPath(ppg[i], polyType, closed))\n\t\t\t\tresult = true;\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n\t{\n\t\tif ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) || (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n\n\t\t\t//if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n\t\t\treturn false;\n\n\t\telse if (pt1.X !== pt3.X)\n\t\t\treturn (pt2.X > pt1.X) === (pt2.X < pt3.X);\n\t\telse\n\t\t\treturn (pt2.Y > pt1.Y) === (pt2.Y < pt3.Y);\n\t};\n\n\tClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n\t{\n\t\t//removes e from double_linked_list (but without removing from memory)\n\t\te.Prev.Next = e.Next;\n\t\te.Next.Prev = e.Prev;\n\t\tvar result = e.Next;\n\t\te.Prev = null; //flag as removed (see ClipperBase.Clear)\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SetDx = function (e)\n\t{\n\t\te.Delta.X = (e.Top.X - e.Bot.X);\n\t\te.Delta.Y = (e.Top.Y - e.Bot.Y);\n\t\tif (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n\t\telse e.Dx = (e.Delta.X) / (e.Delta.Y);\n\t};\n\n\tClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n\t{\n\t\tif (this.m_MinimaList === null)\n\t\t{\n\t\t\tthis.m_MinimaList = newLm;\n\t\t}\n\t\telse if (newLm.Y >= this.m_MinimaList.Y)\n\t\t{\n\t\t\tnewLm.Next = this.m_MinimaList;\n\t\t\tthis.m_MinimaList = newLm;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar tmpLm = this.m_MinimaList;\n\t\t\twhile (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n\t\t\t\ttmpLm = tmpLm.Next;\n\t\t\tnewLm.Next = tmpLm.Next;\n\t\t\ttmpLm.Next = newLm;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.PopLocalMinima = function (Y, current)\n\t{\n\t\tcurrent.v = this.m_CurrentLM;\n\t\tif (this.m_CurrentLM !== null && this.m_CurrentLM.Y === Y)\n\t\t{\n\t\t\tthis.m_CurrentLM = this.m_CurrentLM.Next;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n\t{\n\t\t//swap horizontal edges' top and bottom x's so they follow the natural\n\t\t//progression of the bounds - ie so their xbots will align with the\n\t\t//adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n\t\tvar tmp = e.Top.X;\n\t\te.Top.X = e.Bot.X;\n\t\te.Bot.X = tmp;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\ttmp = e.Top.Z;\n\t\t\te.Top.Z = e.Bot.Z;\n\t\t\te.Bot.Z = tmp;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.Reset = function ()\n\t{\n\t\tthis.m_CurrentLM = this.m_MinimaList;\n\t\tif (this.m_CurrentLM === null) //ie nothing to process\n\t\t\treturn;\n\t\t//reset all edges ...\n\t\tthis.m_Scanbeam = null;\n\t\tvar lm = this.m_MinimaList;\n\t\twhile (lm !== null)\n\t\t{\n\t\t\tthis.InsertScanbeam(lm.Y);\n\t\t\tvar e = lm.LeftBound;\n\t\t\tif (e !== null)\n\t\t\t{\n\t\t\t\t//e.Curr = e.Bot;\n\t\t\t\te.Curr.X = e.Bot.X;\n\t\t\t\te.Curr.Y = e.Bot.Y;\n\t\t\t\tif (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\te = lm.RightBound;\n\t\t\tif (e !== null)\n\t\t\t{\n\t\t\t\t//e.Curr = e.Bot;\n\t\t\t\te.Curr.X = e.Bot.X;\n\t\t\t\te.Curr.Y = e.Bot.Y;\n\t\t\t\tif (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tlm = lm.Next;\n\t\t}\n\t\tthis.m_ActiveEdges = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.InsertScanbeam = function (Y)\n\t{\n\t\t//single-linked list: sorted descending, ignoring dups.\n\t\tif (this.m_Scanbeam === null)\n\t\t{\n\t\t\tthis.m_Scanbeam = new ClipperLib.Scanbeam();\n\t\t\tthis.m_Scanbeam.Next = null;\n\t\t\tthis.m_Scanbeam.Y = Y;\n\t\t}\n\t\telse if (Y > this.m_Scanbeam.Y)\n\t\t{\n\t\t\tvar newSb = new ClipperLib.Scanbeam();\n\t\t\tnewSb.Y = Y;\n\t\t\tnewSb.Next = this.m_Scanbeam;\n\t\t\tthis.m_Scanbeam = newSb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar sb2 = this.m_Scanbeam;\n\t\t\twhile (sb2.Next !== null && Y <= sb2.Next.Y)\n\t\t\t{\n\t\t\t\tsb2 = sb2.Next;\n\t\t\t}\n\t\t\tif (Y === sb2.Y)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t} //ie ignores duplicates\n\t\t\tvar newSb1 = new ClipperLib.Scanbeam();\n\t\t\tnewSb1.Y = Y;\n\t\t\tnewSb1.Next = sb2.Next;\n\t\t\tsb2.Next = newSb1;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.PopScanbeam = function (Y)\n\t{\n\t\tif (this.m_Scanbeam === null)\n\t\t{\n\t\t\tY.v = 0;\n\t\t\treturn false;\n\t\t}\n\t\tY.v = this.m_Scanbeam.Y;\n\t\tthis.m_Scanbeam = this.m_Scanbeam.Next;\n\t\treturn true;\n\t};\n\n\tClipperLib.ClipperBase.prototype.LocalMinimaPending = function ()\n\t{\n\t\treturn (this.m_CurrentLM !== null);\n\t};\n\n\tClipperLib.ClipperBase.prototype.CreateOutRec = function ()\n\t{\n\t\tvar result = new ClipperLib.OutRec();\n\t\tresult.Idx = ClipperLib.ClipperBase.Unassigned;\n\t\tresult.IsHole = false;\n\t\tresult.IsOpen = false;\n\t\tresult.FirstLeft = null;\n\t\tresult.Pts = null;\n\t\tresult.BottomPt = null;\n\t\tresult.PolyNode = null;\n\t\tthis.m_PolyOuts.push(result);\n\t\tresult.Idx = this.m_PolyOuts.length - 1;\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.DisposeOutRec = function (index)\n\t{\n\t\tvar outRec = this.m_PolyOuts[index];\n\t\toutRec.Pts = null;\n\t\toutRec = null;\n\t\tthis.m_PolyOuts[index] = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.UpdateEdgeIntoAEL = function (e)\n\t{\n\t\tif (e.NextInLML === null)\n\t\t{\n\t\t\tClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n\t\t}\n\t\tvar AelPrev = e.PrevInAEL;\n\t\tvar AelNext = e.NextInAEL;\n\t\te.NextInLML.OutIdx = e.OutIdx;\n\t\tif (AelPrev !== null)\n\t\t{\n\t\t\tAelPrev.NextInAEL = e.NextInLML;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.m_ActiveEdges = e.NextInLML;\n\t\t}\n\t\tif (AelNext !== null)\n\t\t{\n\t\t\tAelNext.PrevInAEL = e.NextInLML;\n\t\t}\n\t\te.NextInLML.Side = e.Side;\n\t\te.NextInLML.WindDelta = e.WindDelta;\n\t\te.NextInLML.WindCnt = e.WindCnt;\n\t\te.NextInLML.WindCnt2 = e.WindCnt2;\n\t\te = e.NextInLML;\n\t\te.Curr.X = e.Bot.X;\n\t\te.Curr.Y = e.Bot.Y;\n\t\te.PrevInAEL = AelPrev;\n\t\te.NextInAEL = AelNext;\n\t\tif (!ClipperLib.ClipperBase.IsHorizontal(e))\n\t\t{\n\t\t\tthis.InsertScanbeam(e.Top.Y);\n\t\t}\n\t\treturn e;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SwapPositionsInAEL = function (edge1, edge2)\n\t{\n\t\t//check that one or other edge hasn't already been removed from AEL ...\n\t\tif (edge1.NextInAEL === edge1.PrevInAEL || edge2.NextInAEL === edge2.PrevInAEL)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (edge1.NextInAEL === edge2)\n\t\t{\n\t\t\tvar next = edge2.NextInAEL;\n\t\t\tif (next !== null)\n\t\t\t{\n\t\t\t\tnext.PrevInAEL = edge1;\n\t\t\t}\n\t\t\tvar prev = edge1.PrevInAEL;\n\t\t\tif (prev !== null)\n\t\t\t{\n\t\t\t\tprev.NextInAEL = edge2;\n\t\t\t}\n\t\t\tedge2.PrevInAEL = prev;\n\t\t\tedge2.NextInAEL = edge1;\n\t\t\tedge1.PrevInAEL = edge2;\n\t\t\tedge1.NextInAEL = next;\n\t\t}\n\t\telse if (edge2.NextInAEL === edge1)\n\t\t{\n\t\t\tvar next1 = edge1.NextInAEL;\n\t\t\tif (next1 !== null)\n\t\t\t{\n\t\t\t\tnext1.PrevInAEL = edge2;\n\t\t\t}\n\t\t\tvar prev1 = edge2.PrevInAEL;\n\t\t\tif (prev1 !== null)\n\t\t\t{\n\t\t\t\tprev1.NextInAEL = edge1;\n\t\t\t}\n\t\t\tedge1.PrevInAEL = prev1;\n\t\t\tedge1.NextInAEL = edge2;\n\t\t\tedge2.PrevInAEL = edge1;\n\t\t\tedge2.NextInAEL = next1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar next2 = edge1.NextInAEL;\n\t\t\tvar prev2 = edge1.PrevInAEL;\n\t\t\tedge1.NextInAEL = edge2.NextInAEL;\n\t\t\tif (edge1.NextInAEL !== null)\n\t\t\t{\n\t\t\t\tedge1.NextInAEL.PrevInAEL = edge1;\n\t\t\t}\n\t\t\tedge1.PrevInAEL = edge2.PrevInAEL;\n\t\t\tif (edge1.PrevInAEL !== null)\n\t\t\t{\n\t\t\t\tedge1.PrevInAEL.NextInAEL = edge1;\n\t\t\t}\n\t\t\tedge2.NextInAEL = next2;\n\t\t\tif (edge2.NextInAEL !== null)\n\t\t\t{\n\t\t\t\tedge2.NextInAEL.PrevInAEL = edge2;\n\t\t\t}\n\t\t\tedge2.PrevInAEL = prev2;\n\t\t\tif (edge2.PrevInAEL !== null)\n\t\t\t{\n\t\t\t\tedge2.PrevInAEL.NextInAEL = edge2;\n\t\t\t}\n\t\t}\n\n\t\tif (edge1.PrevInAEL === null)\n\t\t{\n\t\t\tthis.m_ActiveEdges = edge1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (edge2.PrevInAEL === null)\n\t\t\t{\n\t\t\t\tthis.m_ActiveEdges = edge2;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.DeleteFromAEL = function (e)\n\t{\n\t\tvar AelPrev = e.PrevInAEL;\n\t\tvar AelNext = e.NextInAEL;\n\t\tif (AelPrev === null && AelNext === null && e !== this.m_ActiveEdges)\n\t\t{\n\t\t\treturn;\n\t\t} //already deleted\n\t\tif (AelPrev !== null)\n\t\t{\n\t\t\tAelPrev.NextInAEL = AelNext;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.m_ActiveEdges = AelNext;\n\t\t}\n\t\tif (AelNext !== null)\n\t\t{\n\t\t\tAelNext.PrevInAEL = AelPrev;\n\t\t}\n\t\te.NextInAEL = null;\n\t\te.PrevInAEL = null;\n\t}\n\n\t// public Clipper(int InitOptions = 0)\n\t/**\n\t * @suppress {missingProperties}\n\t */\n\tClipperLib.Clipper = function (InitOptions)\n\t{\n\t\tif (typeof (InitOptions) === \"undefined\") InitOptions = 0;\n\t\tthis.m_PolyOuts = null;\n\t\tthis.m_ClipType = ClipperLib.ClipType.ctIntersection;\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_Maxima = null;\n\t\tthis.m_ActiveEdges = null;\n\t\tthis.m_SortedEdges = null;\n\t\tthis.m_IntersectList = null;\n\t\tthis.m_IntersectNodeComparer = null;\n\t\tthis.m_ExecuteLocked = false;\n\t\tthis.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tthis.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tthis.m_Joins = null;\n\t\tthis.m_GhostJoins = null;\n\t\tthis.m_UsingPolyTree = false;\n\t\tthis.ReverseSolution = false;\n\t\tthis.StrictlySimple = false;\n\n\t\tClipperLib.ClipperBase.call(this);\n\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_Maxima = null;\n\t\tthis.m_ActiveEdges = null;\n\t\tthis.m_SortedEdges = null;\n\t\tthis.m_IntersectList = new Array();\n\t\tthis.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n\t\tthis.m_ExecuteLocked = false;\n\t\tthis.m_UsingPolyTree = false;\n\t\tthis.m_PolyOuts = new Array();\n\t\tthis.m_Joins = new Array();\n\t\tthis.m_GhostJoins = new Array();\n\t\tthis.ReverseSolution = (1 & InitOptions) !== 0;\n\t\tthis.StrictlySimple = (2 & InitOptions) !== 0;\n\t\tthis.PreserveCollinear = (4 & InitOptions) !== 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tthis.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.ioReverseSolution = 1;\n\tClipperLib.Clipper.ioStrictlySimple = 2;\n\tClipperLib.Clipper.ioPreserveCollinear = 4;\n\n\tClipperLib.Clipper.prototype.Clear = function ()\n\t{\n\t\tif (this.m_edges.length === 0)\n\t\t\treturn;\n\t\t//avoids problems with ClipperBase destructor\n\t\tthis.DisposeAllPolyPts();\n\t\tClipperLib.ClipperBase.prototype.Clear.call(this);\n\t};\n\n\tClipperLib.Clipper.prototype.InsertMaxima = function (X)\n\t{\n\t\t//double-linked list: sorted ascending, ignoring dups.\n\t\tvar newMax = new ClipperLib.Maxima();\n\t\tnewMax.X = X;\n\t\tif (this.m_Maxima === null)\n\t\t{\n\t\t\tthis.m_Maxima = newMax;\n\t\t\tthis.m_Maxima.Next = null;\n\t\t\tthis.m_Maxima.Prev = null;\n\t\t}\n\t\telse if (X < this.m_Maxima.X)\n\t\t{\n\t\t\tnewMax.Next = this.m_Maxima;\n\t\t\tnewMax.Prev = null;\n\t\t\tthis.m_Maxima = newMax;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar m = this.m_Maxima;\n\t\t\twhile (m.Next !== null && X >= m.Next.X)\n\t\t\t{\n\t\t\t\tm = m.Next;\n\t\t\t}\n\t\t\tif (X === m.X)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t} //ie ignores duplicates (& CG to clean up newMax)\n\t\t\t//insert newMax between m and m.Next ...\n\t\t\tnewMax.Next = m.Next;\n\t\t\tnewMax.Prev = m;\n\t\t\tif (m.Next !== null)\n\t\t\t{\n\t\t\t\tm.Next.Prev = newMax;\n\t\t\t}\n\t\t\tm.Next = newMax;\n\t\t}\n\t};\n\n\t// ************************************\n\tClipperLib.Clipper.prototype.Execute = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length,\n\t\t\tispolytree = a[1] instanceof ClipperLib.PolyTree;\n\t\tif (alen === 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tsolution = a[1],\n\t\t\t\tsubjFillType = a[2],\n\t\t\t\tclipFillType = a[3];\n\t\t\tif (this.m_ExecuteLocked)\n\t\t\t\treturn false;\n\t\t\tif (this.m_HasOpenPaths)\n\t\t\t\tClipperLib.Error(\"Error: PolyTree struct is needed for open path clipping.\");\n\t\t\tthis.m_ExecuteLocked = true;\n\t\t\tClipperLib.Clear(solution);\n\t\t\tthis.m_SubjFillType = subjFillType;\n\t\t\tthis.m_ClipFillType = clipFillType;\n\t\t\tthis.m_ClipType = clipType;\n\t\t\tthis.m_UsingPolyTree = false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar succeeded = this.ExecuteInternal();\n\t\t\t\t//build the return polygons ...\n\t\t\t\tif (succeeded) this.BuildResult(solution);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.DisposeAllPolyPts();\n\t\t\t\tthis.m_ExecuteLocked = false;\n\t\t\t}\n\t\t\treturn succeeded;\n\t\t}\n\t\telse if (alen === 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tpolytree = a[1],\n\t\t\t\tsubjFillType = a[2],\n\t\t\t\tclipFillType = a[3];\n\t\t\tif (this.m_ExecuteLocked)\n\t\t\t\treturn false;\n\t\t\tthis.m_ExecuteLocked = true;\n\t\t\tthis.m_SubjFillType = subjFillType;\n\t\t\tthis.m_ClipFillType = clipFillType;\n\t\t\tthis.m_ClipType = clipType;\n\t\t\tthis.m_UsingPolyTree = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar succeeded = this.ExecuteInternal();\n\t\t\t\t//build the return polygons ...\n\t\t\t\tif (succeeded) this.BuildResult2(polytree);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.DisposeAllPolyPts();\n\t\t\t\tthis.m_ExecuteLocked = false;\n\t\t\t}\n\t\t\treturn succeeded;\n\t\t}\n\t\telse if (alen === 2 && !ispolytree) // function (clipType, solution)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tsolution = a[1];\n\t\t\treturn this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t\t}\n\t\telse if (alen === 2 && ispolytree) // function (clipType, polytree)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tpolytree = a[1];\n\t\t\treturn this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n\t{\n\t\t//skip if an outermost polygon or\n\t\t//already already points to the correct FirstLeft ...\n\t\tif (outRec.FirstLeft === null || (outRec.IsHole !== outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n\t\t\treturn;\n\t\tvar orfl = outRec.FirstLeft;\n\t\twhile (orfl !== null && ((orfl.IsHole === outRec.IsHole) || orfl.Pts === null))\n\t\t\torfl = orfl.FirstLeft;\n\t\toutRec.FirstLeft = orfl;\n\t};\n\n\tClipperLib.Clipper.prototype.ExecuteInternal = function ()\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.Reset();\n\t\t\tthis.m_SortedEdges = null;\n\t\t\tthis.m_Maxima = null;\n\n\t\t\tvar botY = {},\n\t\t\t\ttopY = {};\n\n\t\t\tif (!this.PopScanbeam(botY))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.InsertLocalMinimaIntoAEL(botY.v);\n\t\t\twhile (this.PopScanbeam(topY) || this.LocalMinimaPending())\n\t\t\t{\n\t\t\t\tthis.ProcessHorizontals();\n\t\t\t\tthis.m_GhostJoins.length = 0;\n\t\t\t\tif (!this.ProcessIntersections(topY.v))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.ProcessEdgesAtTopOfScanbeam(topY.v);\n\t\t\t\tbotY.v = topY.v;\n\t\t\t\tthis.InsertLocalMinimaIntoAEL(botY.v);\n\t\t\t}\n\n\t\t\t//fix orientations ...\n\t\t\tvar outRec, i, ilen;\n\t\t\t//fix orientations ...\n\t\t\tfor (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts === null || outRec.IsOpen) continue;\n\t\t\t\tif ((outRec.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec) > 0))\n\t\t\t\t\tthis.ReversePolyPtLinks(outRec.Pts);\n\t\t\t}\n\n\t\t\tthis.JoinCommonEdges();\n\n\t\t\tfor (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts === null)\n\t\t\t\t\tcontinue;\n\t\t\t\telse if (outRec.IsOpen)\n\t\t\t\t\tthis.FixupOutPolyline(outRec);\n\t\t\t\telse\n\t\t\t\t\tthis.FixupOutPolygon(outRec);\n\t\t\t}\n\n\t\t\tif (this.StrictlySimple) this.DoSimplePolygons();\n\t\t\treturn true;\n\t\t}\n\t\t//catch { return false; }\n\t\tfinally\n\t\t{\n\t\t\tthis.m_Joins.length = 0;\n\t\t\tthis.m_GhostJoins.length = 0;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n\t\t\tthis.DisposeOutRec(i);\n\t\tClipperLib.Clear(this.m_PolyOuts);\n\t};\n\n\tClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n\t{\n\t\tvar j = new ClipperLib.Join();\n\t\tj.OutPt1 = Op1;\n\t\tj.OutPt2 = Op2;\n\t\t//j.OffPt = OffPt;\n\t\tj.OffPt.X = OffPt.X;\n\t\tj.OffPt.Y = OffPt.Y;\n\t\tif (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n\t\tthis.m_Joins.push(j);\n\t};\n\n\tClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n\t{\n\t\tvar j = new ClipperLib.Join();\n\t\tj.OutPt1 = Op;\n\t\t//j.OffPt = OffPt;\n\t\tj.OffPt.X = OffPt.X;\n\t\tj.OffPt.Y = OffPt.Y;\n\t\tif (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n\t\tthis.m_GhostJoins.push(j);\n\t};\n\n\t//if (ClipperLib.use_xyz)\n\t//{\n\tClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n\t{\n\t\tif (this.ZFillFunction !== null)\n\t\t{\n\t\t\tif (pt.Z !== 0 || this.ZFillFunction === null) return;\n\t\t\telse if (ClipperLib.IntPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n\t\t\telse if (ClipperLib.IntPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n\t\t\telse if (ClipperLib.IntPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n\t\t\telse if (ClipperLib.IntPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n\t\t\telse this.ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n\t\t}\n\t};\n\t//}\n\n\tClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n\t{\n\t\tvar lm = {};\n\n\t\tvar lb;\n\t\tvar rb;\n\t\twhile (this.PopLocalMinima(botY, lm))\n\t\t{\n\t\t\tlb = lm.v.LeftBound;\n\t\t\trb = lm.v.RightBound;\n\n\t\t\tvar Op1 = null;\n\t\t\tif (lb === null)\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(rb, null);\n\t\t\t\tthis.SetWindingCount(rb);\n\t\t\t\tif (this.IsContributing(rb))\n\t\t\t\t\tOp1 = this.AddOutPt(rb, rb.Bot);\n\t\t\t}\n\t\t\telse if (rb === null)\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(lb, null);\n\t\t\t\tthis.SetWindingCount(lb);\n\t\t\t\tif (this.IsContributing(lb))\n\t\t\t\t\tOp1 = this.AddOutPt(lb, lb.Bot);\n\t\t\t\tthis.InsertScanbeam(lb.Top.Y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(lb, null);\n\t\t\t\tthis.InsertEdgeIntoAEL(rb, lb);\n\t\t\t\tthis.SetWindingCount(lb);\n\t\t\t\trb.WindCnt = lb.WindCnt;\n\t\t\t\trb.WindCnt2 = lb.WindCnt2;\n\t\t\t\tif (this.IsContributing(lb))\n\t\t\t\t\tOp1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n\t\t\t\tthis.InsertScanbeam(lb.Top.Y);\n\t\t\t}\n\t\t\tif (rb !== null)\n\t\t\t{\n\t\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(rb))\n\t\t\t\t{\n\t\t\t\t\tif (rb.NextInLML !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.InsertScanbeam(rb.NextInLML.Top.Y);\n\t\t\t\t\t}\n\t\t\t\t\tthis.AddEdgeToSEL(rb);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.InsertScanbeam(rb.Top.Y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lb === null || rb === null) continue;\n\t\t\t//if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n\t\t\tif (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n\t\t\t\t{\n\t\t\t\t\t//if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n\t\t\t\t\t//the 'ghost' join to a real join ready for later ...\n\t\t\t\t\tvar j = this.m_GhostJoins[i];\n\n\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n\t\t\t\t\t\tthis.AddJoin(j.OutPt1, Op1, j.OffPt);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n\t\t\t\tlb.PrevInAEL.Curr.X === lb.Bot.X &&\n\t\t\t\tlb.PrevInAEL.OutIdx >= 0 &&\n\t\t\t\tClipperLib.ClipperBase.SlopesEqual5(lb.PrevInAEL.Curr, lb.PrevInAEL.Top, lb.Curr, lb.Top, this.m_UseFullRange) &&\n\t\t\t\tlb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tvar Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n\t\t\t\tthis.AddJoin(Op1, Op2, lb.Top);\n\t\t\t}\n\t\t\tif (lb.NextInAEL !== rb)\n\t\t\t{\n\t\t\t\tif (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n\t\t\t\t\tClipperLib.ClipperBase.SlopesEqual5(rb.PrevInAEL.Curr, rb.PrevInAEL.Top, rb.Curr, rb.Top, this.m_UseFullRange) &&\n\t\t\t\t\trb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n\t\t\t\t{\n\t\t\t\t\tvar Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n\t\t\t\t\tthis.AddJoin(Op1, Op2, rb.Top);\n\t\t\t\t}\n\t\t\t\tvar e = lb.NextInAEL;\n\t\t\t\tif (e !== null)\n\t\t\t\t\twhile (e !== rb)\n\t\t\t\t\t{\n\t\t\t\t\t\t//nb: For calculating winding counts etc, IntersectEdges() assumes\n\t\t\t\t\t\t//that param1 will be to the right of param2 ABOVE the intersection ...\n\t\t\t\t\t\tthis.IntersectEdges(rb, e, lb.Curr);\n\t\t\t\t\t\t//order important here\n\t\t\t\t\t\te = e.NextInAEL;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t{\n\t\t\tedge.PrevInAEL = null;\n\t\t\tedge.NextInAEL = null;\n\t\t\tthis.m_ActiveEdges = edge;\n\t\t}\n\t\telse if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n\t\t{\n\t\t\tedge.PrevInAEL = null;\n\t\t\tedge.NextInAEL = this.m_ActiveEdges;\n\t\t\tthis.m_ActiveEdges.PrevInAEL = edge;\n\t\t\tthis.m_ActiveEdges = edge;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (startEdge === null)\n\t\t\t\tstartEdge = this.m_ActiveEdges;\n\t\t\twhile (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n\t\t\t\tstartEdge = startEdge.NextInAEL;\n\t\t\tedge.NextInAEL = startEdge.NextInAEL;\n\t\t\tif (startEdge.NextInAEL !== null)\n\t\t\t\tstartEdge.NextInAEL.PrevInAEL = edge;\n\t\t\tedge.PrevInAEL = startEdge;\n\t\t\tstartEdge.NextInAEL = edge;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n\t{\n\t\tif (e2.Curr.X === e1.Curr.X)\n\t\t{\n\t\t\tif (e2.Top.Y > e1.Top.Y)\n\t\t\t\treturn e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n\t\t\telse\n\t\t\t\treturn e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n\t\t}\n\t\telse\n\t\t\treturn e2.Curr.X < e1.Curr.X;\n\t};\n\n\tClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n\t{\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\treturn this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t\telse\n\t\t\treturn this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t};\n\n\tClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n\t{\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\treturn this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t\telse\n\t\t\treturn this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t};\n\n\tClipperLib.Clipper.prototype.IsContributing = function (edge)\n\t{\n\t\tvar pft, pft2;\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\tpft = this.m_SubjFillType;\n\t\t\tpft2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpft = this.m_ClipFillType;\n\t\t\tpft2 = this.m_SubjFillType;\n\t\t}\n\t\tswitch (pft)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tif (edge.WindDelta === 0 && edge.WindCnt !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\tif (Math.abs(edge.WindCnt) !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\tif (edge.WindCnt !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (edge.WindCnt !== -1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\t}\n\t\tswitch (this.m_ClipType)\n\t\t{\n\t\tcase ClipperLib.ClipType.ctIntersection:\n\t\t\tswitch (pft2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\treturn (edge.WindCnt2 !== 0);\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\treturn (edge.WindCnt2 > 0);\n\t\t\tdefault:\n\t\t\t\treturn (edge.WindCnt2 < 0);\n\t\t\t}\n\t\tcase ClipperLib.ClipType.ctUnion:\n\t\t\tswitch (pft2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\tdefault:\n\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t}\n\t\tcase ClipperLib.ClipType.ctDifference:\n\t\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 !== 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 > 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 < 0);\n\t\t\t\t}\n\t\tcase ClipperLib.ClipType.ctXor:\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n\t{\n\t\tvar e = edge.PrevInAEL;\n\t\t//find the edge of the same polytype that immediately preceeds 'edge' in AEL\n\t\twhile (e !== null && ((e.PolyTyp !== edge.PolyTyp) || (e.WindDelta === 0)))\n\t\t\te = e.PrevInAEL;\n\t\tif (e === null)\n\t\t{\n\t\t\tvar pft = (edge.PolyTyp === ClipperLib.PolyType.ptSubject ? this.m_SubjFillType : this.m_ClipFillType);\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t{\n\t\t\t\tedge.WindCnt = (pft === ClipperLib.PolyFillType.pftNegative ? -1 : 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge.WindCnt = edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = 0;\n\t\t\te = this.m_ActiveEdges;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse if (edge.WindDelta === 0 && this.m_ClipType !== ClipperLib.ClipType.ctUnion)\n\t\t{\n\t\t\tedge.WindCnt = 1;\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse if (this.IsEvenOddFillType(edge))\n\t\t{\n\t\t\t//EvenOdd filling ...\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t{\n\t\t\t\t//are we inside a subj polygon ...\n\t\t\t\tvar Inside = true;\n\t\t\t\tvar e2 = e.PrevInAEL;\n\t\t\t\twhile (e2 !== null)\n\t\t\t\t{\n\t\t\t\t\tif (e2.PolyTyp === e.PolyTyp && e2.WindDelta !== 0)\n\t\t\t\t\t\tInside = !Inside;\n\t\t\t\t\te2 = e2.PrevInAEL;\n\t\t\t\t}\n\t\t\t\tedge.WindCnt = (Inside ? 0 : 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge.WindCnt = edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nonZero, Positive or Negative filling ...\n\t\t\tif (e.WindCnt * e.WindDelta < 0)\n\t\t\t{\n\t\t\t\t//prev edge is 'decreasing' WindCount (WC) toward zero\n\t\t\t\t//so we're outside the previous polygon ...\n\t\t\t\tif (Math.abs(e.WindCnt) > 1)\n\t\t\t\t{\n\t\t\t\t\t//outside prev poly but still inside another.\n\t\t\t\t\t//when reversing direction of prev poly use the same WC\n\t\t\t\t\tif (e.WindDelta * edge.WindDelta < 0)\n\t\t\t\t\t\tedge.WindCnt = e.WindCnt;\n\t\t\t\t\telse\n\t\t\t\t\t\tedge.WindCnt = e.WindCnt + edge.WindDelta;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tedge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//prev edge is 'increasing' WindCount (WC) away from zero\n\t\t\t\t//so we're inside the previous polygon ...\n\t\t\t\tif (edge.WindDelta === 0)\n\t\t\t\t\tedge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n\t\t\t\telse if (e.WindDelta * edge.WindDelta < 0)\n\t\t\t\t\tedge.WindCnt = e.WindCnt;\n\t\t\t\telse\n\t\t\t\t\tedge.WindCnt = e.WindCnt + edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\t//update WindCnt2 ...\n\t\tif (this.IsEvenOddAltFillType(edge))\n\t\t{\n\t\t\t//EvenOdd filling ...\n\t\t\twhile (e !== edge)\n\t\t\t{\n\t\t\t\tif (e.WindDelta !== 0)\n\t\t\t\t\tedge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nonZero, Positive or Negative filling ...\n\t\t\twhile (e !== edge)\n\t\t\t{\n\t\t\t\tedge.WindCnt2 += e.WindDelta;\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n\t{\n\t\t//SEL pointers in PEdge are use to build transient lists of horizontal edges.\n\t\t//However, since we don't need to worry about processing order, all additions\n\t\t//are made to the front of the list ...\n\t\tif (this.m_SortedEdges === null)\n\t\t{\n\t\t\tthis.m_SortedEdges = edge;\n\t\t\tedge.PrevInSEL = null;\n\t\t\tedge.NextInSEL = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tedge.NextInSEL = this.m_SortedEdges;\n\t\t\tedge.PrevInSEL = null;\n\t\t\tthis.m_SortedEdges.PrevInSEL = edge;\n\t\t\tthis.m_SortedEdges = edge;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.PopEdgeFromSEL = function (e)\n\t{\n\t\t//Pop edge from front of SEL (ie SEL is a FILO list)\n\t\te.v = this.m_SortedEdges;\n\t\tif (e.v === null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tvar oldE = e.v;\n\t\tthis.m_SortedEdges = e.v.NextInSEL;\n\t\tif (this.m_SortedEdges !== null)\n\t\t{\n\t\t\tthis.m_SortedEdges.PrevInSEL = null;\n\t\t}\n\t\toldE.NextInSEL = null;\n\t\toldE.PrevInSEL = null;\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n\t{\n\t\tvar e = this.m_ActiveEdges;\n\t\tthis.m_SortedEdges = e;\n\t\twhile (e !== null)\n\t\t{\n\t\t\te.PrevInSEL = e.PrevInAEL;\n\t\t\te.NextInSEL = e.NextInAEL;\n\t\t\te = e.NextInAEL;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n\t{\n\t\tif (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n\t\t\treturn;\n\t\tif (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n\t\t\treturn;\n\t\tif (edge1.NextInSEL === edge2)\n\t\t{\n\t\t\tvar next = edge2.NextInSEL;\n\t\t\tif (next !== null)\n\t\t\t\tnext.PrevInSEL = edge1;\n\t\t\tvar prev = edge1.PrevInSEL;\n\t\t\tif (prev !== null)\n\t\t\t\tprev.NextInSEL = edge2;\n\t\t\tedge2.PrevInSEL = prev;\n\t\t\tedge2.NextInSEL = edge1;\n\t\t\tedge1.PrevInSEL = edge2;\n\t\t\tedge1.NextInSEL = next;\n\t\t}\n\t\telse if (edge2.NextInSEL === edge1)\n\t\t{\n\t\t\tvar next = edge1.NextInSEL;\n\t\t\tif (next !== null)\n\t\t\t\tnext.PrevInSEL = edge2;\n\t\t\tvar prev = edge2.PrevInSEL;\n\t\t\tif (prev !== null)\n\t\t\t\tprev.NextInSEL = edge1;\n\t\t\tedge1.PrevInSEL = prev;\n\t\t\tedge1.NextInSEL = edge2;\n\t\t\tedge2.PrevInSEL = edge1;\n\t\t\tedge2.NextInSEL = next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar next = edge1.NextInSEL;\n\t\t\tvar prev = edge1.PrevInSEL;\n\t\t\tedge1.NextInSEL = edge2.NextInSEL;\n\t\t\tif (edge1.NextInSEL !== null)\n\t\t\t\tedge1.NextInSEL.PrevInSEL = edge1;\n\t\t\tedge1.PrevInSEL = edge2.PrevInSEL;\n\t\t\tif (edge1.PrevInSEL !== null)\n\t\t\t\tedge1.PrevInSEL.NextInSEL = edge1;\n\t\t\tedge2.NextInSEL = next;\n\t\t\tif (edge2.NextInSEL !== null)\n\t\t\t\tedge2.NextInSEL.PrevInSEL = edge2;\n\t\t\tedge2.PrevInSEL = prev;\n\t\t\tif (edge2.PrevInSEL !== null)\n\t\t\t\tedge2.PrevInSEL.NextInSEL = edge2;\n\t\t}\n\t\tif (edge1.PrevInSEL === null)\n\t\t\tthis.m_SortedEdges = edge1;\n\t\telse if (edge2.PrevInSEL === null)\n\t\t\tthis.m_SortedEdges = edge2;\n\t};\n\n\tClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n\t{\n\t\tthis.AddOutPt(e1, pt);\n\t\tif (e2.WindDelta === 0) this.AddOutPt(e2, pt);\n\t\tif (e1.OutIdx === e2.OutIdx)\n\t\t{\n\t\t\te1.OutIdx = -1;\n\t\t\te2.OutIdx = -1;\n\t\t}\n\t\telse if (e1.OutIdx < e2.OutIdx)\n\t\t\tthis.AppendPolygon(e1, e2);\n\t\telse\n\t\t\tthis.AppendPolygon(e2, e1);\n\t};\n\n\tClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n\t{\n\t\tvar result;\n\t\tvar e, prevE;\n\t\tif (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n\t\t{\n\t\t\tresult = this.AddOutPt(e1, pt);\n\t\t\te2.OutIdx = e1.OutIdx;\n\t\t\te1.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\te2.Side = ClipperLib.EdgeSide.esRight;\n\t\t\te = e1;\n\t\t\tif (e.PrevInAEL === e2)\n\t\t\t\tprevE = e2.PrevInAEL;\n\t\t\telse\n\t\t\t\tprevE = e.PrevInAEL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.AddOutPt(e2, pt);\n\t\t\te1.OutIdx = e2.OutIdx;\n\t\t\te1.Side = ClipperLib.EdgeSide.esRight;\n\t\t\te2.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\te = e2;\n\t\t\tif (e.PrevInAEL === e1)\n\t\t\t\tprevE = e1.PrevInAEL;\n\t\t\telse\n\t\t\t\tprevE = e.PrevInAEL;\n\t\t}\n\n\t\tif (prevE !== null && prevE.OutIdx >= 0 && prevE.Top.Y < pt.Y && e.Top.Y < pt.Y)\n\t\t{\n\t\t\tvar xPrev = ClipperLib.Clipper.TopX(prevE, pt.Y);\n\t\t\tvar xE = ClipperLib.Clipper.TopX(e, pt.Y);\n\t\t\tif ((xPrev === xE) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0) && ClipperLib.ClipperBase.SlopesEqual5(new ClipperLib.IntPoint2(xPrev, pt.Y), prevE.Top, new ClipperLib.IntPoint2(xE, pt.Y), e.Top, this.m_UseFullRange))\n\t\t\t{\n\t\t\t\tvar outPt = this.AddOutPt(prevE, pt);\n\t\t\t\tthis.AddJoin(result, outPt, e.Top);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n\t{\n\t\tif (e.OutIdx < 0)\n\t\t{\n\t\t\tvar outRec = this.CreateOutRec();\n\t\t\toutRec.IsOpen = (e.WindDelta === 0);\n\t\t\tvar newOp = new ClipperLib.OutPt();\n\t\t\toutRec.Pts = newOp;\n\t\t\tnewOp.Idx = outRec.Idx;\n\t\t\t//newOp.Pt = pt;\n\t\t\tnewOp.Pt.X = pt.X;\n\t\t\tnewOp.Pt.Y = pt.Y;\n\t\t\tif (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n\t\t\tnewOp.Next = newOp;\n\t\t\tnewOp.Prev = newOp;\n\t\t\tif (!outRec.IsOpen)\n\t\t\t\tthis.SetHoleState(e, outRec);\n\t\t\te.OutIdx = outRec.Idx;\n\t\t\t//nb: do this after SetZ !\n\t\t\treturn newOp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[e.OutIdx];\n\t\t\t//OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n\t\t\tvar op = outRec.Pts;\n\t\t\tvar ToFront = (e.Side === ClipperLib.EdgeSide.esLeft);\n\t\t\tif (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n\t\t\t\treturn op;\n\t\t\telse if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n\t\t\t\treturn op.Prev;\n\t\t\tvar newOp = new ClipperLib.OutPt();\n\t\t\tnewOp.Idx = outRec.Idx;\n\t\t\t//newOp.Pt = pt;\n\t\t\tnewOp.Pt.X = pt.X;\n\t\t\tnewOp.Pt.Y = pt.Y;\n\t\t\tif (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n\t\t\tnewOp.Next = op;\n\t\t\tnewOp.Prev = op.Prev;\n\t\t\tnewOp.Prev.Next = newOp;\n\t\t\top.Prev = newOp;\n\t\t\tif (ToFront)\n\t\t\t\toutRec.Pts = newOp;\n\t\t\treturn newOp;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetLastOutPt = function (e)\n\t{\n\t\tvar outRec = this.m_PolyOuts[e.OutIdx];\n\t\tif (e.Side === ClipperLib.EdgeSide.esLeft)\n\t\t{\n\t\t\treturn outRec.Pts;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn outRec.Pts.Prev;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n\t{\n\t\tvar tmp = new ClipperLib.IntPoint1(pt1.Value);\n\t\t//pt1.Value = pt2.Value;\n\t\tpt1.Value.X = pt2.Value.X;\n\t\tpt1.Value.Y = pt2.Value.Y;\n\t\tif (ClipperLib.use_xyz) pt1.Value.Z = pt2.Value.Z;\n\t\t//pt2.Value = tmp;\n\t\tpt2.Value.X = tmp.X;\n\t\tpt2.Value.Y = tmp.Y;\n\t\tif (ClipperLib.use_xyz) pt2.Value.Z = tmp.Z;\n\t};\n\n\tClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t{\n\t\tvar tmp;\n\t\tif (seg1a > seg1b)\n\t\t{\n\t\t\ttmp = seg1a;\n\t\t\tseg1a = seg1b;\n\t\t\tseg1b = tmp;\n\t\t}\n\t\tif (seg2a > seg2b)\n\t\t{\n\t\t\ttmp = seg2a;\n\t\t\tseg2a = seg2b;\n\t\t\tseg2b = tmp;\n\t\t}\n\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t}\n\n\tClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n\t{\n\t\tvar e2 = e.PrevInAEL;\n\t\tvar eTmp = null;\n\t\twhile (e2 !== null)\n\t\t{\n\t\t\tif (e2.OutIdx >= 0 && e2.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tif (eTmp === null)\n\t\t\t\t\teTmp = e2;\n\t\t\t\telse if (eTmp.OutIdx === e2.OutIdx)\n\t\t\t\t\teTmp = null; //paired\n\t\t\t}\n\t\t\te2 = e2.PrevInAEL;\n\t\t}\n\n\t\tif (eTmp === null)\n\t\t{\n\t\t\toutRec.FirstLeft = null;\n\t\t\toutRec.IsHole = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutRec.FirstLeft = this.m_PolyOuts[eTmp.OutIdx];\n\t\t\toutRec.IsHole = !outRec.FirstLeft.IsHole;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n\t{\n\t\tif (pt1.Y === pt2.Y)\n\t\t\treturn ClipperLib.ClipperBase.horizontal;\n\t\telse\n\t\t\treturn (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n\t};\n\n\tClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n\t{\n\t\tvar p = btmPt1.Prev;\n\t\twhile ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n\t\t\tp = p.Prev;\n\t\tvar dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t\tp = btmPt1.Next;\n\t\twhile ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n\t\t\tp = p.Next;\n\t\tvar dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t\tp = btmPt2.Prev;\n\t\twhile ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n\t\t\tp = p.Prev;\n\t\tvar dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t\tp = btmPt2.Next;\n\t\twhile ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n\t\t\tp = p.Next;\n\t\tvar dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\n\t\tif (Math.max(dx1p, dx1n) === Math.max(dx2p, dx2n) && Math.min(dx1p, dx1n) === Math.min(dx2p, dx2n))\n\t\t{\n\t\t\treturn this.Area(btmPt1) > 0; //if otherwise identical use orientation\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n\t{\n\t\tvar dups = null;\n\t\tvar p = pp.Next;\n\t\twhile (p !== pp)\n\t\t{\n\t\t\tif (p.Pt.Y > pp.Pt.Y)\n\t\t\t{\n\t\t\t\tpp = p;\n\t\t\t\tdups = null;\n\t\t\t}\n\t\t\telse if (p.Pt.Y === pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n\t\t\t{\n\t\t\t\tif (p.Pt.X < pp.Pt.X)\n\t\t\t\t{\n\t\t\t\t\tdups = null;\n\t\t\t\t\tpp = p;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (p.Next !== pp && p.Prev !== pp)\n\t\t\t\t\t\tdups = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tp = p.Next;\n\t\t}\n\t\tif (dups !== null)\n\t\t{\n\t\t\t//there appears to be at least 2 vertices at bottomPt so ...\n\t\t\twhile (dups !== p)\n\t\t\t{\n\t\t\t\tif (!this.FirstIsBottomPt(p, dups))\n\t\t\t\t\tpp = dups;\n\t\t\t\tdups = dups.Next;\n\t\t\t\twhile (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n\t\t\t\t\tdups = dups.Next;\n\t\t\t}\n\t\t}\n\t\treturn pp;\n\t};\n\n\tClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n\t{\n\t\t//work out which polygon fragment has the correct hole state ...\n\t\tif (outRec1.BottomPt === null)\n\t\t\toutRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n\t\tif (outRec2.BottomPt === null)\n\t\t\toutRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n\t\tvar bPt1 = outRec1.BottomPt;\n\t\tvar bPt2 = outRec2.BottomPt;\n\t\tif (bPt1.Pt.Y > bPt2.Pt.Y)\n\t\t\treturn outRec1;\n\t\telse if (bPt1.Pt.Y < bPt2.Pt.Y)\n\t\t\treturn outRec2;\n\t\telse if (bPt1.Pt.X < bPt2.Pt.X)\n\t\t\treturn outRec1;\n\t\telse if (bPt1.Pt.X > bPt2.Pt.X)\n\t\t\treturn outRec2;\n\t\telse if (bPt1.Next === bPt1)\n\t\t\treturn outRec2;\n\t\telse if (bPt2.Next === bPt2)\n\t\t\treturn outRec1;\n\t\telse if (this.FirstIsBottomPt(bPt1, bPt2))\n\t\t\treturn outRec1;\n\t\telse\n\t\t\treturn outRec2;\n\t};\n\n\tClipperLib.Clipper.prototype.OutRec1RightOfOutRec2 = function (outRec1, outRec2)\n\t{\n\t\tdo {\n\t\t\toutRec1 = outRec1.FirstLeft;\n\t\t\tif (outRec1 === outRec2)\n\t\t\t\treturn true;\n\t\t}\n\t\twhile (outRec1 !== null)\n\t\treturn false;\n\t};\n\n\tClipperLib.Clipper.prototype.GetOutRec = function (idx)\n\t{\n\t\tvar outrec = this.m_PolyOuts[idx];\n\t\twhile (outrec !== this.m_PolyOuts[outrec.Idx])\n\t\t\toutrec = this.m_PolyOuts[outrec.Idx];\n\t\treturn outrec;\n\t};\n\n\tClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n\t{\n\t\t//get the start and ends of both output polygons ...\n\t\tvar outRec1 = this.m_PolyOuts[e1.OutIdx];\n\t\tvar outRec2 = this.m_PolyOuts[e2.OutIdx];\n\t\tvar holeStateRec;\n\t\tif (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n\t\t\tholeStateRec = outRec2;\n\t\telse if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n\t\t\tholeStateRec = outRec1;\n\t\telse\n\t\t\tholeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n\t\t//get the start and ends of both output polygons and\n\t\t//join E2 poly onto E1 poly and delete pointers to E2 ...\n\n\t\tvar p1_lft = outRec1.Pts;\n\t\tvar p1_rt = p1_lft.Prev;\n\t\tvar p2_lft = outRec2.Pts;\n\t\tvar p2_rt = p2_lft.Prev;\n\t\t//join e2 poly onto e1 poly and delete pointers to e2 ...\n\t\tif (e1.Side === ClipperLib.EdgeSide.esLeft)\n\t\t{\n\t\t\tif (e2.Side === ClipperLib.EdgeSide.esLeft)\n\t\t\t{\n\t\t\t\t//z y x a b c\n\t\t\t\tthis.ReversePolyPtLinks(p2_lft);\n\t\t\t\tp2_lft.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_lft;\n\t\t\t\tp1_rt.Next = p2_rt;\n\t\t\t\tp2_rt.Prev = p1_rt;\n\t\t\t\toutRec1.Pts = p2_rt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//x y z a b c\n\t\t\t\tp2_rt.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_rt;\n\t\t\t\tp2_lft.Prev = p1_rt;\n\t\t\t\tp1_rt.Next = p2_lft;\n\t\t\t\toutRec1.Pts = p2_lft;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (e2.Side === ClipperLib.EdgeSide.esRight)\n\t\t\t{\n\t\t\t\t//a b c z y x\n\t\t\t\tthis.ReversePolyPtLinks(p2_lft);\n\t\t\t\tp1_rt.Next = p2_rt;\n\t\t\t\tp2_rt.Prev = p1_rt;\n\t\t\t\tp2_lft.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_lft;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//a b c x y z\n\t\t\t\tp1_rt.Next = p2_lft;\n\t\t\t\tp2_lft.Prev = p1_rt;\n\t\t\t\tp1_lft.Prev = p2_rt;\n\t\t\t\tp2_rt.Next = p1_lft;\n\t\t\t}\n\t\t}\n\t\toutRec1.BottomPt = null;\n\t\tif (holeStateRec === outRec2)\n\t\t{\n\t\t\tif (outRec2.FirstLeft !== outRec1)\n\t\t\t\toutRec1.FirstLeft = outRec2.FirstLeft;\n\t\t\toutRec1.IsHole = outRec2.IsHole;\n\t\t}\n\t\toutRec2.Pts = null;\n\t\toutRec2.BottomPt = null;\n\t\toutRec2.FirstLeft = outRec1;\n\t\tvar OKIdx = e1.OutIdx;\n\t\tvar ObsoleteIdx = e2.OutIdx;\n\t\te1.OutIdx = -1;\n\t\t//nb: safe because we only get here via AddLocalMaxPoly\n\t\te2.OutIdx = -1;\n\t\tvar e = this.m_ActiveEdges;\n\t\twhile (e !== null)\n\t\t{\n\t\t\tif (e.OutIdx === ObsoleteIdx)\n\t\t\t{\n\t\t\t\te.OutIdx = OKIdx;\n\t\t\t\te.Side = e1.Side;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\te = e.NextInAEL;\n\t\t}\n\t\toutRec2.Idx = outRec1.Idx;\n\t};\n\n\tClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n\t{\n\t\tif (pp === null)\n\t\t\treturn;\n\t\tvar pp1;\n\t\tvar pp2;\n\t\tpp1 = pp;\n\t\tdo {\n\t\t\tpp2 = pp1.Next;\n\t\t\tpp1.Next = pp1.Prev;\n\t\t\tpp1.Prev = pp2;\n\t\t\tpp1 = pp2;\n\t\t}\n\t\twhile (pp1 !== pp)\n\t};\n\n\tClipperLib.Clipper.SwapSides = function (edge1, edge2)\n\t{\n\t\tvar side = edge1.Side;\n\t\tedge1.Side = edge2.Side;\n\t\tedge2.Side = side;\n\t};\n\n\tClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n\t{\n\t\tvar outIdx = edge1.OutIdx;\n\t\tedge1.OutIdx = edge2.OutIdx;\n\t\tedge2.OutIdx = outIdx;\n\t};\n\n\tClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n\t{\n\t\t//e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n\t\t//e2 in AEL except when e1 is being inserted at the intersection point ...\n\t\tvar e1Contributing = (e1.OutIdx >= 0);\n\t\tvar e2Contributing = (e2.OutIdx >= 0);\n\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.SetZ(pt, e1, e2);\n\n\t\tif (ClipperLib.use_lines)\n\t\t{\n\t\t\t//if either edge is on an OPEN path ...\n\t\t\tif (e1.WindDelta === 0 || e2.WindDelta === 0)\n\t\t\t{\n\t\t\t\t//ignore subject-subject open path intersections UNLESS they\n\t\t\t\t//are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\tif (e1.WindDelta === 0 && e2.WindDelta === 0) return;\n\t\t\t\t//if intersecting a subj line with a subj poly ...\n\t\t\t\telse if (e1.PolyTyp === e2.PolyTyp &&\n\t\t\t\t\te1.WindDelta !== e2.WindDelta && this.m_ClipType === ClipperLib.ClipType.ctUnion)\n\t\t\t\t{\n\t\t\t\t\tif (e1.WindDelta === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t\t\te1.OutIdx = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t\t\te2.OutIdx = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (e1.PolyTyp !== e2.PolyTyp)\n\t\t\t\t{\n\t\t\t\t\tif ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) === 1 &&\n\t\t\t\t\t\t(this.m_ClipType !== ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t\te1.OutIdx = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) === 1) &&\n\t\t\t\t\t\t(this.m_ClipType !== ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t\te2.OutIdx = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t//update winding counts...\n\t\t//assumes that e1 will be to the Right of e2 ABOVE the intersection\n\t\tif (e1.PolyTyp === e2.PolyTyp)\n\t\t{\n\t\t\tif (this.IsEvenOddFillType(e1))\n\t\t\t{\n\t\t\t\tvar oldE1WindCnt = e1.WindCnt;\n\t\t\t\te1.WindCnt = e2.WindCnt;\n\t\t\t\te2.WindCnt = oldE1WindCnt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (e1.WindCnt + e2.WindDelta === 0)\n\t\t\t\t\te1.WindCnt = -e1.WindCnt;\n\t\t\t\telse\n\t\t\t\t\te1.WindCnt += e2.WindDelta;\n\t\t\t\tif (e2.WindCnt - e1.WindDelta === 0)\n\t\t\t\t\te2.WindCnt = -e2.WindCnt;\n\t\t\t\telse\n\t\t\t\t\te2.WindCnt -= e1.WindDelta;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.IsEvenOddFillType(e2))\n\t\t\t\te1.WindCnt2 += e2.WindDelta;\n\t\t\telse\n\t\t\t\te1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n\t\t\tif (!this.IsEvenOddFillType(e1))\n\t\t\t\te2.WindCnt2 -= e1.WindDelta;\n\t\t\telse\n\t\t\t\te2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n\t\t}\n\t\tvar e1FillType, e2FillType, e1FillType2, e2FillType2;\n\t\tif (e1.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\te1FillType = this.m_SubjFillType;\n\t\t\te1FillType2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te1FillType = this.m_ClipFillType;\n\t\t\te1FillType2 = this.m_SubjFillType;\n\t\t}\n\t\tif (e2.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\te2FillType = this.m_SubjFillType;\n\t\t\te2FillType2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te2FillType = this.m_ClipFillType;\n\t\t\te2FillType2 = this.m_SubjFillType;\n\t\t}\n\t\tvar e1Wc, e2Wc;\n\t\tswitch (e1FillType)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\te1Wc = e1.WindCnt;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\te1Wc = -e1.WindCnt;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\te1Wc = Math.abs(e1.WindCnt);\n\t\t\tbreak;\n\t\t}\n\t\tswitch (e2FillType)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\te2Wc = e2.WindCnt;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\te2Wc = -e2.WindCnt;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\te2Wc = Math.abs(e2.WindCnt);\n\t\t\tbreak;\n\t\t}\n\t\tif (e1Contributing && e2Contributing)\n\t\t{\n\t\t\tif ((e1Wc !== 0 && e1Wc !== 1) || (e2Wc !== 0 && e2Wc !== 1) ||\n\t\t\t\t(e1.PolyTyp !== e2.PolyTyp && this.m_ClipType !== ClipperLib.ClipType.ctXor))\n\t\t\t{\n\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if (e1Contributing)\n\t\t{\n\t\t\tif (e2Wc === 0 || e2Wc === 1)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if (e2Contributing)\n\t\t{\n\t\t\tif (e1Wc === 0 || e1Wc === 1)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if ((e1Wc === 0 || e1Wc === 1) && (e2Wc === 0 || e2Wc === 1))\n\t\t{\n\t\t\t//neither edge is currently contributing ...\n\t\t\tvar e1Wc2, e2Wc2;\n\t\t\tswitch (e1FillType2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\te1Wc2 = e1.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\t\te1Wc2 = -e1.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\te1Wc2 = Math.abs(e1.WindCnt2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswitch (e2FillType2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\te2Wc2 = e2.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\t\te2Wc2 = -e2.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\te2Wc2 = Math.abs(e2.WindCnt2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (e1.PolyTyp !== e2.PolyTyp)\n\t\t\t{\n\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t}\n\t\t\telse if (e1Wc === 1 && e2Wc === 1)\n\t\t\t\tswitch (this.m_ClipType)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.ClipType.ctIntersection:\n\t\t\t\t\tif (e1Wc2 > 0 && e2Wc2 > 0)\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctUnion:\n\t\t\t\t\tif (e1Wc2 <= 0 && e2Wc2 <= 0)\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctDifference:\n\t\t\t\t\tif (((e1.PolyTyp === ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n\t\t\t\t\t\t((e1.PolyTyp === ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctXor:\n\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n\t{\n\t\tvar SelPrev = e.PrevInSEL;\n\t\tvar SelNext = e.NextInSEL;\n\t\tif (SelPrev === null && SelNext === null && (e !== this.m_SortedEdges))\n\t\t\treturn;\n\t\t//already deleted\n\t\tif (SelPrev !== null)\n\t\t\tSelPrev.NextInSEL = SelNext;\n\t\telse\n\t\t\tthis.m_SortedEdges = SelNext;\n\t\tif (SelNext !== null)\n\t\t\tSelNext.PrevInSEL = SelPrev;\n\t\te.NextInSEL = null;\n\t\te.PrevInSEL = null;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessHorizontals = function ()\n\t{\n\t\tvar horzEdge = {}; //m_SortedEdges;\n\t\twhile (this.PopEdgeFromSEL(horzEdge))\n\t\t{\n\t\t\tthis.ProcessHorizontal(horzEdge.v);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n\t{\n\t\tif (HorzEdge.Bot.X < HorzEdge.Top.X)\n\t\t{\n\t\t\t$var.Left = HorzEdge.Bot.X;\n\t\t\t$var.Right = HorzEdge.Top.X;\n\t\t\t$var.Dir = ClipperLib.Direction.dLeftToRight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$var.Left = HorzEdge.Top.X;\n\t\t\t$var.Right = HorzEdge.Bot.X;\n\t\t\t$var.Dir = ClipperLib.Direction.dRightToLeft;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge)\n\t{\n\t\tvar $var = {\n\t\t\tDir: null,\n\t\t\tLeft: null,\n\t\t\tRight: null\n\t\t};\n\n\t\tthis.GetHorzDirection(horzEdge, $var);\n\t\tvar dir = $var.Dir;\n\t\tvar horzLeft = $var.Left;\n\t\tvar horzRight = $var.Right;\n\n\t\tvar IsOpen = horzEdge.WindDelta === 0;\n\n\t\tvar eLastHorz = horzEdge,\n\t\t\teMaxPair = null;\n\t\twhile (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n\t\t\teLastHorz = eLastHorz.NextInLML;\n\t\tif (eLastHorz.NextInLML === null)\n\t\t\teMaxPair = this.GetMaximaPair(eLastHorz);\n\n\t\tvar currMax = this.m_Maxima;\n\t\tif (currMax !== null)\n\t\t{\n\t\t\t//get the first maxima in range (X) ...\n\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t{\n\t\t\t\twhile (currMax !== null && currMax.X <= horzEdge.Bot.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t}\n\t\t\t\tif (currMax !== null && currMax.X >= eLastHorz.Top.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (currMax.Next !== null && currMax.Next.X < horzEdge.Bot.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t}\n\t\t\t\tif (currMax.X <= eLastHorz.Top.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar op1 = null;\n\t\tfor (;;) //loop through consec. horizontal edges\n\t\t{\n\t\t\tvar IsLastHorz = (horzEdge === eLastHorz);\n\t\t\tvar e = this.GetNextInAEL(horzEdge, dir);\n\t\t\twhile (e !== null)\n\t\t\t{\n\t\t\t\t//this code block inserts extra coords into horizontal edges (in output\n\t\t\t\t//polygons) whereever maxima touch these horizontal edges. This helps\n\t\t\t\t//'simplifying' polygons (ie if the Simplify property is set).\n\t\t\t\tif (currMax !== null)\n\t\t\t\t{\n\t\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (currMax !== null && currMax.X < e.Curr.X)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.AddOutPt(horzEdge, new ClipperLib.IntPoint2(currMax.X, horzEdge.Bot.Y));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (currMax !== null && currMax.X > e.Curr.X)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.AddOutPt(horzEdge, new ClipperLib.IntPoint2(currMax.X, horzEdge.Bot.Y));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrMax = currMax.Prev;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((dir === ClipperLib.Direction.dLeftToRight && e.Curr.X > horzRight) || (dir === ClipperLib.Direction.dRightToLeft && e.Curr.X < horzLeft))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//Also break if we've got to the end of an intermediate horizontal edge ...\n\t\t\t\t//nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n\t\t\t\tif (e.Curr.X === horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen) //note: may be done multiple times\n\t\t\t\t{\n\t\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t\t\t\tthis.SetZ(e.Curr, horzEdge, e);\n\t\t\t\t\t\telse this.SetZ(e.Curr, e, horzEdge);\n\t\t\t\t\t}\n\n\t\t\t\t\top1 = this.AddOutPt(horzEdge, e.Curr);\n\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar op2 = this.GetLastOutPt(eNextHorz);\n\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t}\n\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t}\n\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t}\n\n\t\t\t\t//OK, so far we're still in range of the horizontal Edge  but make sure\n\t\t\t\t//we're at the last of consec. horizontals when matching with eMaxPair\n\t\t\t\tif (e === eMaxPair && IsLastHorz)\n\t\t\t\t{\n\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t}\n\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t{\n\t\t\t\t\tvar Pt = new ClipperLib.IntPoint2(e.Curr.X, horzEdge.Curr.Y);\n\t\t\t\t\tthis.IntersectEdges(horzEdge, e, Pt);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar Pt = new ClipperLib.IntPoint2(e.Curr.X, horzEdge.Curr.Y);\n\t\t\t\t\tthis.IntersectEdges(e, horzEdge, Pt);\n\t\t\t\t}\n\t\t\t\tvar eNext = this.GetNextInAEL(e, dir);\n\t\t\t\tthis.SwapPositionsInAEL(horzEdge, e);\n\t\t\t\te = eNext;\n\t\t\t} //end while(e !== null)\n\n\t\t\t//Break out of loop if HorzEdge.NextInLML is not also horizontal ...\n\t\t\tif (horzEdge.NextInLML === null || !ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(horzEdge, horzEdge.Bot);\n\t\t\t}\n\n\t\t\t$var = {\n\t\t\t\tDir: dir,\n\t\t\t\tLeft: horzLeft,\n\t\t\t\tRight: horzRight\n\t\t\t};\n\n\t\t\tthis.GetHorzDirection(horzEdge, $var);\n\t\t\tdir = $var.Dir;\n\t\t\thorzLeft = $var.Left;\n\t\t\thorzRight = $var.Right;\n\n\t\t} //end for (;;)\n\n\t\tif (horzEdge.OutIdx >= 0 && op1 === null)\n\t\t{\n\t\t\top1 = this.GetLastOutPt(horzEdge);\n\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\twhile (eNextHorz !== null)\n\t\t\t{\n\t\t\t\tif (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.GetLastOutPt(eNextHorz);\n\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t}\n\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t}\n\t\t\tthis.AddGhostJoin(op1, horzEdge.Top);\n\t\t}\n\n\t\tif (horzEdge.NextInLML !== null)\n\t\t{\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\top1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\n\t\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\t\tif (horzEdge.WindDelta === 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//nb: HorzEdge is no longer horizontal here\n\t\t\t\tvar ePrev = horzEdge.PrevInAEL;\n\t\t\t\tvar eNext = horzEdge.NextInAEL;\n\t\t\t\tif (ePrev !== null && ePrev.Curr.X === horzEdge.Bot.X && ePrev.Curr.Y === horzEdge.Bot.Y && ePrev.WindDelta === 0 && (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, ePrev, this.m_UseFullRange)))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n\t\t\t\t\tthis.AddJoin(op1, op2, horzEdge.Top);\n\t\t\t\t}\n\t\t\t\telse if (eNext !== null && eNext.Curr.X === horzEdge.Bot.X && eNext.Curr.Y === horzEdge.Bot.Y && eNext.WindDelta !== 0 && eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, eNext, this.m_UseFullRange))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(eNext, horzEdge.Bot);\n\t\t\t\t\tthis.AddJoin(op1, op2, horzEdge.Top);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n\t{\n\t\treturn Direction === ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n\t};\n\n\tClipperLib.Clipper.prototype.IsMinima = function (e)\n\t{\n\t\treturn e !== null && (e.Prev.NextInLML !== e) && (e.Next.NextInLML !== e);\n\t};\n\n\tClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n\t{\n\t\treturn (e !== null && e.Top.Y === Y && e.NextInLML === null);\n\t};\n\n\tClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n\t{\n\t\treturn (e.Top.Y === Y && e.NextInLML !== null);\n\t};\n\n\tClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n\t{\n\t\tif ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n\t\t{\n\t\t\treturn e.Next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n\t\t\t{\n\t\t\t\treturn e.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetMaximaPairEx = function (e)\n\t{\n\t\t//as above but returns null if MaxPair isn't in AEL (unless it's horizontal)\n\t\tvar result = this.GetMaximaPair(e);\n\t\tif (result === null || result.OutIdx === ClipperLib.ClipperBase.Skip ||\n\t\t\t((result.NextInAEL === result.PrevInAEL) && !ClipperLib.ClipperBase.IsHorizontal(result)))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t\treturn true;\n\t\ttry\n\t\t{\n\t\t\tthis.BuildIntersectList(topY);\n\t\t\tif (this.m_IntersectList.length === 0)\n\t\t\t\treturn true;\n\t\t\tif (this.m_IntersectList.length === 1 || this.FixupIntersectionOrder())\n\t\t\t\tthis.ProcessIntersectList();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tcatch ($$e2)\n\t\t{\n\t\t\tthis.m_SortedEdges = null;\n\t\t\tthis.m_IntersectList.length = 0;\n\t\t\tClipperLib.Error(\"ProcessIntersections error\");\n\t\t}\n\t\tthis.m_SortedEdges = null;\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t\treturn;\n\t\t//prepare for sorting ...\n\t\tvar e = this.m_ActiveEdges;\n\t\t//console.log(JSON.stringify(JSON.decycle( e )));\n\t\tthis.m_SortedEdges = e;\n\t\twhile (e !== null)\n\t\t{\n\t\t\te.PrevInSEL = e.PrevInAEL;\n\t\t\te.NextInSEL = e.NextInAEL;\n\t\t\te.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t\t\te = e.NextInAEL;\n\t\t}\n\t\t//bubblesort ...\n\t\tvar isModified = true;\n\t\twhile (isModified && this.m_SortedEdges !== null)\n\t\t{\n\t\t\tisModified = false;\n\t\t\te = this.m_SortedEdges;\n\t\t\twhile (e.NextInSEL !== null)\n\t\t\t{\n\t\t\t\tvar eNext = e.NextInSEL;\n\t\t\t\tvar pt = new ClipperLib.IntPoint0();\n\t\t\t\t//console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n\t\t\t\tif (e.Curr.X > eNext.Curr.X)\n\t\t\t\t{\n\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n\t\t\t\t\tif (pt.Y < topY)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt = new ClipperLib.IntPoint2(ClipperLib.Clipper.TopX(e, topY), topY);\n\t\t\t\t\t}\n\t\t\t\t\tvar newNode = new ClipperLib.IntersectNode();\n\t\t\t\t\tnewNode.Edge1 = e;\n\t\t\t\t\tnewNode.Edge2 = eNext;\n\t\t\t\t\t//newNode.Pt = pt;\n\t\t\t\t\tnewNode.Pt.X = pt.X;\n\t\t\t\t\tnewNode.Pt.Y = pt.Y;\n\t\t\t\t\tif (ClipperLib.use_xyz) newNode.Pt.Z = pt.Z;\n\t\t\t\t\tthis.m_IntersectList.push(newNode);\n\t\t\t\t\tthis.SwapPositionsInSEL(e, eNext);\n\t\t\t\t\tisModified = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\te = eNext;\n\t\t\t}\n\t\t\tif (e.PrevInSEL !== null)\n\t\t\t\te.PrevInSEL.NextInSEL = null;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.m_SortedEdges = null;\n\t};\n\n\tClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n\t{\n\t\treturn (inode.Edge1.NextInSEL === inode.Edge2) || (inode.Edge1.PrevInSEL === inode.Edge2);\n\t};\n\n\tClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n\t{\n\t\t//the following typecast is safe because the differences in Pt.Y will\n\t\t//be limited to the height of the scanbeam.\n\t\treturn (node2.Pt.Y - node1.Pt.Y);\n\t};\n\n\tClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n\t{\n\t\t//pre-condition: intersections are sorted bottom-most first.\n\t\t//Now it's crucial that intersections are made only between adjacent edges,\n\t\t//so to ensure this the order of intersections may need adjusting ...\n\t\tthis.m_IntersectList.sort(this.m_IntersectNodeComparer);\n\t\tthis.CopyAELToSEL();\n\t\tvar cnt = this.m_IntersectList.length;\n\t\tfor (var i = 0; i < cnt; i++)\n\t\t{\n\t\t\tif (!this.EdgesAdjacent(this.m_IntersectList[i]))\n\t\t\t{\n\t\t\t\tvar j = i + 1;\n\t\t\t\twhile (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n\t\t\t\t\tj++;\n\t\t\t\tif (j === cnt)\n\t\t\t\t\treturn false;\n\t\t\t\tvar tmp = this.m_IntersectList[i];\n\t\t\t\tthis.m_IntersectList[i] = this.m_IntersectList[j];\n\t\t\t\tthis.m_IntersectList[j] = tmp;\n\t\t\t}\n\t\t\tthis.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n\t\t{\n\t\t\tvar iNode = this.m_IntersectList[i];\n\t\t\tthis.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n\t\t\tthis.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n\t\t}\n\t\tthis.m_IntersectList.length = 0;\n\t};\n\n\t/*\n\t--------------------------------\n\tRound speedtest: http://jsperf.com/fastest-round\n\t--------------------------------\n\t*/\n\tvar R1 = function (a)\n\t{\n\t\treturn a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n\t};\n\n\tvar R2 = function (a)\n\t{\n\t\treturn a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n\t};\n\n\tvar R3 = function (a)\n\t{\n\t\treturn a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n\t};\n\n\tvar R4 = function (a)\n\t{\n\t\tif (a < 0)\n\t\t{\n\t\t\ta -= 0.5;\n\t\t\treturn a < -2147483648 ? Math.ceil(a) : a | 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta += 0.5;\n\t\t\treturn a > 2147483647 ? Math.floor(a) : a | 0;\n\t\t}\n\t};\n\n\tif (browser.msie) ClipperLib.Clipper.Round = R1;\n\telse if (browser.chromium) ClipperLib.Clipper.Round = R3;\n\telse if (browser.safari) ClipperLib.Clipper.Round = R4;\n\telse ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n\tClipperLib.Clipper.TopX = function (edge, currentY)\n\t{\n\t\t//if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n\t\t//if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n\t\tif (currentY === edge.Top.Y)\n\t\t\treturn edge.Top.X;\n\t\treturn edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n\t};\n\n\tClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n\t{\n\t\tip.X = 0;\n\t\tip.Y = 0;\n\t\tvar b1, b2;\n\t\t//nb: with very large coordinate values, it's possible for SlopesEqual() to\n\t\t//return false but for the edge.Dx value be equal due to double precision rounding.\n\t\tif (edge1.Dx === edge2.Dx)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\treturn;\n\t\t}\n\t\tif (edge1.Delta.X === 0)\n\t\t{\n\t\t\tip.X = edge1.Bot.X;\n\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(edge2))\n\t\t\t{\n\t\t\t\tip.Y = edge2.Bot.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n\t\t\t\tip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n\t\t\t}\n\t\t}\n\t\telse if (edge2.Delta.X === 0)\n\t\t{\n\t\t\tip.X = edge2.Bot.X;\n\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(edge1))\n\t\t\t{\n\t\t\t\tip.Y = edge1.Bot.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n\t\t\t\tip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n\t\t\tb2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n\t\t\tvar q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n\t\t\tip.Y = ClipperLib.Clipper.Round(q);\n\t\t\tif (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n\t\t}\n\t\tif (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n\t\t{\n\t\t\tif (edge1.Top.Y > edge2.Top.Y)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Top.Y;\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n\t\t\t\treturn ip.X < edge1.Top.X;\n\t\t\t}\n\t\t\telse\n\t\t\t\tip.Y = edge2.Top.Y;\n\t\t\tif (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t}\n\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\tif (ip.Y > edge1.Curr.Y)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n\t{\n\t\tvar e = this.m_ActiveEdges;\n\n\t\twhile (e !== null)\n\t\t{\n\t\t\t//1. process maxima, treating them as if they're 'bent' horizontal edges,\n\t\t\t//   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n\t\t\tvar IsMaximaEdge = this.IsMaxima(e, topY);\n\t\t\tif (IsMaximaEdge)\n\t\t\t{\n\t\t\t\tvar eMaxPair = this.GetMaximaPairEx(e);\n\t\t\t\tIsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n\t\t\t}\n\t\t\tif (IsMaximaEdge)\n\t\t\t{\n\t\t\t\tif (this.StrictlySimple)\n\t\t\t\t{\n\t\t\t\t\tthis.InsertMaxima(e.Top.X);\n\t\t\t\t}\n\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\tthis.DoMaxima(e);\n\t\t\t\tif (ePrev === null)\n\t\t\t\t\te = this.m_ActiveEdges;\n\t\t\t\telse\n\t\t\t\t\te = ePrev.NextInAEL;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n\t\t\t\tif (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n\t\t\t\t{\n\t\t\t\t\te = this.UpdateEdgeIntoAEL(e);\n\t\t\t\t\tif (e.OutIdx >= 0)\n\t\t\t\t\t\tthis.AddOutPt(e, e.Bot);\n\t\t\t\t\tthis.AddEdgeToSEL(e);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\te.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t\t\t\t\te.Curr.Y = topY;\n\t\t\t\t}\n\n\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t{\n\t\t\t\t\tif (e.Top.Y === topY) e.Curr.Z = e.Top.Z;\n\t\t\t\t\telse if (e.Bot.Y === topY) e.Curr.Z = e.Bot.Z;\n\t\t\t\t\telse e.Curr.Z = 0;\n\t\t\t\t}\n\n\t\t\t\t//When StrictlySimple and 'e' is being touched by another edge, then\n\t\t\t\t//make sure both edges have a vertex here ...\n\t\t\t\tif (this.StrictlySimple)\n\t\t\t\t{\n\t\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\t\tif ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n\t\t\t\t\t\t(ePrev.OutIdx >= 0) && (ePrev.Curr.X === e.Curr.X) &&\n\t\t\t\t\t\t(ePrev.WindDelta !== 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ip = new ClipperLib.IntPoint1(e.Curr);\n\n\t\t\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar op = this.AddOutPt(ePrev, ip);\n\t\t\t\t\t\tvar op2 = this.AddOutPt(e, ip);\n\t\t\t\t\t\tthis.AddJoin(op, op2, ip); //StrictlySimple (type-3) join\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t\t//3. Process horizontals at the Top of the scanbeam ...\n\t\tthis.ProcessHorizontals();\n\t\tthis.m_Maxima = null;\n\t\t//4. Promote intermediate vertices ...\n\t\te = this.m_ActiveEdges;\n\t\twhile (e !== null)\n\t\t{\n\t\t\tif (this.IsIntermediate(e, topY))\n\t\t\t{\n\t\t\t\tvar op = null;\n\t\t\t\tif (e.OutIdx >= 0)\n\t\t\t\t\top = this.AddOutPt(e, e.Top);\n\t\t\t\te = this.UpdateEdgeIntoAEL(e);\n\t\t\t\t//if output polygons share an edge, they'll need joining later ...\n\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\tvar eNext = e.NextInAEL;\n\n\t\t\t\tif (ePrev !== null && ePrev.Curr.X === e.Bot.X && ePrev.Curr.Y === e.Bot.Y && op !== null && ePrev.OutIdx >= 0 && ePrev.Curr.Y === ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, ePrev.Curr, ePrev.Top, this.m_UseFullRange) && (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(ePrev2, e.Bot);\n\t\t\t\t\tthis.AddJoin(op, op2, e.Top);\n\t\t\t\t}\n\t\t\t\telse if (eNext !== null && eNext.Curr.X === e.Bot.X && eNext.Curr.Y === e.Bot.Y && op !== null && eNext.OutIdx >= 0 && eNext.Curr.Y === eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, eNext.Curr, eNext.Top, this.m_UseFullRange) && (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(eNext, e.Bot);\n\t\t\t\t\tthis.AddJoin(op, op2, e.Top);\n\t\t\t\t}\n\t\t\t}\n\t\t\te = e.NextInAEL;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DoMaxima = function (e)\n\t{\n\t\tvar eMaxPair = this.GetMaximaPairEx(e);\n\t\tif (eMaxPair === null)\n\t\t{\n\t\t\tif (e.OutIdx >= 0)\n\t\t\t\tthis.AddOutPt(e, e.Top);\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\treturn;\n\t\t}\n\t\tvar eNext = e.NextInAEL;\n\t\twhile (eNext !== null && eNext !== eMaxPair)\n\t\t{\n\t\t\tthis.IntersectEdges(e, eNext, e.Top);\n\t\t\tthis.SwapPositionsInAEL(e, eNext);\n\t\t\teNext = e.NextInAEL;\n\t\t}\n\t\tif (e.OutIdx === -1 && eMaxPair.OutIdx === -1)\n\t\t{\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n\t\t{\n\t\t\tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse if (ClipperLib.use_lines && e.WindDelta === 0)\n\t\t{\n\t\t\tif (e.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e, e.Top);\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tif (eMaxPair.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(eMaxPair, e.Top);\n\t\t\t\teMaxPair.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse\n\t\t\tClipperLib.Error(\"DoMaxima error\");\n\t};\n\n\tClipperLib.Clipper.ReversePaths = function (polys)\n\t{\n\t\tfor (var i = 0, len = polys.length; i < len; i++)\n\t\t\tpolys[i].reverse();\n\t};\n\n\tClipperLib.Clipper.Orientation = function (poly)\n\t{\n\t\treturn ClipperLib.Clipper.Area(poly) >= 0;\n\t};\n\n\tClipperLib.Clipper.prototype.PointCount = function (pts)\n\t{\n\t\tif (pts === null)\n\t\t\treturn 0;\n\t\tvar result = 0;\n\t\tvar p = pts;\n\t\tdo {\n\t\t\tresult++;\n\t\t\tp = p.Next;\n\t\t}\n\t\twhile (p !== pts)\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.BuildResult = function (polyg)\n\t{\n\t\tClipperLib.Clear(polyg);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts === null)\n\t\t\t\tcontinue;\n\t\t\tvar p = outRec.Pts.Prev;\n\t\t\tvar cnt = this.PointCount(p);\n\t\t\tif (cnt < 2)\n\t\t\t\tcontinue;\n\t\t\tvar pg = new Array(cnt);\n\t\t\tfor (var j = 0; j < cnt; j++)\n\t\t\t{\n\t\t\t\tpg[j] = p.Pt;\n\t\t\t\tp = p.Prev;\n\t\t\t}\n\t\t\tpolyg.push(pg);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n\t{\n\t\tpolytree.Clear();\n\t\t//add each output polygon/contour to polytree ...\n\t\t//polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tvar cnt = this.PointCount(outRec.Pts);\n\t\t\tif ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n\t\t\t\tcontinue;\n\t\t\tthis.FixHoleLinkage(outRec);\n\t\t\tvar pn = new ClipperLib.PolyNode();\n\t\t\tpolytree.m_AllPolys.push(pn);\n\t\t\toutRec.PolyNode = pn;\n\t\t\tpn.m_polygon.length = cnt;\n\t\t\tvar op = outRec.Pts.Prev;\n\t\t\tfor (var j = 0; j < cnt; j++)\n\t\t\t{\n\t\t\t\tpn.m_polygon[j] = op.Pt;\n\t\t\t\top = op.Prev;\n\t\t\t}\n\t\t}\n\t\t//fixup PolyNode links etc ...\n\t\t//polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.PolyNode === null)\n\t\t\t\tcontinue;\n\t\t\telse if (outRec.IsOpen)\n\t\t\t{\n\t\t\t\toutRec.PolyNode.IsOpen = true;\n\t\t\t\tpolytree.AddChild(outRec.PolyNode);\n\t\t\t}\n\t\t\telse if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode !== null)\n\t\t\t\toutRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n\t\t\telse\n\t\t\t\tpolytree.AddChild(outRec.PolyNode);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixupOutPolyline = function (outRec)\n\t{\n\t\tvar pp = outRec.Pts;\n\t\tvar lastPP = pp.Prev;\n\t\twhile (pp !== lastPP)\n\t\t{\n\t\t\tpp = pp.Next;\n\t\t\tif (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt))\n\t\t\t{\n\t\t\t\tif (pp === lastPP)\n\t\t\t\t{\n\t\t\t\t\tlastPP = pp.Prev;\n\t\t\t\t}\n\t\t\t\tvar tmpPP = pp.Prev;\n\t\t\t\ttmpPP.Next = pp.Next;\n\t\t\t\tpp.Next.Prev = tmpPP;\n\t\t\t\tpp = tmpPP;\n\t\t\t}\n\t\t}\n\t\tif (pp === pp.Prev)\n\t\t{\n\t\t\toutRec.Pts = null;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n\t{\n\t\t//FixupOutPolygon() - removes duplicate points and simplifies consecutive\n\t\t//parallel edges by removing the middle vertex.\n\t\tvar lastOK = null;\n\t\toutRec.BottomPt = null;\n\t\tvar pp = outRec.Pts;\n\t\tvar preserveCol = this.PreserveCollinear || this.StrictlySimple;\n\t\tfor (;;)\n\t\t{\n\t\t\tif (pp.Prev === pp || pp.Prev === pp.Next)\n\t\t\t{\n\t\t\t\toutRec.Pts = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//test for duplicate points and collinear edges ...\n\t\t\tif ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) || (ClipperLib.ClipperBase.SlopesEqual4(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) && (!preserveCol || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n\t\t\t{\n\t\t\t\tlastOK = null;\n\t\t\t\tpp.Prev.Next = pp.Next;\n\t\t\t\tpp.Next.Prev = pp.Prev;\n\t\t\t\tpp = pp.Prev;\n\t\t\t}\n\t\t\telse if (pp === lastOK)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (lastOK === null)\n\t\t\t\t\tlastOK = pp;\n\t\t\t\tpp = pp.Next;\n\t\t\t}\n\t\t}\n\t\toutRec.Pts = pp;\n\t};\n\n\tClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n\t{\n\t\tvar result = new ClipperLib.OutPt();\n\t\t//result.Pt = outPt.Pt;\n\t\tresult.Pt.X = outPt.Pt.X;\n\t\tresult.Pt.Y = outPt.Pt.Y;\n\t\tif (ClipperLib.use_xyz) result.Pt.Z = outPt.Pt.Z;\n\t\tresult.Idx = outPt.Idx;\n\t\tif (InsertAfter)\n\t\t{\n\t\t\tresult.Next = outPt.Next;\n\t\t\tresult.Prev = outPt;\n\t\t\toutPt.Next.Prev = result;\n\t\t\toutPt.Next = result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.Prev = outPt.Prev;\n\t\t\tresult.Next = outPt;\n\t\t\toutPt.Prev.Next = result;\n\t\t\toutPt.Prev = result;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n\t{\n\t\tif (a1 < a2)\n\t\t{\n\t\t\tif (b1 < b2)\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a1, b1);\n\t\t\t\t$val.Right = Math.min(a2, b2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a1, b2);\n\t\t\t\t$val.Right = Math.min(a2, b1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b1 < b2)\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a2, b1);\n\t\t\t\t$val.Right = Math.min(a1, b2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a2, b2);\n\t\t\t\t$val.Right = Math.min(a1, b1);\n\t\t\t}\n\t\t}\n\t\treturn $val.Left < $val.Right;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n\t{\n\t\tvar Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t\tvar Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t\tif (Dir1 === Dir2)\n\t\t\treturn false;\n\t\t//When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n\t\t//want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n\t\t//So, to facilitate this while inserting Op1b and Op2b ...\n\t\t//when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n\t\t//otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n\t\tif (Dir1 === ClipperLib.Direction.dLeftToRight)\n\t\t{\n\t\t\twhile (op1.Next.Pt.X <= Pt.X &&\n\t\t\t\top1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n\t\t\t\top1 = op1.Next;\n\t\t\tif (DiscardLeft && (op1.Pt.X !== Pt.X))\n\t\t\t\top1 = op1.Next;\n\t\t\top1b = this.DupOutPt(op1, !DiscardLeft);\n\t\t\tif (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t\t\t{\n\t\t\t\top1 = op1b;\n\t\t\t\t//op1.Pt = Pt;\n\t\t\t\top1.Pt.X = Pt.X;\n\t\t\t\top1.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n\t\t\t\top1b = this.DupOutPt(op1, !DiscardLeft);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (op1.Next.Pt.X >= Pt.X &&\n\t\t\t\top1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n\t\t\t\top1 = op1.Next;\n\t\t\tif (!DiscardLeft && (op1.Pt.X !== Pt.X))\n\t\t\t\top1 = op1.Next;\n\t\t\top1b = this.DupOutPt(op1, DiscardLeft);\n\t\t\tif (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t\t\t{\n\t\t\t\top1 = op1b;\n\t\t\t\t//op1.Pt = Pt;\n\t\t\t\top1.Pt.X = Pt.X;\n\t\t\t\top1.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n\t\t\t\top1b = this.DupOutPt(op1, DiscardLeft);\n\t\t\t}\n\t\t}\n\t\tif (Dir2 === ClipperLib.Direction.dLeftToRight)\n\t\t{\n\t\t\twhile (op2.Next.Pt.X <= Pt.X &&\n\t\t\t\top2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n\t\t\t\top2 = op2.Next;\n\t\t\tif (DiscardLeft && (op2.Pt.X !== Pt.X))\n\t\t\t\top2 = op2.Next;\n\t\t\top2b = this.DupOutPt(op2, !DiscardLeft);\n\t\t\tif (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t\t\t{\n\t\t\t\top2 = op2b;\n\t\t\t\t//op2.Pt = Pt;\n\t\t\t\top2.Pt.X = Pt.X;\n\t\t\t\top2.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n\t\t\t\top2b = this.DupOutPt(op2, !DiscardLeft);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (op2.Next.Pt.X >= Pt.X &&\n\t\t\t\top2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n\t\t\t\top2 = op2.Next;\n\t\t\tif (!DiscardLeft && (op2.Pt.X !== Pt.X))\n\t\t\t\top2 = op2.Next;\n\t\t\top2b = this.DupOutPt(op2, DiscardLeft);\n\t\t\tif (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t\t\t{\n\t\t\t\top2 = op2b;\n\t\t\t\t//op2.Pt = Pt;\n\t\t\t\top2.Pt.X = Pt.X;\n\t\t\t\top2.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n\t\t\t\top2b = this.DupOutPt(op2, DiscardLeft);\n\t\t\t}\n\t\t}\n\t\tif ((Dir1 === ClipperLib.Direction.dLeftToRight) === DiscardLeft)\n\t\t{\n\t\t\top1.Prev = op2;\n\t\t\top2.Next = op1;\n\t\t\top1b.Next = op2b;\n\t\t\top2b.Prev = op1b;\n\t\t}\n\t\telse\n\t\t{\n\t\t\top1.Next = op2;\n\t\t\top2.Prev = op1;\n\t\t\top1b.Prev = op2b;\n\t\t\top2b.Next = op1b;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n\t{\n\t\tvar op1 = j.OutPt1,\n\t\t\top1b = new ClipperLib.OutPt();\n\t\tvar op2 = j.OutPt2,\n\t\t\top2b = new ClipperLib.OutPt();\n\t\t//There are 3 kinds of joins for output polygons ...\n\t\t//1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are vertices anywhere\n\t\t//along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n\t\t//2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n\t\t//location at the Bottom of the overlapping segment (& Join.OffPt is above).\n\t\t//3. StrictlySimple joins where edges touch but are not collinear and where\n\t\t//Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n\t\tvar isHorizontal = (j.OutPt1.Pt.Y === j.OffPt.Y);\n\t\tif (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n\t\t{\n\t\t\t//Strictly Simple join ...\n\t\t\tif (outRec1 !== outRec2) return false;\n\n\t\t\top1b = j.OutPt1.Next;\n\t\t\twhile (op1b !== op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n\t\t\t\top1b = op1b.Next;\n\t\t\tvar reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n\t\t\top2b = j.OutPt2.Next;\n\t\t\twhile (op2b !== op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n\t\t\t\top2b = op2b.Next;\n\t\t\tvar reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n\t\t\tif (reverse1 === reverse2)\n\t\t\t\treturn false;\n\t\t\tif (reverse1)\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, false);\n\t\t\t\top2b = this.DupOutPt(op2, true);\n\t\t\t\top1.Prev = op2;\n\t\t\t\top2.Next = op1;\n\t\t\t\top1b.Next = op2b;\n\t\t\t\top2b.Prev = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, true);\n\t\t\t\top2b = this.DupOutPt(op2, false);\n\t\t\t\top1.Next = op2;\n\t\t\t\top2.Prev = op1;\n\t\t\t\top1b.Prev = op2b;\n\t\t\t\top2b.Next = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (isHorizontal)\n\t\t{\n\t\t\t//treat horizontal joins differently to non-horizontal joins since with\n\t\t\t//them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n\t\t\t//may be anywhere along the horizontal edge.\n\t\t\top1b = op1;\n\t\t\twhile (op1.Prev.Pt.Y === op1.Pt.Y && op1.Prev !== op1b && op1.Prev !== op2)\n\t\t\t\top1 = op1.Prev;\n\t\t\twhile (op1b.Next.Pt.Y === op1b.Pt.Y && op1b.Next !== op1 && op1b.Next !== op2)\n\t\t\t\top1b = op1b.Next;\n\t\t\tif (op1b.Next === op1 || op1b.Next === op2)\n\t\t\t\treturn false;\n\t\t\t//a flat 'polygon'\n\t\t\top2b = op2;\n\t\t\twhile (op2.Prev.Pt.Y === op2.Pt.Y && op2.Prev !== op2b && op2.Prev !== op1b)\n\t\t\t\top2 = op2.Prev;\n\t\t\twhile (op2b.Next.Pt.Y === op2b.Pt.Y && op2b.Next !== op2 && op2b.Next !== op1)\n\t\t\t\top2b = op2b.Next;\n\t\t\tif (op2b.Next === op2 || op2b.Next === op1)\n\t\t\t\treturn false;\n\t\t\t//a flat 'polygon'\n\t\t\t//Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n\t\t\tvar $val = {\n\t\t\t\tLeft: null,\n\t\t\t\tRight: null\n\t\t\t};\n\n\t\t\tif (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n\t\t\t\treturn false;\n\t\t\tvar Left = $val.Left;\n\t\t\tvar Right = $val.Right;\n\n\t\t\t//DiscardLeftSide: when overlapping edges are joined, a spike will created\n\t\t\t//which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n\t\t\t//on the discard Side as either may still be needed for other joins ...\n\t\t\tvar Pt = new ClipperLib.IntPoint0();\n\t\t\tvar DiscardLeftSide;\n\t\t\tif (op1.Pt.X >= Left && op1.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op1.Pt;\n\t\t\t\tPt.X = op1.Pt.X;\n\t\t\t\tPt.Y = op1.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op1.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n\t\t\t}\n\t\t\telse if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op2.Pt;\n\t\t\t\tPt.X = op2.Pt.X;\n\t\t\t\tPt.Y = op2.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op2.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n\t\t\t}\n\t\t\telse if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op1b.Pt;\n\t\t\t\tPt.X = op1b.Pt.X;\n\t\t\t\tPt.Y = op1b.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op1b.Pt.Z;\n\t\t\t\tDiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Pt = op2b.Pt;\n\t\t\t\tPt.X = op2b.Pt.X;\n\t\t\t\tPt.Y = op2b.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op2b.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n\t\t\t}\n\t\t\tj.OutPt1 = op1;\n\t\t\tj.OutPt2 = op2;\n\t\t\treturn this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nb: For non-horizontal joins ...\n\t\t\t//    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n\t\t\t//    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n\t\t\t//make sure the polygons are correctly oriented ...\n\t\t\top1b = op1.Next;\n\t\t\twhile ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n\t\t\t\top1b = op1b.Next;\n\t\t\tvar Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n\t\t\tif (Reverse1)\n\t\t\t{\n\t\t\t\top1b = op1.Prev;\n\t\t\t\twhile ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n\t\t\t\t\top1b = op1b.Prev;\n\n\t\t\t\tif ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\top2b = op2.Next;\n\t\t\twhile ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n\t\t\t\top2b = op2b.Next;\n\n\t\t\tvar Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n\t\t\tif (Reverse2)\n\t\t\t{\n\t\t\t\top2b = op2.Prev;\n\t\t\t\twhile ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n\t\t\t\t\top2b = op2b.Prev;\n\n\t\t\t\tif ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ((op1b === op1) || (op2b === op2) || (op1b === op2b) ||\n\t\t\t\t((outRec1 === outRec2) && (Reverse1 === Reverse2)))\n\t\t\t\treturn false;\n\t\t\tif (Reverse1)\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, false);\n\t\t\t\top2b = this.DupOutPt(op2, true);\n\t\t\t\top1.Prev = op2;\n\t\t\t\top2.Next = op1;\n\t\t\t\top1b.Next = op2b;\n\t\t\t\top2b.Prev = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, true);\n\t\t\t\top2b = this.DupOutPt(op2, false);\n\t\t\t\top1.Next = op2;\n\t\t\t\top2.Prev = op1;\n\t\t\t\top1b.Prev = op2b;\n\t\t\t\top2b.Next = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.GetBounds = function (paths)\n\t{\n\t\tvar i = 0,\n\t\t\tcnt = paths.length;\n\t\twhile (i < cnt && paths[i].length === 0) i++;\n\t\tif (i === cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n\t\tvar result = new ClipperLib.IntRect();\n\t\tresult.left = paths[i][0].X;\n\t\tresult.right = result.left;\n\t\tresult.top = paths[i][0].Y;\n\t\tresult.bottom = result.top;\n\t\tfor (; i < cnt; i++)\n\t\t\tfor (var j = 0, jlen = paths[i].length; j < jlen; j++)\n\t\t\t{\n\t\t\t\tif (paths[i][j].X < result.left) result.left = paths[i][j].X;\n\t\t\t\telse if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n\t\t\t\tif (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n\t\t\t\telse if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n\t\t\t}\n\t\treturn result;\n\t}\n\tClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n\t{\n\t\tvar opStart = ops;\n\t\tvar result = new ClipperLib.IntRect();\n\t\tresult.left = ops.Pt.X;\n\t\tresult.right = ops.Pt.X;\n\t\tresult.top = ops.Pt.Y;\n\t\tresult.bottom = ops.Pt.Y;\n\t\tops = ops.Next;\n\t\twhile (ops !== opStart)\n\t\t{\n\t\t\tif (ops.Pt.X < result.left)\n\t\t\t\tresult.left = ops.Pt.X;\n\t\t\tif (ops.Pt.X > result.right)\n\t\t\t\tresult.right = ops.Pt.X;\n\t\t\tif (ops.Pt.Y < result.top)\n\t\t\t\tresult.top = ops.Pt.Y;\n\t\t\tif (ops.Pt.Y > result.bottom)\n\t\t\t\tresult.bottom = ops.Pt.Y;\n\t\t\tops = ops.Next;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.PointInPolygon = function (pt, path)\n\t{\n\t\t//returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t\t//http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t\tvar result = 0,\n\t\t\tcnt = path.length;\n\t\tif (cnt < 3)\n\t\t\treturn 0;\n\t\tvar ip = path[0];\n\t\tfor (var i = 1; i <= cnt; ++i)\n\t\t{\n\t\t\tvar ipNext = (i === cnt ? path[0] : path[i]);\n\t\t\tif (ipNext.Y === pt.Y)\n\t\t\t{\n\t\t\t\tif ((ipNext.X === pt.X) || (ip.Y === pt.Y && ((ipNext.X > pt.X) === (ip.X < pt.X))))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ((ip.Y < pt.Y) !== (ipNext.Y < pt.Y))\n\t\t\t{\n\t\t\t\tif (ip.X >= pt.X)\n\t\t\t\t{\n\t\t\t\t\tif (ipNext.X > pt.X)\n\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\telse if ((d > 0) === (ipNext.Y > ip.Y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (ipNext.X > pt.X)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\telse if ((d > 0) === (ipNext.Y > ip.Y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tip = ipNext;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n\t{\n\t\t//returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\tvar result = 0;\n\t\tvar startOp = op;\n\t\tvar ptx = pt.X,\n\t\t\tpty = pt.Y;\n\t\tvar poly0x = op.Pt.X,\n\t\t\tpoly0y = op.Pt.Y;\n\t\tdo {\n\t\t\top = op.Next;\n\t\t\tvar poly1x = op.Pt.X,\n\t\t\t\tpoly1y = op.Pt.Y;\n\t\t\tif (poly1y === pty)\n\t\t\t{\n\t\t\t\tif ((poly1x === ptx) || (poly0y === pty && ((poly1x > ptx) === (poly0x < ptx))))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ((poly0y < pty) !== (poly1y < pty))\n\t\t\t{\n\t\t\t\tif (poly0x >= ptx)\n\t\t\t\t{\n\t\t\t\t\tif (poly1x > ptx)\n\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\tif ((d > 0) === (poly1y > poly0y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (poly1x > ptx)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\tif ((d > 0) === (poly1y > poly0y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpoly0x = poly1x;\n\t\t\tpoly0y = poly1y;\n\t\t} while (startOp !== op);\n\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n\t{\n\t\tvar op = outPt1;\n\t\tdo {\n\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n\t\t\tvar res = this.PointInPolygon(op.Pt, outPt2);\n\t\t\tif (res >= 0)\n\t\t\t\treturn res > 0;\n\t\t\top = op.Next;\n\t\t}\n\t\twhile (op !== outPt1)\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n\t{\n\t\tvar outRec, firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (outRec.Pts !== null && firstLeft === OldOutRec)\n\t\t\t{\n\t\t\t\tif (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n\t\t\t\t\toutRec.FirstLeft = NewOutRec;\n\t\t\t}\n\t\t}\n\t}\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts2 = function (innerOutRec, outerOutRec)\n\t{\n\t\t//A polygon has split into two such that one is now the inner of the other.\n\t\t//It's possible that these polygons now wrap around other polygons, so check\n\t\t//every polygon that's also contained by OuterOutRec's FirstLeft container\n\t\t//(including nil) to see if they've become inner to the new inner polygon ...\n\t\tvar orfl = outerOutRec.FirstLeft;\n\t\tvar outRec, firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts === null || outRec === outerOutRec || outRec === innerOutRec)\n\t\t\t\tcontinue;\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (firstLeft !== orfl && firstLeft !== innerOutRec && firstLeft !== outerOutRec)\n\t\t\t\tcontinue;\n\t\t\tif (this.Poly2ContainsPoly1(outRec.Pts, innerOutRec.Pts))\n\t\t\t\toutRec.FirstLeft = innerOutRec;\n\t\t\telse if (this.Poly2ContainsPoly1(outRec.Pts, outerOutRec.Pts))\n\t\t\t\toutRec.FirstLeft = outerOutRec;\n\t\t\telse if (outRec.FirstLeft === innerOutRec || outRec.FirstLeft === outerOutRec)\n\t\t\t\toutRec.FirstLeft = orfl;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts3 = function (OldOutRec, NewOutRec)\n\t{\n\t\t//same as FixupFirstLefts1 but doesn't call Poly2ContainsPoly1()\n\t\tvar outRec;\n\t\tvar firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (outRec.Pts !== null && firstLeft === OldOutRec)\n\t\t\t\toutRec.FirstLeft = NewOutRec;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n\t{\n\t\twhile (FirstLeft !== null && FirstLeft.Pts === null)\n\t\t\tFirstLeft = FirstLeft.FirstLeft;\n\t\treturn FirstLeft;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n\t\t{\n\t\t\tvar join = this.m_Joins[i];\n\t\t\tvar outRec1 = this.GetOutRec(join.OutPt1.Idx);\n\t\t\tvar outRec2 = this.GetOutRec(join.OutPt2.Idx);\n\t\t\tif (outRec1.Pts === null || outRec2.Pts === null)\n\t\t\t\tcontinue;\n\n\t\t\tif (outRec1.IsOpen || outRec2.IsOpen)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//get the polygon fragment with the correct hole state (FirstLeft)\n\t\t\t//before calling JoinPoints() ...\n\t\t\tvar holeStateRec;\n\t\t\tif (outRec1 === outRec2)\n\t\t\t\tholeStateRec = outRec1;\n\t\t\telse if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n\t\t\t\tholeStateRec = outRec2;\n\t\t\telse if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n\t\t\t\tholeStateRec = outRec1;\n\t\t\telse\n\t\t\t\tholeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n\t\t\tif (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n\t\t\tif (outRec1 === outRec2)\n\t\t\t{\n\t\t\t\t//instead of joining two polygons, we've just created a new one by\n\t\t\t\t//splitting one polygon into two.\n\t\t\t\toutRec1.Pts = join.OutPt1;\n\t\t\t\toutRec1.BottomPt = null;\n\t\t\t\toutRec2 = this.CreateOutRec();\n\t\t\t\toutRec2.Pts = join.OutPt2;\n\t\t\t\t//update all OutRec2.Pts Idx's ...\n\t\t\t\tthis.UpdateOutPtIdxs(outRec2);\n\n\t\t\t\tif (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n\t\t\t\t{\n\t\t\t\t\t//outRec1 contains outRec2 ...\n\t\t\t\t\toutRec2.IsHole = !outRec1.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1;\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts2(outRec2, outRec1);\n\t\t\t\t\tif ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec2) > 0))\n\t\t\t\t\t\tthis.ReversePolyPtLinks(outRec2.Pts);\n\t\t\t\t}\n\t\t\t\telse if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n\t\t\t\t{\n\t\t\t\t\t//outRec2 contains outRec1 ...\n\t\t\t\t\toutRec2.IsHole = outRec1.IsHole;\n\t\t\t\t\toutRec1.IsHole = !outRec2.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1.FirstLeft;\n\t\t\t\t\toutRec1.FirstLeft = outRec2;\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts2(outRec1, outRec2);\n\n\t\t\t\t\tif ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec1) > 0))\n\t\t\t\t\t\tthis.ReversePolyPtLinks(outRec1.Pts);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//the 2 polygons are completely separate ...\n\t\t\t\t\toutRec2.IsHole = outRec1.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1.FirstLeft;\n\t\t\t\t\t//fixup FirstLeft pointers that may need reassigning to OutRec2\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts1(outRec1, outRec2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//joined 2 polygons together ...\n\t\t\t\toutRec2.Pts = null;\n\t\t\t\toutRec2.BottomPt = null;\n\t\t\t\toutRec2.Idx = outRec1.Idx;\n\t\t\t\toutRec1.IsHole = holeStateRec.IsHole;\n\t\t\t\tif (holeStateRec === outRec2)\n\t\t\t\t\toutRec1.FirstLeft = outRec2.FirstLeft;\n\t\t\t\toutRec2.FirstLeft = outRec1;\n\t\t\t\t//fixup FirstLeft pointers that may need reassigning to OutRec1\n\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\tthis.FixupFirstLefts3(outRec2, outRec1);\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n\t{\n\t\tvar op = outrec.Pts;\n\t\tdo {\n\t\t\top.Idx = outrec.Idx;\n\t\t\top = op.Prev;\n\t\t}\n\t\twhile (op !== outrec.Pts)\n\t};\n\n\tClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n\t{\n\t\tvar i = 0;\n\t\twhile (i < this.m_PolyOuts.length)\n\t\t{\n\t\t\tvar outrec = this.m_PolyOuts[i++];\n\t\t\tvar op = outrec.Pts;\n\t\t\tif (op === null || outrec.IsOpen)\n\t\t\t\tcontinue;\n\t\t\tdo //for each Pt in Polygon until duplicate found do ...\n\t\t\t{\n\t\t\t\tvar op2 = op.Next;\n\t\t\t\twhile (op2 !== outrec.Pts)\n\t\t\t\t{\n\t\t\t\t\tif ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next !== op && op2.Prev !== op)\n\t\t\t\t\t{\n\t\t\t\t\t\t//split the polygon into two ...\n\t\t\t\t\t\tvar op3 = op.Prev;\n\t\t\t\t\t\tvar op4 = op2.Prev;\n\t\t\t\t\t\top.Prev = op4;\n\t\t\t\t\t\top4.Next = op;\n\t\t\t\t\t\top2.Prev = op3;\n\t\t\t\t\t\top3.Next = op2;\n\t\t\t\t\t\toutrec.Pts = op;\n\t\t\t\t\t\tvar outrec2 = this.CreateOutRec();\n\t\t\t\t\t\toutrec2.Pts = op2;\n\t\t\t\t\t\tthis.UpdateOutPtIdxs(outrec2);\n\t\t\t\t\t\tif (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//OutRec2 is contained by OutRec1 ...\n\t\t\t\t\t\t\toutrec2.IsHole = !outrec.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//OutRec1 is contained by OutRec2 ...\n\t\t\t\t\t\t\toutrec2.IsHole = outrec.IsHole;\n\t\t\t\t\t\t\toutrec.IsHole = !outrec2.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\toutrec.FirstLeft = outrec2;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//the 2 polygons are separate ...\n\t\t\t\t\t\t\toutrec2.IsHole = outrec.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\top2 = op;\n\t\t\t\t\t\t//ie get ready for the next iteration\n\t\t\t\t\t}\n\t\t\t\t\top2 = op2.Next;\n\t\t\t\t}\n\t\t\t\top = op.Next;\n\t\t\t}\n\t\t\twhile (op !== outrec.Pts)\n\t\t}\n\t};\n\n\tClipperLib.Clipper.Area = function (poly)\n\t{\n\t\tif (!Array.isArray(poly))\n\t\t\treturn 0;\n\t\tvar cnt = poly.length;\n\t\tif (cnt < 3)\n\t\t\treturn 0;\n\t\tvar a = 0;\n\t\tfor (var i = 0, j = cnt - 1; i < cnt; ++i)\n\t\t{\n\t\t\ta += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n\t\t\tj = i;\n\t\t}\n\t\treturn -a * 0.5;\n\t};\n\n\tClipperLib.Clipper.prototype.Area = function (op)\n\t{\n\t\tvar opFirst = op;\n\t\tif (op === null) return 0;\n\t\tvar a = 0;\n\t\tdo {\n\t\t\ta = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n\t\t\top = op.Next;\n\t\t} while (op !== opFirst); // && typeof op !== 'undefined');\n\t\treturn a * 0.5;\n\t}\n\n\tClipperLib.Clipper.prototype.Area$1 = function (outRec)\n\t{\n\t\treturn this.Area(outRec.Pts);\n\t};\n\n\tClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n\t{\n\t\tvar result = new Array();\n\t\tvar c = new ClipperLib.Clipper(0);\n\t\tc.StrictlySimple = true;\n\t\tc.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n\t{\n\t\tif (typeof (fillType) === \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tvar result = new Array();\n\t\tvar c = new ClipperLib.Clipper(0);\n\t\tc.StrictlySimple = true;\n\t\tc.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n\t{\n\t\tvar dx = (pt1.X - pt2.X);\n\t\tvar dy = (pt1.Y - pt2.Y);\n\t\treturn (dx * dx + dy * dy);\n\t};\n\n\tClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n\t{\n\t\t//The equation of a line in general form (Ax + By + C = 0)\n\t\t//given 2 points (x¹,y¹) & (x²,y²) is ...\n\t\t//(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n\t\t//A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n\t\t//perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n\t\t//see http://en.wikipedia.org/wiki/Perpendicular_distance\n\t\tvar A = ln1.Y - ln2.Y;\n\t\tvar B = ln2.X - ln1.X;\n\t\tvar C = A * ln1.X + B * ln1.Y;\n\t\tC = A * pt.X + B * pt.Y - C;\n\t\treturn (C * C) / (A * A + B * B);\n\t};\n\n\tClipperLib.Clipper.SlopesNearCollinear = function (pt1, pt2, pt3, distSqrd)\n\t{\n\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t//between the other 2 points is the one that's tested for distance.\n\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t{\n\t\t\tif ((pt1.X > pt2.X) === (pt1.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.X > pt1.X) === (pt2.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((pt1.Y > pt2.Y) === (pt1.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.Y > pt1.Y) === (pt2.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n\t{\n\t\tvar dx = pt1.X - pt2.X;\n\t\tvar dy = pt1.Y - pt2.Y;\n\t\treturn ((dx * dx) + (dy * dy) <= distSqrd);\n\t};\n\n\tClipperLib.Clipper.ExcludeOp = function (op)\n\t{\n\t\tvar result = op.Prev;\n\t\tresult.Next = op.Next;\n\t\top.Next.Prev = result;\n\t\tresult.Idx = 0;\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.CleanPolygon = function (path, distance)\n\t{\n\t\tif (typeof (distance) === \"undefined\") distance = 1.415;\n\t\t//distance = proximity in units/pixels below which vertices will be stripped.\n\t\t//Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n\t\t//both x & y coords within 1 unit, then the second vertex will be stripped.\n\t\tvar cnt = path.length;\n\t\tif (cnt === 0)\n\t\t\treturn new Array();\n\t\tvar outPts = new Array(cnt);\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t\toutPts[i] = new ClipperLib.OutPt();\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t{\n\t\t\toutPts[i].Pt = path[i];\n\t\t\toutPts[i].Next = outPts[(i + 1) % cnt];\n\t\t\toutPts[i].Next.Prev = outPts[i];\n\t\t\toutPts[i].Idx = 0;\n\t\t}\n\t\tvar distSqrd = distance * distance;\n\t\tvar op = outPts[0];\n\t\twhile (op.Idx === 0 && op.Next !== op.Prev)\n\t\t{\n\t\t\tif (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n\t\t\t{\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\telse if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n\t\t\t{\n\t\t\t\tClipperLib.Clipper.ExcludeOp(op.Next);\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt -= 2;\n\t\t\t}\n\t\t\telse if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n\t\t\t{\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top.Idx = 1;\n\t\t\t\top = op.Next;\n\t\t\t}\n\t\t}\n\t\tif (cnt < 3)\n\t\t\tcnt = 0;\n\t\tvar result = new Array(cnt);\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t{\n\t\t\tresult[i] = new ClipperLib.IntPoint1(op.Pt);\n\t\t\top = op.Next;\n\t\t}\n\t\toutPts = null;\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.CleanPolygons = function (polys, distance)\n\t{\n\t\tvar result = new Array(polys.length);\n\t\tfor (var i = 0, ilen = polys.length; i < ilen; i++)\n\t\t\tresult[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n\t{\n\t\tvar delta = (IsClosed ? 1 : 0);\n\t\tvar polyCnt = pattern.length;\n\t\tvar pathCnt = path.length;\n\t\tvar result = new Array();\n\t\tif (IsSum)\n\t\t\tfor (var i = 0; i < pathCnt; i++)\n\t\t\t{\n\t\t\t\tvar p = new Array(polyCnt);\n\t\t\t\tfor (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t\t\t\t\tp[j] = new ClipperLib.IntPoint2(path[i].X + ip.X, path[i].Y + ip.Y);\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\telse\n\t\t\tfor (var i = 0; i < pathCnt; i++)\n\t\t\t{\n\t\t\t\tvar p = new Array(polyCnt);\n\t\t\t\tfor (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t\t\t\t\tp[j] = new ClipperLib.IntPoint2(path[i].X - ip.X, path[i].Y - ip.Y);\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\tvar quads = new Array();\n\t\tfor (var i = 0; i < pathCnt - 1 + delta; i++)\n\t\t\tfor (var j = 0; j < polyCnt; j++)\n\t\t\t{\n\t\t\t\tvar quad = new Array();\n\t\t\t\tquad.push(result[i % pathCnt][j % polyCnt]);\n\t\t\t\tquad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n\t\t\t\tquad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n\t\t\t\tquad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n\t\t\t\tif (!ClipperLib.Clipper.Orientation(quad))\n\t\t\t\t\tquad.reverse();\n\t\t\t\tquads.push(quad);\n\t\t\t}\n\t\treturn quads;\n\t};\n\n\tClipperLib.Clipper.MinkowskiSum = function (pattern, path_or_paths, pathIsClosed)\n\t{\n\t\tif (!(path_or_paths[0] instanceof Array))\n\t\t{\n\t\t\tvar path = path_or_paths;\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar paths = path_or_paths;\n\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t{\n\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tif (pathIsClosed)\n\t\t\t\t{\n\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn solution;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t{\n\t\tvar outPath = new ClipperLib.Path();\n\t\tfor (var i = 0; i < path.length; i++)\n\t\t\toutPath.push(new ClipperLib.IntPoint2(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\treturn outPath;\n\t}\n\n\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t{\n\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\tvar c = new ClipperLib.Clipper();\n\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\treturn paths;\n\t}\n\n\tClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n\t{\n\t\tvar result = new Array();\n\t\t//result.set_Capacity(polytree.get_Total());\n\t\tClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n\t{\n\t\tvar match = true;\n\t\tswitch (nt)\n\t\t{\n\t\tcase ClipperLib.Clipper.NodeType.ntOpen:\n\t\t\treturn;\n\t\tcase ClipperLib.Clipper.NodeType.ntClosed:\n\t\t\tmatch = !polynode.IsOpen;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tif (polynode.m_polygon.length > 0 && match)\n\t\t\tpaths.push(polynode.m_polygon);\n\t\tfor (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n\t\t\tClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n\t};\n\n\tClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n\t{\n\t\tvar result = new ClipperLib.Paths();\n\t\t//result.set_Capacity(polytree.ChildCount());\n\t\tfor (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n\t\t\tif (polytree.Childs()[i].IsOpen)\n\t\t\t\tresult.push(polytree.Childs()[i].m_polygon);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n\t{\n\t\tvar result = new ClipperLib.Paths();\n\t\t//result.set_Capacity(polytree.Total());\n\t\tClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n\t\treturn result;\n\t};\n\n\tInherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n\tClipperLib.Clipper.NodeType = {\n\t\tntAny: 0,\n\t\tntOpen: 1,\n\t\tntClosed: 2\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n\t{\n\t\tif (typeof (miterLimit) === \"undefined\") miterLimit = 2;\n\t\tif (typeof (arcTolerance) === \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\tthis.m_destPolys = new ClipperLib.Paths();\n\t\tthis.m_srcPoly = new ClipperLib.Path();\n\t\tthis.m_destPoly = new ClipperLib.Path();\n\t\tthis.m_normals = new Array();\n\t\tthis.m_delta = 0;\n\t\tthis.m_sinA = 0;\n\t\tthis.m_sin = 0;\n\t\tthis.m_cos = 0;\n\t\tthis.m_miterLim = 0;\n\t\tthis.m_StepsPerRad = 0;\n\t\tthis.m_lowest = new ClipperLib.IntPoint0();\n\t\tthis.m_polyNodes = new ClipperLib.PolyNode();\n\t\tthis.MiterLimit = miterLimit;\n\t\tthis.ArcTolerance = arcTolerance;\n\t\tthis.m_lowest.X = -1;\n\t};\n\n\tClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n\tClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n\tClipperLib.ClipperOffset.prototype.Clear = function ()\n\t{\n\t\tClipperLib.Clear(this.m_polyNodes.Childs());\n\t\tthis.m_lowest.X = -1;\n\t};\n\n\tClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n\tClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n\t{\n\t\tvar highI = path.length - 1;\n\t\tif (highI < 0)\n\t\t\treturn;\n\t\tvar newNode = new ClipperLib.PolyNode();\n\t\tnewNode.m_jointype = joinType;\n\t\tnewNode.m_endtype = endType;\n\t\t//strip duplicate points from path and also get index to the lowest point ...\n\t\tif (endType === ClipperLib.EndType.etClosedLine || endType === ClipperLib.EndType.etClosedPolygon)\n\t\t\twhile (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n\t\t\t\thighI--;\n\t\t//newNode.m_polygon.set_Capacity(highI + 1);\n\t\tnewNode.m_polygon.push(path[0]);\n\t\tvar j = 0,\n\t\t\tk = 0;\n\t\tfor (var i = 1; i <= highI; i++)\n\t\t\tif (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tnewNode.m_polygon.push(path[i]);\n\t\t\t\tif (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y === newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n\t\t\t\t\tk = j;\n\t\t\t}\n\t\tif (endType === ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n\t\tthis.m_polyNodes.AddChild(newNode);\n\t\t//if this path's lowest pt is lower than all the others then update m_lowest\n\t\tif (endType !== ClipperLib.EndType.etClosedPolygon)\n\t\t\treturn;\n\t\tif (this.m_lowest.X < 0)\n\t\t\tthis.m_lowest = new ClipperLib.IntPoint2(this.m_polyNodes.ChildCount() - 1, k);\n\t\telse\n\t\t{\n\t\t\tvar ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n\t\t\tif (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y === ip.Y && newNode.m_polygon[k].X < ip.X))\n\t\t\t\tthis.m_lowest = new ClipperLib.IntPoint2(this.m_polyNodes.ChildCount() - 1, k);\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n\t{\n\t\tfor (var i = 0, ilen = paths.length; i < ilen; i++)\n\t\t\tthis.AddPath(paths[i], joinType, endType);\n\t};\n\n\tClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n\t{\n\t\t//fixup orientations of all closed paths if the orientation of the\n\t\t//closed path with the lowermost vertex is wrong ...\n\t\tif (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n\t\t{\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon || (node.m_endtype === ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n\t\t\t\t\tnode.m_polygon.reverse();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n\t\t\t\t\tnode.m_polygon.reverse();\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n\t{\n\t\tvar dx = (pt2.X - pt1.X);\n\t\tvar dy = (pt2.Y - pt1.Y);\n\t\tif ((dx === 0) && (dy === 0))\n\t\t\treturn new ClipperLib.DoublePoint2(0, 0);\n\t\tvar f = 1 / Math.sqrt(dx * dx + dy * dy);\n\t\tdx *= f;\n\t\tdy *= f;\n\t\treturn new ClipperLib.DoublePoint2(dy, -dx);\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n\t{\n\t\tthis.m_destPolys = new Array();\n\t\tthis.m_delta = delta;\n\t\t//if Zero offset, just copy any CLOSED polygons to m_p and return ...\n\t\tif (ClipperLib.ClipperBase.near_zero(delta))\n\t\t{\n\t\t\t//this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t\t\tthis.m_destPolys.push(node.m_polygon);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t//see offset_triginometry3.svg in the documentation folder ...\n\t\tif (this.MiterLimit > 2)\n\t\t\tthis.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n\t\telse\n\t\t\tthis.m_miterLim = 0.5;\n\t\tvar y;\n\t\tif (this.ArcTolerance <= 0)\n\t\t\ty = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\telse if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n\t\t\ty = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\telse\n\t\t\ty = this.ArcTolerance;\n\t\t//see offset_triginometry2.svg in the documentation folder ...\n\t\tvar steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n\t\tthis.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n\t\tthis.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n\t\tthis.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n\t\tif (delta < 0)\n\t\t\tthis.m_sin = -this.m_sin;\n\t\t//this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t{\n\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\tthis.m_srcPoly = node.m_polygon;\n\t\t\tvar len = this.m_srcPoly.length;\n\t\t\tif (len === 0 || (delta <= 0 && (len < 3 || node.m_endtype !== ClipperLib.EndType.etClosedPolygon)))\n\t\t\t\tcontinue;\n\t\t\tthis.m_destPoly = new Array();\n\t\t\tif (len === 1)\n\t\t\t{\n\t\t\t\tif (node.m_jointype === ClipperLib.JoinType.jtRound)\n\t\t\t\t{\n\t\t\t\t\tvar X = 1,\n\t\t\t\t\t\tY = 0;\n\t\t\t\t\tfor (var j = 1; j <= steps; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t\t\t\t\t\tvar X2 = X;\n\t\t\t\t\t\tX = X * this.m_cos - this.m_sin * Y;\n\t\t\t\t\t\tY = X2 * this.m_sin + Y * this.m_cos;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar X = -1,\n\t\t\t\t\t\tY = -1;\n\t\t\t\t\tfor (var j = 0; j < 4; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t\t\t\t\t\tif (X < 0)\n\t\t\t\t\t\t\tX = 1;\n\t\t\t\t\t\telse if (Y < 0)\n\t\t\t\t\t\t\tY = 1;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tX = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//build m_normals ...\n\t\t\tthis.m_normals.length = 0;\n\t\t\t//this.m_normals.set_Capacity(len);\n\t\t\tfor (var j = 0; j < len - 1; j++)\n\t\t\t\tthis.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedLine || node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t\tthis.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n\t\t\telse\n\t\t\t\tthis.m_normals.push(new ClipperLib.DoublePoint1(this.m_normals[len - 2]));\n\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t{\n\t\t\t\tvar k = len - 1;\n\t\t\t\tfor (var j = 0; j < len; j++)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t\telse if (node.m_endtype === ClipperLib.EndType.etClosedLine)\n\t\t\t{\n\t\t\t\tvar k = len - 1;\n\t\t\t\tfor (var j = 0; j < len; j++)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t\tthis.m_destPoly = new Array();\n\t\t\t\t//re-build m_normals ...\n\t\t\t\tvar n = this.m_normals[len - 1];\n\t\t\t\tfor (var j = len - 1; j > 0; j--)\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.DoublePoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t\t\t\tthis.m_normals[0] = new ClipperLib.DoublePoint2(-n.X, -n.Y);\n\t\t\t\tk = 0;\n\t\t\t\tfor (var j = len - 1; j >= 0; j--)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar k = 0;\n\t\t\t\tfor (var j = 1; j < len - 1; ++j)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tvar pt1;\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenButt)\n\t\t\t\t{\n\t\t\t\t\tvar j = len - 1;\n\t\t\t\t\tpt1 = new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t\tpt1 = new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar j = len - 1;\n\t\t\t\t\tk = len - 2;\n\t\t\t\t\tthis.m_sinA = 0;\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.DoublePoint2(-this.m_normals[j].X, -this.m_normals[j].Y);\n\t\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n\t\t\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoRound(j, k);\n\t\t\t\t}\n\t\t\t\t//re-build m_normals ...\n\t\t\t\tfor (var j = len - 1; j > 0; j--)\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.DoublePoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t\t\t\tthis.m_normals[0] = new ClipperLib.DoublePoint2(-this.m_normals[1].X, -this.m_normals[1].Y);\n\t\t\t\tk = len - 1;\n\t\t\t\tfor (var j = k - 1; j > 0; --j)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenButt)\n\t\t\t\t{\n\t\t\t\t\tpt1 = new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t\tpt1 = new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tk = 1;\n\t\t\t\t\tthis.m_sinA = 0;\n\t\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n\t\t\t\t\t\tthis.DoSquare(0, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoRound(0, 1);\n\t\t\t\t}\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.Execute = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\tispolytree = a[0] instanceof ClipperLib.PolyTree;\n\t\tif (!ispolytree) // function (solution, delta)\n\t\t{\n\t\t\tvar solution = a[0],\n\t\t\t\tdelta = a[1];\n\t\t\tClipperLib.Clear(solution);\n\t\t\tthis.FixOrientations();\n\t\t\tthis.DoOffset(delta);\n\t\t\t//now clean up 'corners' ...\n\t\t\tvar clpr = new ClipperLib.Clipper(0);\n\t\t\tclpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t\t\tif (delta > 0)\n\t\t\t{\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t\t\t\tvar outer = new ClipperLib.Path();\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.left - 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.right + 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.right + 10, r.top - 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.left - 10, r.top - 10));\n\t\t\t\tclpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tclpr.ReverseSolution = true;\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t\t\t\tif (solution.length > 0)\n\t\t\t\t\tsolution.splice(0, 1);\n\t\t\t}\n\t\t\t//console.log(JSON.stringify(solution));\n\t\t}\n\t\telse // function (polytree, delta)\n\t\t{\n\t\t\tvar solution = a[0],\n\t\t\t\tdelta = a[1];\n\t\t\tsolution.Clear();\n\t\t\tthis.FixOrientations();\n\t\t\tthis.DoOffset(delta);\n\t\t\t//now clean up 'corners' ...\n\t\t\tvar clpr = new ClipperLib.Clipper(0);\n\t\t\tclpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t\t\tif (delta > 0)\n\t\t\t{\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t\t\t\tvar outer = new ClipperLib.Path();\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.left - 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.right + 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.right + 10, r.top - 10));\n\t\t\t\touter.push(new ClipperLib.IntPoint2(r.left - 10, r.top - 10));\n\t\t\t\tclpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tclpr.ReverseSolution = true;\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t\t\t\t//remove the outer PolyNode rectangle ...\n\t\t\t\tif (solution.ChildCount() === 1 && solution.Childs()[0].ChildCount() > 0)\n\t\t\t\t{\n\t\t\t\t\tvar outerNode = solution.Childs()[0];\n\t\t\t\t\t//solution.Childs.set_Capacity(outerNode.ChildCount);\n\t\t\t\t\tsolution.Childs()[0] = outerNode.Childs()[0];\n\t\t\t\t\tsolution.Childs()[0].m_Parent = solution;\n\t\t\t\t\tfor (var i = 1; i < outerNode.ChildCount(); i++)\n\t\t\t\t\t\tsolution.AddChild(outerNode.Childs()[i]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tsolution.Clear();\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n\t{\n\t\t//cross product ...\n\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\n\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t{\n\t\t\t//dot product ...\n\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t{\n\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\t//else angle ==> 180 degrees\n\t\t}\n\t\telse if (this.m_sinA > 1)\n\t\t\tthis.m_sinA = 1.0;\n\t\telse if (this.m_sinA < -1)\n\t\t\tthis.m_sinA = -1.0;\n\t\tif (this.m_sinA * this.m_delta < 0)\n\t\t{\n\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint1(this.m_srcPoly[j]));\n\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t\t}\n\t\telse\n\t\t\tswitch (jointype)\n\t\t\t{\n\t\t\tcase ClipperLib.JoinType.jtMiter:\n\t\t\t\t{\n\t\t\t\t\tvar r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\t\t\tif (r >= this.m_miterLim)\n\t\t\t\t\t\tthis.DoMiter(j, k, r);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase ClipperLib.JoinType.jtSquare:\n\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.JoinType.jtRound:\n\t\t\t\tthis.DoRound(j, k);\n\t\t\t\tbreak;\n\t\t\t}\n\t\tk = j;\n\t\treturn k;\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n\t{\n\t\tvar dx = Math.tan(Math.atan2(this.m_sinA,\n\t\t\tthis.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n\t{\n\t\tvar q = this.m_delta / r;\n\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n\t{\n\t\tvar a = Math.atan2(this.m_sinA,\n\t\t\tthis.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\n\t\tvar steps = Math.max(ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a))), 1);\n\n\t\tvar X = this.m_normals[k].X,\n\t\t\tY = this.m_normals[k].Y,\n\t\t\tX2;\n\t\tfor (var i = 0; i < steps; ++i)\n\t\t{\n\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(\n\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n\t\t\tX2 = X;\n\t\t\tX = X * this.m_cos - this.m_sin * Y;\n\t\t\tY = X2 * this.m_sin + Y * this.m_cos;\n\t\t}\n\t\tthis.m_destPoly.push(new ClipperLib.IntPoint2(\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t};\n\n\tClipperLib.Error = function (message)\n\t{\n\t\ttry\n\t\t{\n\t\t\tthrow new Error(message);\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\talert(err.message);\n\t\t}\n\t};\n\n\t// ---------------------------------------------\n\n\t// JS extension by Timo 2013\n\tClipperLib.JS = {};\n\n\tClipperLib.JS.AreaOfPolygon = function (poly, scale)\n\t{\n\t\tif (!scale) scale = 1;\n\t\treturn ClipperLib.Clipper.Area(poly) / (scale * scale);\n\t};\n\n\tClipperLib.JS.AreaOfPolygons = function (poly, scale)\n\t{\n\t\tif (!scale) scale = 1;\n\t\tvar area = 0;\n\t\tfor (var i = 0; i < poly.length; i++)\n\t\t{\n\t\t\tarea += ClipperLib.Clipper.Area(poly[i]);\n\t\t}\n\t\treturn area / (scale * scale);\n\t};\n\n\tClipperLib.JS.BoundsOfPath = function (path, scale)\n\t{\n\t\treturn ClipperLib.JS.BoundsOfPaths([path], scale);\n\t};\n\n\tClipperLib.JS.BoundsOfPaths = function (paths, scale)\n\t{\n\t\tif (!scale) scale = 1;\n\t\tvar bounds = ClipperLib.Clipper.GetBounds(paths);\n\t\tbounds.left /= scale;\n\t\tbounds.bottom /= scale;\n\t\tbounds.right /= scale;\n\t\tbounds.top /= scale;\n\t\treturn bounds;\n\t};\n\n\t// Clean() joins vertices that are too near each other\n\t// and causes distortion to offsetted polygons without cleaning\n\tClipperLib.JS.Clean = function (polygon, delta)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tvar polygon = ClipperLib.JS.Clone(polygon);\n\t\tif (typeof delta !== \"number\" || delta === null)\n\t\t{\n\t\t\tClipperLib.Error(\"Delta is not a number in Clean().\");\n\t\t\treturn polygon;\n\t\t}\n\t\tif (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || delta < 0) return polygon;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar k_length = polygon.length;\n\t\tvar len, poly, result, d, p, j, i;\n\t\tvar results = [];\n\t\tfor (var k = 0; k < k_length; k++)\n\t\t{\n\t\t\tpoly = polygon[k];\n\t\t\tlen = poly.length;\n\t\t\tif (len === 0) continue;\n\t\t\telse if (len < 3)\n\t\t\t{\n\t\t\t\tresult = poly;\n\t\t\t\tresults.push(result);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult = poly;\n\t\t\td = delta * delta;\n\t\t\t//d = Math.floor(c_delta * c_delta);\n\t\t\tp = poly[0];\n\t\t\tj = 1;\n\t\t\tfor (i = 1; i < len; i++)\n\t\t\t{\n\t\t\t\tif ((poly[i].X - p.X) * (poly[i].X - p.X) +\n\t\t\t\t\t(poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n\t\t\t\t\tcontinue;\n\t\t\t\tresult[j] = poly[i];\n\t\t\t\tp = poly[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tp = poly[j - 1];\n\t\t\tif ((poly[0].X - p.X) * (poly[0].X - p.X) +\n\t\t\t\t(poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n\t\t\t\tj--;\n\t\t\tif (j < len)\n\t\t\t\tresult.splice(j, len - j);\n\t\t\tif (result.length) results.push(result);\n\t\t}\n\t\tif (!isPolygons && results.length) results = results[0];\n\t\telse if (!isPolygons && results.length === 0) results = [];\n\t\telse if (isPolygons && results.length === 0) results = [\n\t\t\t[]\n\t\t];\n\t\treturn results;\n\t}\n\t// Make deep copy of Polygons or Polygon\n\t// so that also IntPoint objects are cloned and not only referenced\n\t// This should be the fastest way\n\tClipperLib.JS.Clone = function (polygon)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tif (polygon.length === 0) return [];\n\t\telse if (polygon.length === 1 && polygon[0].length === 0) return [\n\t\t\t[]\n\t\t];\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar len = polygon.length,\n\t\t\tplen, i, j, result;\n\t\tvar results = new Array(len);\n\t\tfor (i = 0; i < len; i++)\n\t\t{\n\t\t\tplen = polygon[i].length;\n\t\t\tresult = new Array(plen);\n\t\t\tfor (j = 0; j < plen; j++)\n\t\t\t{\n\t\t\t\tresult[j] = {\n\t\t\t\t\tX: polygon[i][j].X,\n\t\t\t\t\tY: polygon[i][j].Y\n\t\t\t\t};\n\n\t\t\t}\n\t\t\tresults[i] = result;\n\t\t}\n\t\tif (!isPolygons) results = results[0];\n\t\treturn results;\n\t};\n\n\t// Removes points that doesn't affect much to the visual appearance.\n\t// If middle point is at or under certain distance (tolerance) of the line segment between\n\t// start and end point, the middle point is removed.\n\tClipperLib.JS.Lighten = function (polygon, tolerance)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tif (typeof tolerance !== \"number\" || tolerance === null)\n\t\t{\n\t\t\tClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n\t\t\treturn ClipperLib.JS.Clone(polygon);\n\t\t}\n\t\tif (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || tolerance < 0)\n\t\t{\n\t\t\treturn ClipperLib.JS.Clone(polygon);\n\t\t}\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n\t\tvar bxax, byay, l, ax, ay;\n\t\tvar len = polygon.length;\n\t\tvar toleranceSq = tolerance * tolerance;\n\t\tvar results = [];\n\t\tfor (i = 0; i < len; i++)\n\t\t{\n\t\t\tpoly = polygon[i];\n\t\t\tplen = poly.length;\n\t\t\tif (plen === 0) continue;\n\t\t\tfor (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n\t\t\t{\n\t\t\t\tpoly2 = [];\n\t\t\t\tplen = poly.length;\n\t\t\t\t// the first have to added to the end, if first and last are not the same\n\t\t\t\t// this way we ensure that also the actual last point can be removed if needed\n\t\t\t\tif (poly[plen - 1].X !== poly[0].X || poly[plen - 1].Y !== poly[0].Y)\n\t\t\t\t{\n\t\t\t\t\taddlast = 1;\n\t\t\t\t\tpoly.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tX: poly[0].X,\n\t\t\t\t\t\tY: poly[0].Y\n\t\t\t\t\t});\n\t\t\t\t\tplen = poly.length;\n\t\t\t\t}\n\t\t\t\telse addlast = 0;\n\t\t\t\trem = []; // Indexes of removed points\n\t\t\t\tfor (j = 0; j < plen - 2; j++)\n\t\t\t\t{\n\t\t\t\t\tA = poly[j]; // Start point of line segment\n\t\t\t\t\tP = poly[j + 1]; // Middle point. This is the one to be removed.\n\t\t\t\t\tB = poly[j + 2]; // End point of line segment\n\t\t\t\t\tax = A.X;\n\t\t\t\t\tay = A.Y;\n\t\t\t\t\tbxax = B.X - ax;\n\t\t\t\t\tbyay = B.Y - ay;\n\t\t\t\t\tif (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n\t\t\t\t\t{\n\t\t\t\t\t\tl = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n\t\t\t\t\t\tif (l > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tax = B.X;\n\t\t\t\t\t\t\tay = B.Y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (l > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tax += bxax * l;\n\t\t\t\t\t\t\tay += byay * l;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbxax = P.X - ax;\n\t\t\t\t\tbyay = P.Y - ay;\n\t\t\t\t\td = bxax * bxax + byay * byay;\n\t\t\t\t\tif (d <= toleranceSq)\n\t\t\t\t\t{\n\t\t\t\t\t\trem[j + 1] = 1;\n\t\t\t\t\t\tj++; // when removed, transfer the pointer to the next one\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add all unremoved points to poly2\n\t\t\t\tpoly2.push(\n\t\t\t\t{\n\t\t\t\t\tX: poly[0].X,\n\t\t\t\t\tY: poly[0].Y\n\t\t\t\t});\n\t\t\t\tfor (j = 1; j < plen - 1; j++)\n\t\t\t\t\tif (!rem[j]) poly2.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tX: poly[j].X,\n\t\t\t\t\t\tY: poly[j].Y\n\t\t\t\t\t});\n\t\t\t\tpoly2.push(\n\t\t\t\t{\n\t\t\t\t\tX: poly[plen - 1].X,\n\t\t\t\t\tY: poly[plen - 1].Y\n\t\t\t\t});\n\t\t\t\t// if the first point was added to the end, remove it\n\t\t\t\tif (addlast) poly.pop();\n\t\t\t\t// break, if there was not anymore removed points\n\t\t\t\tif (!rem.length) break;\n\t\t\t\t// else continue looping using poly2, to check if there are points to remove\n\t\t\t\telse poly = poly2;\n\t\t\t}\n\t\t\tplen = poly2.length;\n\t\t\t// remove duplicate from end, if needed\n\t\t\tif (poly2[plen - 1].X === poly2[0].X && poly2[plen - 1].Y === poly2[0].Y)\n\t\t\t{\n\t\t\t\tpoly2.pop();\n\t\t\t}\n\t\t\tif (poly2.length > 2) // to avoid two-point-polygons\n\t\t\t\tresults.push(poly2);\n\t\t}\n\t\tif (!isPolygons)\n\t\t{\n\t\t\tresults = results[0];\n\t\t}\n\t\tif (typeof (results) === \"undefined\")\n\t\t{\n\t\t\tresults = [];\n\t\t}\n\t\treturn results;\n\t}\n\n\tClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n\t{\n\t\tif (typeof (path) === \"undefined\") return 0;\n\t\tvar sqrt = Math.sqrt;\n\t\tvar perimeter = 0.0;\n\t\tvar p1, p2, p1x = 0.0,\n\t\t\tp1y = 0.0,\n\t\t\tp2x = 0.0,\n\t\t\tp2y = 0.0;\n\t\tvar j = path.length;\n\t\tif (j < 2) return 0;\n\t\tif (closed)\n\t\t{\n\t\t\tpath[j] = path[0];\n\t\t\tj++;\n\t\t}\n\t\twhile (--j)\n\t\t{\n\t\t\tp1 = path[j];\n\t\t\tp1x = p1.X;\n\t\t\tp1y = p1.Y;\n\t\t\tp2 = path[j - 1];\n\t\t\tp2x = p2.X;\n\t\t\tp2y = p2.Y;\n\t\t\tperimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n\t\t}\n\t\tif (closed) path.pop();\n\t\treturn perimeter / scale;\n\t};\n\n\tClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n\t{\n\t\tif (!scale) scale = 1;\n\t\tvar perimeter = 0;\n\t\tfor (var i = 0; i < paths.length; i++)\n\t\t{\n\t\t\tperimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n\t\t}\n\t\treturn perimeter;\n\t};\n\n\tClipperLib.JS.ScaleDownPath = function (path, scale)\n\t{\n\t\tvar i, p;\n\t\tif (!scale) scale = 1;\n\t\ti = path.length;\n\t\twhile (i--)\n\t\t{\n\t\t\tp = path[i];\n\t\t\tp.X = p.X / scale;\n\t\t\tp.Y = p.Y / scale;\n\t\t}\n\t};\n\n\tClipperLib.JS.ScaleDownPaths = function (paths, scale)\n\t{\n\t\tvar i, j, p;\n\t\tif (!scale) scale = 1;\n\t\ti = paths.length;\n\t\twhile (i--)\n\t\t{\n\t\t\tj = paths[i].length;\n\t\t\twhile (j--)\n\t\t\t{\n\t\t\t\tp = paths[i][j];\n\t\t\t\tp.X = p.X / scale;\n\t\t\t\tp.Y = p.Y / scale;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.JS.ScaleUpPath = function (path, scale)\n\t{\n\t\tvar i, p, round = Math.round;\n\t\tif (!scale) scale = 1;\n\t\ti = path.length;\n\t\twhile (i--)\n\t\t{\n\t\t\tp = path[i];\n\t\t\tp.X = round(p.X * scale);\n\t\t\tp.Y = round(p.Y * scale);\n\t\t}\n\t};\n\n\tClipperLib.JS.ScaleUpPaths = function (paths, scale)\n\t{\n\t\tvar i, j, p, round = Math.round;\n\t\tif (!scale) scale = 1;\n\t\ti = paths.length;\n\t\twhile (i--)\n\t\t{\n\t\t\tj = paths[i].length;\n\t\t\twhile (j--)\n\t\t\t{\n\t\t\t\tp = paths[i][j];\n\t\t\t\tp.X = round(p.X * scale);\n\t\t\t\tp.Y = round(p.Y * scale);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ExPolygons = function ()\n\t{\n\t\treturn [];\n\t}\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ExPolygon = function ()\n\t{\n\t\tthis.outer = null;\n\t\tthis.holes = null;\n\t};\n\n\tClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n\t{\n\t\tvar ep = new ClipperLib.ExPolygon();\n\t\tep.outer = polynode.Contour();\n\t\tvar childs = polynode.Childs();\n\t\tvar ilen = childs.length;\n\t\tep.holes = new Array(ilen);\n\t\tvar node, n, i, j, childs2, jlen;\n\t\tfor (i = 0; i < ilen; i++)\n\t\t{\n\t\t\tnode = childs[i];\n\t\t\tep.holes[i] = node.Contour();\n\t\t\t//Add outer polygons contained by (nested within) holes ...\n\t\t\tfor (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n\t\t\t{\n\t\t\t\tn = childs2[j];\n\t\t\t\tClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n\t\t\t}\n\t\t}\n\t\texpolygons.push(ep);\n\t};\n\n\tClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n\t{\n\t\tvar a, i, alen, ilen;\n\t\tvar paths = new ClipperLib.Paths();\n\t\tfor (a = 0, alen = expolygons.length; a < alen; a++)\n\t\t{\n\t\t\tpaths.push(expolygons[a].outer);\n\t\t\tfor (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\tpaths.push(expolygons[a].holes[i]);\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\tClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n\t{\n\t\tvar expolygons = new ClipperLib.ExPolygons();\n\t\tvar node, i, childs, ilen;\n\t\tfor (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n\t\t{\n\t\t\tnode = childs[i];\n\t\t\tClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n\t\t}\n\t\treturn expolygons;\n\t};\n\n})();\n"],
  "mappings": "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",
  "names": []
}
