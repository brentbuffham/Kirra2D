import {
  ExtraSamplesValues,
  arrayFields,
  fieldTagNames,
  fieldTagTypes,
  fieldTags,
  fieldTypeNames,
  fieldTypes,
  geoKeyNames,
  globals_exports,
  photometricInterpretations
} from "./chunk-WIQDXJLV.js";
import {
  BaseDecoder
} from "./chunk-C5KGH6RQ.js";
import {
  require_fs
} from "./chunk-UVQV3GRF.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-PLDDJCW6.js";

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@petamoriken/float16/src/_util/messages.mjs
var THIS_IS_NOT_AN_OBJECT = "This is not an object";
var THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = "This is not a Float16Array object";
var THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY = "This constructor is not a subclass of Float16Array";
var THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT = "The constructor property value is not an object";
var SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT = "Species constructor didn't return TypedArray object";
var DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH = "Derived constructor created TypedArray object which was too small length";
var ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER = "Attempting to access detached ArrayBuffer";
var CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT = "Cannot convert undefined or null to object";
var CANNOT_MIX_BIGINT_AND_OTHER_TYPES = "Cannot mix BigInt and other types, use explicit conversions";
var ITERATOR_PROPERTY_IS_NOT_CALLABLE = "@@iterator property is not callable";
var REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE = "Reduce of empty array with no initial value";
var THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED = "The comparison function must be either a function or undefined";
var OFFSET_IS_OUT_OF_BOUNDS = "Offset is out of bounds";

// node_modules/@petamoriken/float16/src/_util/primordials.mjs
function uncurryThis(target) {
  return (thisArg, ...args) => {
    return ReflectApply(target, thisArg, args);
  };
}
function uncurryThisGetter(target, key) {
  return uncurryThis(
    ReflectGetOwnPropertyDescriptor(
      target,
      key
    ).get
  );
}
var {
  apply: ReflectApply,
  construct: ReflectConstruct,
  defineProperty: ReflectDefineProperty,
  get: ReflectGet,
  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,
  getPrototypeOf: ReflectGetPrototypeOf,
  has: ReflectHas,
  ownKeys: ReflectOwnKeys,
  set: ReflectSet,
  setPrototypeOf: ReflectSetPrototypeOf
} = Reflect;
var NativeProxy = Proxy;
var {
  EPSILON,
  MAX_SAFE_INTEGER,
  isFinite: NumberIsFinite,
  isNaN: NumberIsNaN
} = Number;
var {
  iterator: SymbolIterator,
  species: SymbolSpecies,
  toStringTag: SymbolToStringTag,
  for: SymbolFor
} = Symbol;
var NativeObject = Object;
var {
  create: ObjectCreate,
  defineProperty: ObjectDefineProperty,
  freeze: ObjectFreeze,
  is: ObjectIs
} = NativeObject;
var ObjectPrototype = NativeObject.prototype;
var ObjectPrototype__lookupGetter__ = (
  /** @type {any} */
  ObjectPrototype.__lookupGetter__ ? uncurryThis(
    /** @type {any} */
    ObjectPrototype.__lookupGetter__
  ) : (object, key) => {
    if (object == null) {
      throw NativeTypeError(
        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT
      );
    }
    let target = NativeObject(object);
    do {
      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);
      if (descriptor !== void 0) {
        if (ObjectHasOwn(descriptor, "get")) {
          return descriptor.get;
        }
        return;
      }
    } while ((target = ReflectGetPrototypeOf(target)) !== null);
  }
);
var ObjectHasOwn = (
  /** @type {any} */
  NativeObject.hasOwn || uncurryThis(ObjectPrototype.hasOwnProperty)
);
var NativeArray = Array;
var ArrayIsArray = NativeArray.isArray;
var ArrayPrototype = NativeArray.prototype;
var ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);
var ArrayPrototypePush = uncurryThis(ArrayPrototype.push);
var ArrayPrototypeToLocaleString = uncurryThis(
  ArrayPrototype.toLocaleString
);
var NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];
var ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);
var {
  abs: MathAbs,
  trunc: MathTrunc
} = Math;
var NativeArrayBuffer = ArrayBuffer;
var ArrayBufferIsView = NativeArrayBuffer.isView;
var ArrayBufferPrototype = NativeArrayBuffer.prototype;
var ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);
var ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, "byteLength");
var NativeSharedArrayBuffer = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : null;
var SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer && uncurryThisGetter(NativeSharedArrayBuffer.prototype, "byteLength");
var TypedArray = ReflectGetPrototypeOf(Uint8Array);
var TypedArrayFrom = TypedArray.from;
var TypedArrayPrototype = TypedArray.prototype;
var NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];
var TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);
var TypedArrayPrototypeValues = uncurryThis(
  TypedArrayPrototype.values
);
var TypedArrayPrototypeEntries = uncurryThis(
  TypedArrayPrototype.entries
);
var TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);
var TypedArrayPrototypeReverse = uncurryThis(
  TypedArrayPrototype.reverse
);
var TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);
var TypedArrayPrototypeCopyWithin = uncurryThis(
  TypedArrayPrototype.copyWithin
);
var TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);
var TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);
var TypedArrayPrototypeSubarray = uncurryThis(
  TypedArrayPrototype.subarray
);
var TypedArrayPrototypeGetBuffer = uncurryThisGetter(
  TypedArrayPrototype,
  "buffer"
);
var TypedArrayPrototypeGetByteOffset = uncurryThisGetter(
  TypedArrayPrototype,
  "byteOffset"
);
var TypedArrayPrototypeGetLength = uncurryThisGetter(
  TypedArrayPrototype,
  "length"
);
var TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(
  TypedArrayPrototype,
  SymbolToStringTag
);
var NativeUint8Array = Uint8Array;
var NativeUint16Array = Uint16Array;
var Uint16ArrayFrom = (...args) => {
  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);
};
var NativeUint32Array = Uint32Array;
var NativeFloat32Array = Float32Array;
var ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());
var ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);
var GeneratorPrototypeNext = uncurryThis((function* () {
})().next);
var IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);
var DataViewPrototype = DataView.prototype;
var DataViewPrototypeGetUint16 = uncurryThis(
  DataViewPrototype.getUint16
);
var DataViewPrototypeSetUint16 = uncurryThis(
  DataViewPrototype.setUint16
);
var NativeTypeError = TypeError;
var NativeRangeError = RangeError;
var NativeWeakSet = WeakSet;
var WeakSetPrototype = NativeWeakSet.prototype;
var WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);
var WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);
var NativeWeakMap = WeakMap;
var WeakMapPrototype = NativeWeakMap.prototype;
var WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);
var WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);
var WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);

// node_modules/@petamoriken/float16/src/_util/arrayIterator.mjs
var arrayIterators = new NativeWeakMap();
var SafeIteratorPrototype = ObjectCreate(null, {
  next: {
    value: function next() {
      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);
      return ArrayIteratorPrototypeNext(arrayIterator);
    }
  },
  [SymbolIterator]: {
    value: function values() {
      return this;
    }
  }
});
function safeIfNeeded(array) {
  if (array[SymbolIterator] === NativeArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext) {
    return array;
  }
  const safe = ObjectCreate(SafeIteratorPrototype);
  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));
  return safe;
}
var generators = new NativeWeakMap();
var DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {
  next: {
    value: function next2() {
      const generator = WeakMapPrototypeGet(generators, this);
      return GeneratorPrototypeNext(generator);
    },
    writable: true,
    configurable: true
  }
});
for (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {
  if (key === "next") {
    continue;
  }
  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));
}
function wrap(generator) {
  const dummy = ObjectCreate(DummyArrayIteratorPrototype);
  WeakMapPrototypeSet(generators, dummy, generator);
  return dummy;
}

// node_modules/@petamoriken/float16/src/_util/is.mjs
function isObject(value) {
  return value !== null && typeof value === "object" || typeof value === "function";
}
function isObjectLike(value) {
  return value !== null && typeof value === "object";
}
function isNativeTypedArray(value) {
  return TypedArrayPrototypeGetSymbolToStringTag(value) !== void 0;
}
function isNativeBigIntTypedArray(value) {
  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);
  return typedArrayName === "BigInt64Array" || typedArrayName === "BigUint64Array";
}
function isArrayBuffer(value) {
  try {
    if (ArrayIsArray(value)) {
      return false;
    }
    ArrayBufferPrototypeGetByteLength(
      /** @type {any} */
      value
    );
    return true;
  } catch (e) {
    return false;
  }
}
function isSharedArrayBuffer(value) {
  if (NativeSharedArrayBuffer === null) {
    return false;
  }
  try {
    SharedArrayBufferPrototypeGetByteLength(
      /** @type {any} */
      value
    );
    return true;
  } catch (e) {
    return false;
  }
}
function isAnyArrayBuffer(value) {
  return isArrayBuffer(value) || isSharedArrayBuffer(value);
}
function isOrdinaryArray(value) {
  if (!ArrayIsArray(value)) {
    return false;
  }
  return value[SymbolIterator] === NativeArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;
}
function isOrdinaryNativeTypedArray(value) {
  if (!isNativeTypedArray(value)) {
    return false;
  }
  return value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;
}
function isCanonicalIntegerIndexString(value) {
  if (typeof value !== "string") {
    return false;
  }
  const number = +value;
  if (value !== number + "") {
    return false;
  }
  if (!NumberIsFinite(number)) {
    return false;
  }
  return number === MathTrunc(number);
}

// node_modules/@petamoriken/float16/src/_util/brand.mjs
var brand = SymbolFor("__Float16Array__");
function hasFloat16ArrayBrand(target) {
  if (!isObjectLike(target)) {
    return false;
  }
  const prototype = ReflectGetPrototypeOf(target);
  if (!isObjectLike(prototype)) {
    return false;
  }
  const constructor = prototype.constructor;
  if (constructor === void 0) {
    return false;
  }
  if (!isObject(constructor)) {
    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);
  }
  return ReflectHas(constructor, brand);
}

// node_modules/@petamoriken/float16/src/_util/converter.mjs
var INVERSE_OF_EPSILON = 1 / EPSILON;
function roundTiesToEven(num) {
  return num + INVERSE_OF_EPSILON - INVERSE_OF_EPSILON;
}
var FLOAT16_MIN_VALUE = 6103515625e-14;
var FLOAT16_MAX_VALUE = 65504;
var FLOAT16_EPSILON = 9765625e-10;
var FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE;
var FLOAT16_EPSILON_DEVIDED_BY_EPSILON = FLOAT16_EPSILON * INVERSE_OF_EPSILON;
function roundToFloat16(num) {
  const number = +num;
  if (!NumberIsFinite(number) || number === 0) {
    return number;
  }
  const sign = number > 0 ? 1 : -1;
  const absolute = MathAbs(number);
  if (absolute < FLOAT16_MIN_VALUE) {
    return sign * roundTiesToEven(absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE) * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;
  }
  const temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute;
  const result = temp - (temp - absolute);
  if (result > FLOAT16_MAX_VALUE || NumberIsNaN(result)) {
    return sign * Infinity;
  }
  return sign * result;
}
var buffer = new NativeArrayBuffer(4);
var floatView = new NativeFloat32Array(buffer);
var uint32View = new NativeUint32Array(buffer);
var baseTable = new NativeUint16Array(512);
var shiftTable = new NativeUint8Array(512);
for (let i = 0; i < 256; ++i) {
  const e = i - 127;
  if (e < -24) {
    baseTable[i] = 0;
    baseTable[i | 256] = 32768;
    shiftTable[i] = 24;
    shiftTable[i | 256] = 24;
  } else if (e < -14) {
    baseTable[i] = 1024 >> -e - 14;
    baseTable[i | 256] = 1024 >> -e - 14 | 32768;
    shiftTable[i] = -e - 1;
    shiftTable[i | 256] = -e - 1;
  } else if (e <= 15) {
    baseTable[i] = e + 15 << 10;
    baseTable[i | 256] = e + 15 << 10 | 32768;
    shiftTable[i] = 13;
    shiftTable[i | 256] = 13;
  } else if (e < 128) {
    baseTable[i] = 31744;
    baseTable[i | 256] = 64512;
    shiftTable[i] = 24;
    shiftTable[i | 256] = 24;
  } else {
    baseTable[i] = 31744;
    baseTable[i | 256] = 64512;
    shiftTable[i] = 13;
    shiftTable[i | 256] = 13;
  }
}
function roundToFloat16Bits(num) {
  floatView[0] = roundToFloat16(num);
  const f = uint32View[0];
  const e = f >> 23 & 511;
  return baseTable[e] + ((f & 8388607) >> shiftTable[e]);
}
var mantissaTable = new NativeUint32Array(2048);
for (let i = 1; i < 1024; ++i) {
  let m = i << 13;
  let e = 0;
  while ((m & 8388608) === 0) {
    m <<= 1;
    e -= 8388608;
  }
  m &= ~8388608;
  e += 947912704;
  mantissaTable[i] = m | e;
}
for (let i = 1024; i < 2048; ++i) {
  mantissaTable[i] = 939524096 + (i - 1024 << 13);
}
var exponentTable = new NativeUint32Array(64);
for (let i = 1; i < 31; ++i) {
  exponentTable[i] = i << 23;
}
exponentTable[31] = 1199570944;
exponentTable[32] = 2147483648;
for (let i = 33; i < 63; ++i) {
  exponentTable[i] = 2147483648 + (i - 32 << 23);
}
exponentTable[63] = 3347054592;
var offsetTable = new NativeUint16Array(64);
for (let i = 1; i < 64; ++i) {
  if (i !== 32) {
    offsetTable[i] = 1024;
  }
}
function convertToNumber(float16bits) {
  const i = float16bits >> 10;
  uint32View[0] = mantissaTable[offsetTable[i] + (float16bits & 1023)] + exponentTable[i];
  return floatView[0];
}

// node_modules/@petamoriken/float16/src/_util/spec.mjs
function ToIntegerOrInfinity(target) {
  const number = +target;
  if (NumberIsNaN(number) || number === 0) {
    return 0;
  }
  return MathTrunc(number);
}
function ToLength(target) {
  const length = ToIntegerOrInfinity(target);
  if (length < 0) {
    return 0;
  }
  return length < MAX_SAFE_INTEGER ? length : MAX_SAFE_INTEGER;
}
function SpeciesConstructor(target, defaultConstructor) {
  if (!isObject(target)) {
    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);
  }
  const constructor = target.constructor;
  if (constructor === void 0) {
    return defaultConstructor;
  }
  if (!isObject(constructor)) {
    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);
  }
  const species = constructor[SymbolSpecies];
  if (species == null) {
    return defaultConstructor;
  }
  return species;
}
function IsDetachedBuffer(buffer2) {
  if (isSharedArrayBuffer(buffer2)) {
    return false;
  }
  try {
    ArrayBufferPrototypeSlice(buffer2, 0, 0);
    return false;
  } catch (e) {
  }
  return true;
}
function defaultCompare(x, y) {
  const isXNaN = NumberIsNaN(x);
  const isYNaN = NumberIsNaN(y);
  if (isXNaN && isYNaN) {
    return 0;
  }
  if (isXNaN) {
    return 1;
  }
  if (isYNaN) {
    return -1;
  }
  if (x < y) {
    return -1;
  }
  if (x > y) {
    return 1;
  }
  if (x === 0 && y === 0) {
    const isXPlusZero = ObjectIs(x, 0);
    const isYPlusZero = ObjectIs(y, 0);
    if (!isXPlusZero && isYPlusZero) {
      return -1;
    }
    if (isXPlusZero && !isYPlusZero) {
      return 1;
    }
  }
  return 0;
}

// node_modules/@petamoriken/float16/src/Float16Array.mjs
var BYTES_PER_ELEMENT = 2;
var float16bitsArrays = new NativeWeakMap();
function isFloat16Array(target) {
  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);
}
function assertFloat16Array(target) {
  if (!isFloat16Array(target)) {
    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);
  }
}
function assertSpeciesTypedArray(target, count) {
  const isTargetFloat16Array = isFloat16Array(target);
  const isTargetTypedArray = isNativeTypedArray(target);
  if (!isTargetFloat16Array && !isTargetTypedArray) {
    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);
  }
  if (typeof count === "number") {
    let length;
    if (isTargetFloat16Array) {
      const float16bitsArray = getFloat16BitsArray(target);
      length = TypedArrayPrototypeGetLength(float16bitsArray);
    } else {
      length = TypedArrayPrototypeGetLength(target);
    }
    if (length < count) {
      throw NativeTypeError(
        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH
      );
    }
  }
  if (isNativeBigIntTypedArray(target)) {
    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);
  }
}
function getFloat16BitsArray(float16) {
  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);
  if (float16bitsArray !== void 0) {
    const buffer3 = TypedArrayPrototypeGetBuffer(float16bitsArray);
    if (IsDetachedBuffer(buffer3)) {
      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);
    }
    return float16bitsArray;
  }
  const buffer2 = (
    /** @type {any} */
    float16.buffer
  );
  if (IsDetachedBuffer(buffer2)) {
    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);
  }
  const cloned = ReflectConstruct(Float16Array, [
    buffer2,
    /** @type {any} */
    float16.byteOffset,
    /** @type {any} */
    float16.length
  ], float16.constructor);
  return WeakMapPrototypeGet(float16bitsArrays, cloned);
}
function copyToArray(float16bitsArray) {
  const length = TypedArrayPrototypeGetLength(float16bitsArray);
  const array = [];
  for (let i = 0; i < length; ++i) {
    array[i] = convertToNumber(float16bitsArray[i]);
  }
  return array;
}
var TypedArrayPrototypeGetters = new NativeWeakSet();
for (const key of ReflectOwnKeys(TypedArrayPrototype)) {
  if (key === SymbolToStringTag) {
    continue;
  }
  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);
  if (ObjectHasOwn(descriptor, "get") && typeof descriptor.get === "function") {
    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);
  }
}
var handler = ObjectFreeze(
  /** @type {ProxyHandler<Float16BitsArray>} */
  {
    get(target, key, receiver) {
      if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {
        return convertToNumber(ReflectGet(target, key));
      }
      if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {
        return ReflectGet(target, key);
      }
      return ReflectGet(target, key, receiver);
    },
    set(target, key, value, receiver) {
      if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {
        return ReflectSet(target, key, roundToFloat16Bits(value));
      }
      return ReflectSet(target, key, value, receiver);
    },
    getOwnPropertyDescriptor(target, key) {
      if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {
        const descriptor = ReflectGetOwnPropertyDescriptor(target, key);
        descriptor.value = convertToNumber(descriptor.value);
        return descriptor;
      }
      return ReflectGetOwnPropertyDescriptor(target, key);
    },
    defineProperty(target, key, descriptor) {
      if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, "value")) {
        descriptor.value = roundToFloat16Bits(descriptor.value);
        return ReflectDefineProperty(target, key, descriptor);
      }
      return ReflectDefineProperty(target, key, descriptor);
    }
  }
);
var Float16Array = class _Float16Array {
  /** @see https://tc39.es/ecma262/#sec-typedarray */
  constructor(input, _byteOffset, _length) {
    let float16bitsArray;
    if (isFloat16Array(input)) {
      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);
    } else if (isObject(input) && !isAnyArrayBuffer(input)) {
      let list;
      let length;
      if (isNativeTypedArray(input)) {
        list = input;
        length = TypedArrayPrototypeGetLength(input);
        const buffer2 = TypedArrayPrototypeGetBuffer(input);
        if (IsDetachedBuffer(buffer2)) {
          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);
        }
        if (isNativeBigIntTypedArray(input)) {
          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);
        }
        const data = new NativeArrayBuffer(
          length * BYTES_PER_ELEMENT
        );
        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);
      } else {
        const iterator = input[SymbolIterator];
        if (iterator != null && typeof iterator !== "function") {
          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);
        }
        if (iterator != null) {
          if (isOrdinaryArray(input)) {
            list = input;
            length = input.length;
          } else {
            list = [.../** @type {Iterable<unknown>} */
            input];
            length = list.length;
          }
        } else {
          list = /** @type {ArrayLike<unknown>} */
          input;
          length = ToLength(list.length);
        }
        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);
      }
      for (let i = 0; i < length; ++i) {
        float16bitsArray[i] = roundToFloat16Bits(list[i]);
      }
    } else {
      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);
    }
    const proxy = (
      /** @type {any} */
      new NativeProxy(float16bitsArray, handler)
    );
    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);
    return proxy;
  }
  /**
   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key
   * @see https://tc39.es/ecma262/#sec-%typedarray%.from
   */
  static from(src, ...opts) {
    const Constructor = this;
    if (!ReflectHas(Constructor, brand)) {
      throw NativeTypeError(
        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY
      );
    }
    if (Constructor === _Float16Array) {
      if (isFloat16Array(src) && opts.length === 0) {
        const float16bitsArray = getFloat16BitsArray(src);
        const uint16 = new NativeUint16Array(
          TypedArrayPrototypeGetBuffer(float16bitsArray),
          TypedArrayPrototypeGetByteOffset(float16bitsArray),
          TypedArrayPrototypeGetLength(float16bitsArray)
        );
        return new _Float16Array(
          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))
        );
      }
      if (opts.length === 0) {
        return new _Float16Array(
          TypedArrayPrototypeGetBuffer(
            Uint16ArrayFrom(src, roundToFloat16Bits)
          )
        );
      }
      const mapFunc = opts[0];
      const thisArg = opts[1];
      return new _Float16Array(
        TypedArrayPrototypeGetBuffer(
          Uint16ArrayFrom(src, function(val, ...args) {
            return roundToFloat16Bits(
              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])
            );
          }, thisArg)
        )
      );
    }
    let list;
    let length;
    const iterator = src[SymbolIterator];
    if (iterator != null && typeof iterator !== "function") {
      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);
    }
    if (iterator != null) {
      if (isOrdinaryArray(src)) {
        list = src;
        length = src.length;
      } else if (isOrdinaryNativeTypedArray(src)) {
        list = src;
        length = TypedArrayPrototypeGetLength(src);
      } else {
        list = [...src];
        length = list.length;
      }
    } else {
      if (src == null) {
        throw NativeTypeError(
          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT
        );
      }
      list = NativeObject(src);
      length = ToLength(list.length);
    }
    const array = new Constructor(length);
    if (opts.length === 0) {
      for (let i = 0; i < length; ++i) {
        array[i] = /** @type {number} */
        list[i];
      }
    } else {
      const mapFunc = opts[0];
      const thisArg = opts[1];
      for (let i = 0; i < length; ++i) {
        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);
      }
    }
    return array;
  }
  /**
   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key
   * @see https://tc39.es/ecma262/#sec-%typedarray%.of
   */
  static of(...items) {
    const Constructor = this;
    if (!ReflectHas(Constructor, brand)) {
      throw NativeTypeError(
        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY
      );
    }
    const length = items.length;
    if (Constructor === _Float16Array) {
      const proxy = new _Float16Array(length);
      const float16bitsArray = getFloat16BitsArray(proxy);
      for (let i = 0; i < length; ++i) {
        float16bitsArray[i] = roundToFloat16Bits(items[i]);
      }
      return proxy;
    }
    const array = new Constructor(length);
    for (let i = 0; i < length; ++i) {
      array[i] = items[i];
    }
    return array;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */
  keys() {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    return TypedArrayPrototypeKeys(float16bitsArray);
  }
  /**
   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`
   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
   */
  values() {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    return wrap((function* () {
      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {
        yield convertToNumber(val);
      }
    })());
  }
  /**
   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`
   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
   */
  entries() {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    return wrap((function* () {
      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {
        yield (
          /** @type {[number, number]} */
          [i, convertToNumber(val)]
        );
      }
    })());
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */
  at(index) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const relativeIndex = ToIntegerOrInfinity(index);
    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;
    if (k < 0 || k >= length) {
      return;
    }
    return convertToNumber(float16bitsArray[k]);
  }
  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */
  with(index, value) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const relativeIndex = ToIntegerOrInfinity(index);
    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;
    const number = +value;
    if (k < 0 || k >= length) {
      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);
    }
    const uint16 = new NativeUint16Array(
      TypedArrayPrototypeGetBuffer(float16bitsArray),
      TypedArrayPrototypeGetByteOffset(float16bitsArray),
      TypedArrayPrototypeGetLength(float16bitsArray)
    );
    const cloned = new _Float16Array(
      TypedArrayPrototypeGetBuffer(
        TypedArrayPrototypeSlice(uint16)
      )
    );
    const array = getFloat16BitsArray(cloned);
    array[k] = roundToFloat16Bits(number);
    return cloned;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */
  map(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    const Constructor = SpeciesConstructor(float16bitsArray, _Float16Array);
    if (Constructor === _Float16Array) {
      const proxy = new _Float16Array(length);
      const array2 = getFloat16BitsArray(proxy);
      for (let i = 0; i < length; ++i) {
        const val = convertToNumber(float16bitsArray[i]);
        array2[i] = roundToFloat16Bits(
          ReflectApply(callback, thisArg, [val, i, this])
        );
      }
      return proxy;
    }
    const array = new Constructor(length);
    assertSpeciesTypedArray(array, length);
    for (let i = 0; i < length; ++i) {
      const val = convertToNumber(float16bitsArray[i]);
      array[i] = ReflectApply(callback, thisArg, [val, i, this]);
    }
    return (
      /** @type {any} */
      array
    );
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */
  filter(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    const kept = [];
    for (let i = 0; i < length; ++i) {
      const val = convertToNumber(float16bitsArray[i]);
      if (ReflectApply(callback, thisArg, [val, i, this])) {
        ArrayPrototypePush(kept, val);
      }
    }
    const Constructor = SpeciesConstructor(float16bitsArray, _Float16Array);
    const array = new Constructor(kept);
    assertSpeciesTypedArray(array);
    return (
      /** @type {any} */
      array
    );
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */
  reduce(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    if (length === 0 && opts.length === 0) {
      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);
    }
    let accumulator, start;
    if (opts.length === 0) {
      accumulator = convertToNumber(float16bitsArray[0]);
      start = 1;
    } else {
      accumulator = opts[0];
      start = 0;
    }
    for (let i = start; i < length; ++i) {
      accumulator = callback(
        accumulator,
        convertToNumber(float16bitsArray[i]),
        i,
        this
      );
    }
    return accumulator;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */
  reduceRight(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    if (length === 0 && opts.length === 0) {
      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);
    }
    let accumulator, start;
    if (opts.length === 0) {
      accumulator = convertToNumber(float16bitsArray[length - 1]);
      start = length - 2;
    } else {
      accumulator = opts[0];
      start = length - 1;
    }
    for (let i = start; i >= 0; --i) {
      accumulator = callback(
        accumulator,
        convertToNumber(float16bitsArray[i]),
        i,
        this
      );
    }
    return accumulator;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */
  forEach(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = 0; i < length; ++i) {
      ReflectApply(callback, thisArg, [
        convertToNumber(float16bitsArray[i]),
        i,
        this
      ]);
    }
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */
  find(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = 0; i < length; ++i) {
      const value = convertToNumber(float16bitsArray[i]);
      if (ReflectApply(callback, thisArg, [value, i, this])) {
        return value;
      }
    }
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */
  findIndex(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = 0; i < length; ++i) {
      const value = convertToNumber(float16bitsArray[i]);
      if (ReflectApply(callback, thisArg, [value, i, this])) {
        return i;
      }
    }
    return -1;
  }
  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */
  findLast(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = length - 1; i >= 0; --i) {
      const value = convertToNumber(float16bitsArray[i]);
      if (ReflectApply(callback, thisArg, [value, i, this])) {
        return value;
      }
    }
  }
  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */
  findLastIndex(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = length - 1; i >= 0; --i) {
      const value = convertToNumber(float16bitsArray[i]);
      if (ReflectApply(callback, thisArg, [value, i, this])) {
        return i;
      }
    }
    return -1;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */
  every(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = 0; i < length; ++i) {
      if (!ReflectApply(callback, thisArg, [
        convertToNumber(float16bitsArray[i]),
        i,
        this
      ])) {
        return false;
      }
    }
    return true;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */
  some(callback, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const thisArg = opts[0];
    for (let i = 0; i < length; ++i) {
      if (ReflectApply(callback, thisArg, [
        convertToNumber(float16bitsArray[i]),
        i,
        this
      ])) {
        return true;
      }
    }
    return false;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */
  set(input, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const targetOffset = ToIntegerOrInfinity(opts[0]);
    if (targetOffset < 0) {
      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);
    }
    if (input == null) {
      throw NativeTypeError(
        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT
      );
    }
    if (isNativeBigIntTypedArray(input)) {
      throw NativeTypeError(
        CANNOT_MIX_BIGINT_AND_OTHER_TYPES
      );
    }
    if (isFloat16Array(input)) {
      return TypedArrayPrototypeSet(
        getFloat16BitsArray(this),
        getFloat16BitsArray(input),
        targetOffset
      );
    }
    if (isNativeTypedArray(input)) {
      const buffer2 = TypedArrayPrototypeGetBuffer(input);
      if (IsDetachedBuffer(buffer2)) {
        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);
      }
    }
    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);
    const src = NativeObject(input);
    const srcLength = ToLength(src.length);
    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {
      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);
    }
    for (let i = 0; i < srcLength; ++i) {
      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);
    }
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */
  reverse() {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    TypedArrayPrototypeReverse(float16bitsArray);
    return this;
  }
  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */
  toReversed() {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const uint16 = new NativeUint16Array(
      TypedArrayPrototypeGetBuffer(float16bitsArray),
      TypedArrayPrototypeGetByteOffset(float16bitsArray),
      TypedArrayPrototypeGetLength(float16bitsArray)
    );
    const cloned = new _Float16Array(
      TypedArrayPrototypeGetBuffer(
        TypedArrayPrototypeSlice(uint16)
      )
    );
    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);
    TypedArrayPrototypeReverse(clonedFloat16bitsArray);
    return cloned;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */
  fill(value, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    TypedArrayPrototypeFill(
      float16bitsArray,
      roundToFloat16Bits(value),
      ...safeIfNeeded(opts)
    );
    return this;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */
  copyWithin(target, start, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));
    return this;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */
  sort(compareFn) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const sortCompare = compareFn !== void 0 ? compareFn : defaultCompare;
    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {
      return sortCompare(convertToNumber(x), convertToNumber(y));
    });
    return this;
  }
  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */
  toSorted(compareFn) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    if (compareFn !== void 0 && typeof compareFn !== "function") {
      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);
    }
    const sortCompare = compareFn !== void 0 ? compareFn : defaultCompare;
    const uint16 = new NativeUint16Array(
      TypedArrayPrototypeGetBuffer(float16bitsArray),
      TypedArrayPrototypeGetByteOffset(float16bitsArray),
      TypedArrayPrototypeGetLength(float16bitsArray)
    );
    const cloned = new _Float16Array(
      TypedArrayPrototypeGetBuffer(
        TypedArrayPrototypeSlice(uint16)
      )
    );
    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);
    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {
      return sortCompare(convertToNumber(x), convertToNumber(y));
    });
    return cloned;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */
  slice(start, end) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const Constructor = SpeciesConstructor(float16bitsArray, _Float16Array);
    if (Constructor === _Float16Array) {
      const uint16 = new NativeUint16Array(
        TypedArrayPrototypeGetBuffer(float16bitsArray),
        TypedArrayPrototypeGetByteOffset(float16bitsArray),
        TypedArrayPrototypeGetLength(float16bitsArray)
      );
      return new _Float16Array(
        TypedArrayPrototypeGetBuffer(
          TypedArrayPrototypeSlice(uint16, start, end)
        )
      );
    }
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    const relativeStart = ToIntegerOrInfinity(start);
    const relativeEnd = end === void 0 ? length : ToIntegerOrInfinity(end);
    let k;
    if (relativeStart === -Infinity) {
      k = 0;
    } else if (relativeStart < 0) {
      k = length + relativeStart > 0 ? length + relativeStart : 0;
    } else {
      k = length < relativeStart ? length : relativeStart;
    }
    let final;
    if (relativeEnd === -Infinity) {
      final = 0;
    } else if (relativeEnd < 0) {
      final = length + relativeEnd > 0 ? length + relativeEnd : 0;
    } else {
      final = length < relativeEnd ? length : relativeEnd;
    }
    const count = final - k > 0 ? final - k : 0;
    const array = new Constructor(count);
    assertSpeciesTypedArray(array, count);
    if (count === 0) {
      return array;
    }
    const buffer2 = TypedArrayPrototypeGetBuffer(float16bitsArray);
    if (IsDetachedBuffer(buffer2)) {
      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);
    }
    let n = 0;
    while (k < final) {
      array[n] = convertToNumber(float16bitsArray[k]);
      ++k;
      ++n;
    }
    return (
      /** @type {any} */
      array
    );
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */
  subarray(begin, end) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const Constructor = SpeciesConstructor(float16bitsArray, _Float16Array);
    const uint16 = new NativeUint16Array(
      TypedArrayPrototypeGetBuffer(float16bitsArray),
      TypedArrayPrototypeGetByteOffset(float16bitsArray),
      TypedArrayPrototypeGetLength(float16bitsArray)
    );
    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);
    const array = new Constructor(
      TypedArrayPrototypeGetBuffer(uint16Subarray),
      TypedArrayPrototypeGetByteOffset(uint16Subarray),
      TypedArrayPrototypeGetLength(uint16Subarray)
    );
    assertSpeciesTypedArray(array);
    return (
      /** @type {any} */
      array
    );
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */
  indexOf(element, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    let from = ToIntegerOrInfinity(opts[0]);
    if (from === Infinity) {
      return -1;
    }
    if (from < 0) {
      from += length;
      if (from < 0) {
        from = 0;
      }
    }
    for (let i = from; i < length; ++i) {
      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {
        return i;
      }
    }
    return -1;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */
  lastIndexOf(element, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;
    if (from === -Infinity) {
      return -1;
    }
    if (from >= 0) {
      from = from < length - 1 ? from : length - 1;
    } else {
      from += length;
    }
    for (let i = from; i >= 0; --i) {
      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {
        return i;
      }
    }
    return -1;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */
  includes(element, ...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const length = TypedArrayPrototypeGetLength(float16bitsArray);
    let from = ToIntegerOrInfinity(opts[0]);
    if (from === Infinity) {
      return false;
    }
    if (from < 0) {
      from += length;
      if (from < 0) {
        from = 0;
      }
    }
    const isNaN = NumberIsNaN(element);
    for (let i = from; i < length; ++i) {
      const value = convertToNumber(float16bitsArray[i]);
      if (isNaN && NumberIsNaN(value)) {
        return true;
      }
      if (value === element) {
        return true;
      }
    }
    return false;
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */
  join(separator) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const array = copyToArray(float16bitsArray);
    return ArrayPrototypeJoin(array, separator);
  }
  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */
  toLocaleString(...opts) {
    assertFloat16Array(this);
    const float16bitsArray = getFloat16BitsArray(this);
    const array = copyToArray(float16bitsArray);
    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));
  }
  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */
  get [SymbolToStringTag]() {
    if (isFloat16Array(this)) {
      return (
        /** @type {any} */
        "Float16Array"
      );
    }
  }
};
ObjectDefineProperty(Float16Array, "BYTES_PER_ELEMENT", {
  value: BYTES_PER_ELEMENT
});
ObjectDefineProperty(Float16Array, brand, {});
ReflectSetPrototypeOf(Float16Array, TypedArray);
var Float16ArrayPrototype = Float16Array.prototype;
ObjectDefineProperty(Float16ArrayPrototype, "BYTES_PER_ELEMENT", {
  value: BYTES_PER_ELEMENT
});
ObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {
  value: Float16ArrayPrototype.values,
  writable: true,
  configurable: true
});
ReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);

// node_modules/@petamoriken/float16/src/DataView.mjs
function getFloat16(dataView, byteOffset, ...opts) {
  return convertToNumber(
    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))
  );
}

// node_modules/xml-utils/get-attribute.mjs
function getAttribute(tag, attributeName, options) {
  const debug = options && options.debug || false;
  if (debug) console.log("[xml-utils] getting " + attributeName + " in " + tag);
  const xml = typeof tag === "object" ? tag.outer : tag;
  const opening = xml.slice(0, xml.indexOf(">") + 1);
  const quotechars = ['"', "'"];
  for (let i = 0; i < quotechars.length; i++) {
    const char = quotechars[i];
    const pattern = attributeName + "\\=" + char + "([^" + char + "]*)" + char;
    if (debug) console.log("[xml-utils] pattern:", pattern);
    const re = new RegExp(pattern);
    const match = re.exec(opening);
    if (debug) console.log("[xml-utils] match:", match);
    if (match) return match[1];
  }
}

// node_modules/xml-utils/index-of-match.mjs
function indexOfMatch(xml, pattern, startIndex) {
  const re = new RegExp(pattern);
  const match = re.exec(xml.slice(startIndex));
  if (match) return startIndex + match.index;
  else return -1;
}

// node_modules/xml-utils/index-of-match-end.mjs
function indexOfMatchEnd(xml, pattern, startIndex) {
  const re = new RegExp(pattern);
  const match = re.exec(xml.slice(startIndex));
  if (match) return startIndex + match.index + match[0].length - 1;
  else return -1;
}

// node_modules/xml-utils/count-substring.mjs
function countSubstring(string, substring) {
  const pattern = new RegExp(substring, "g");
  const match = string.match(pattern);
  return match ? match.length : 0;
}

// node_modules/xml-utils/find-tag-by-name.mjs
function findTagByName(xml, tagName, options) {
  const debug = options && options.debug || false;
  const nested = !(options && typeof options.nested === false);
  const startIndex = options && options.startIndex || 0;
  if (debug) console.log("[xml-utils] starting findTagByName with", tagName, " and ", options);
  const start = indexOfMatch(xml, `<${tagName}[ 
>/]`, startIndex);
  if (debug) console.log("[xml-utils] start:", start);
  if (start === -1) return void 0;
  const afterStart = xml.slice(start + tagName.length);
  let relativeEnd = indexOfMatchEnd(afterStart, "^[^<]*[ /]>", 0);
  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === "/";
  if (debug) console.log("[xml-utils] selfClosing:", selfClosing);
  if (selfClosing === false) {
    if (nested) {
      let startIndex2 = 0;
      let openings = 1;
      let closings = 0;
      while ((relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", startIndex2)) !== -1) {
        const clip = afterStart.substring(startIndex2, relativeEnd + 1);
        openings += countSubstring(clip, "<" + tagName + "[ \n	>]");
        closings += countSubstring(clip, "</" + tagName + ">");
        if (closings >= openings) break;
        startIndex2 = relativeEnd;
      }
    } else {
      relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", 0);
    }
  }
  const end = start + tagName.length + relativeEnd + 1;
  if (debug) console.log("[xml-utils] end:", end);
  if (end === -1) return void 0;
  const outer = xml.slice(start, end);
  let inner;
  if (selfClosing) {
    inner = null;
  } else {
    inner = outer.slice(outer.indexOf(">") + 1, outer.lastIndexOf("<"));
  }
  return { inner, outer, start, end };
}

// node_modules/xml-utils/find-tags-by-name.mjs
function findTagsByName(xml, tagName, options) {
  const tags = [];
  const debug = options && options.debug || false;
  const nested = options && typeof options.nested === "boolean" ? options.nested : true;
  let startIndex = options && options.startIndex || 0;
  let tag;
  while (tag = findTagByName(xml, tagName, { debug, startIndex })) {
    if (nested) {
      startIndex = tag.start + 1 + tagName.length;
    } else {
      startIndex = tag.end;
    }
    tags.push(tag);
  }
  if (debug) console.log("findTagsByName found", tags.length, "tags");
  return tags;
}

// node_modules/geotiff/dist-module/rgb.js
var rgb_exports = {};
__export(rgb_exports, {
  fromBlackIsZero: () => fromBlackIsZero,
  fromCIELab: () => fromCIELab,
  fromCMYK: () => fromCMYK,
  fromPalette: () => fromPalette,
  fromWhiteIsZero: () => fromWhiteIsZero,
  fromYCbCr: () => fromYCbCr
});
function fromWhiteIsZero(raster, max) {
  const { width, height } = raster;
  const rgbRaster = new Uint8Array(width * height * 3);
  let value;
  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
    value = 256 - raster[i] / max * 256;
    rgbRaster[j] = value;
    rgbRaster[j + 1] = value;
    rgbRaster[j + 2] = value;
  }
  return rgbRaster;
}
function fromBlackIsZero(raster, max) {
  const { width, height } = raster;
  const rgbRaster = new Uint8Array(width * height * 3);
  let value;
  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
    value = raster[i] / max * 256;
    rgbRaster[j] = value;
    rgbRaster[j + 1] = value;
    rgbRaster[j + 2] = value;
  }
  return rgbRaster;
}
function fromPalette(raster, colorMap) {
  const { width, height } = raster;
  const rgbRaster = new Uint8Array(width * height * 3);
  const greenOffset = colorMap.length / 3;
  const blueOffset = colorMap.length / 3 * 2;
  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
    const mapIndex = raster[i];
    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;
    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;
    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;
  }
  return rgbRaster;
}
function fromCMYK(cmykRaster) {
  const { width, height } = cmykRaster;
  const rgbRaster = new Uint8Array(width * height * 3);
  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {
    const c = cmykRaster[i];
    const m = cmykRaster[i + 1];
    const y = cmykRaster[i + 2];
    const k = cmykRaster[i + 3];
    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);
    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);
    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);
  }
  return rgbRaster;
}
function fromYCbCr(yCbCrRaster) {
  const { width, height } = yCbCrRaster;
  const rgbRaster = new Uint8ClampedArray(width * height * 3);
  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {
    const y = yCbCrRaster[i];
    const cb = yCbCrRaster[i + 1];
    const cr = yCbCrRaster[i + 2];
    rgbRaster[j] = y + 1.402 * (cr - 128);
    rgbRaster[j + 1] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128);
    rgbRaster[j + 2] = y + 1.772 * (cb - 128);
  }
  return rgbRaster;
}
var Xn = 0.95047;
var Yn = 1;
var Zn = 1.08883;
function fromCIELab(cieLabRaster) {
  const { width, height } = cieLabRaster;
  const rgbRaster = new Uint8Array(width * height * 3);
  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {
    const L = cieLabRaster[i + 0];
    const a_ = cieLabRaster[i + 1] << 24 >> 24;
    const b_ = cieLabRaster[i + 2] << 24 >> 24;
    let y = (L + 16) / 116;
    let x = a_ / 500 + y;
    let z = y - b_ / 200;
    let r;
    let g;
    let b;
    x = Xn * (x * x * x > 8856e-6 ? x * x * x : (x - 16 / 116) / 7.787);
    y = Yn * (y * y * y > 8856e-6 ? y * y * y : (y - 16 / 116) / 7.787);
    z = Zn * (z * z * z > 8856e-6 ? z * z * z : (z - 16 / 116) / 7.787);
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : 12.92 * r;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : 12.92 * g;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : 12.92 * b;
    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;
    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;
    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;
  }
  return rgbRaster;
}

// node_modules/geotiff/dist-module/compression/index.js
var registry = /* @__PURE__ */ new Map();
var preferWorkerMap = /* @__PURE__ */ new Map();
function addDecoder(cases, importFn, preferWorker_ = true) {
  if (!Array.isArray(cases)) {
    cases = [cases];
  }
  cases.forEach((c) => {
    registry.set(c, importFn);
    preferWorkerMap.set(c, preferWorker_);
  });
}
async function getDecoder(fileDirectory) {
  const importFn = registry.get(fileDirectory.Compression);
  if (!importFn) {
    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);
  }
  const Decoder = await importFn();
  return new Decoder(fileDirectory);
}
function preferWorker(fileDirectory) {
  return preferWorkerMap.get(fileDirectory.Compression);
}
addDecoder([void 0, 1], () => import("./raw-AXVWI3ZK.js").then((m) => m.default), false);
addDecoder(5, () => import("./lzw-ZLUPMXDR.js").then((m) => m.default));
addDecoder(6, () => {
  throw new Error("old style JPEG compression is not supported.");
});
addDecoder(7, () => import("./jpeg-EZRDAIK2.js").then((m) => m.default));
addDecoder([8, 32946], () => import("./deflate-ZS3PFNQH.js").then((m) => m.default));
addDecoder(32773, () => import("./packbits-Z3QCQHKM.js").then((m) => m.default));
addDecoder(
  34887,
  () => import("./lerc-QXTOKTCK.js").then(async (m) => {
    await m.zstd.init();
    return m;
  }).then((m) => m.default)
);
addDecoder(
  5e4,
  () => import("./zstd-T4MPXLH7.js").then(async (m) => {
    await m.zstd.init();
    return m;
  }).then((m) => m.default)
);
addDecoder(50001, () => import("./webimage-GDTU4A5N.js").then((m) => m.default), false);

// node_modules/geotiff/dist-module/resample.js
function copyNewSize(array, width, height, samplesPerPixel = 1) {
  return new (Object.getPrototypeOf(array)).constructor(width * height * samplesPerPixel);
}
function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {
  const relX = inWidth / outWidth;
  const relY = inHeight / outHeight;
  return valueArrays.map((array) => {
    const newArray = copyNewSize(array, outWidth, outHeight);
    for (let y = 0; y < outHeight; ++y) {
      const cy = Math.min(Math.round(relY * y), inHeight - 1);
      for (let x = 0; x < outWidth; ++x) {
        const cx = Math.min(Math.round(relX * x), inWidth - 1);
        const value = array[cy * inWidth + cx];
        newArray[y * outWidth + x] = value;
      }
    }
    return newArray;
  });
}
function lerp(v0, v1, t) {
  return (1 - t) * v0 + t * v1;
}
function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {
  const relX = inWidth / outWidth;
  const relY = inHeight / outHeight;
  return valueArrays.map((array) => {
    const newArray = copyNewSize(array, outWidth, outHeight);
    for (let y = 0; y < outHeight; ++y) {
      const rawY = relY * y;
      const yl = Math.floor(rawY);
      const yh = Math.min(Math.ceil(rawY), inHeight - 1);
      for (let x = 0; x < outWidth; ++x) {
        const rawX = relX * x;
        const tx = rawX % 1;
        const xl = Math.floor(rawX);
        const xh = Math.min(Math.ceil(rawX), inWidth - 1);
        const ll = array[yl * inWidth + xl];
        const hl = array[yl * inWidth + xh];
        const lh = array[yh * inWidth + xl];
        const hh = array[yh * inWidth + xh];
        const value = lerp(
          lerp(ll, hl, tx),
          lerp(lh, hh, tx),
          rawY % 1
        );
        newArray[y * outWidth + x] = value;
      }
    }
    return newArray;
  });
}
function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = "nearest") {
  switch (method.toLowerCase()) {
    case "nearest":
      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);
    case "bilinear":
    case "linear":
      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);
    default:
      throw new Error(`Unsupported resampling method: '${method}'`);
  }
}
function resampleNearestInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples) {
  const relX = inWidth / outWidth;
  const relY = inHeight / outHeight;
  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);
  for (let y = 0; y < outHeight; ++y) {
    const cy = Math.min(Math.round(relY * y), inHeight - 1);
    for (let x = 0; x < outWidth; ++x) {
      const cx = Math.min(Math.round(relX * x), inWidth - 1);
      for (let i = 0; i < samples; ++i) {
        const value = valueArray[cy * inWidth * samples + cx * samples + i];
        newArray[y * outWidth * samples + x * samples + i] = value;
      }
    }
  }
  return newArray;
}
function resampleBilinearInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples) {
  const relX = inWidth / outWidth;
  const relY = inHeight / outHeight;
  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);
  for (let y = 0; y < outHeight; ++y) {
    const rawY = relY * y;
    const yl = Math.floor(rawY);
    const yh = Math.min(Math.ceil(rawY), inHeight - 1);
    for (let x = 0; x < outWidth; ++x) {
      const rawX = relX * x;
      const tx = rawX % 1;
      const xl = Math.floor(rawX);
      const xh = Math.min(Math.ceil(rawX), inWidth - 1);
      for (let i = 0; i < samples; ++i) {
        const ll = valueArray[yl * inWidth * samples + xl * samples + i];
        const hl = valueArray[yl * inWidth * samples + xh * samples + i];
        const lh = valueArray[yh * inWidth * samples + xl * samples + i];
        const hh = valueArray[yh * inWidth * samples + xh * samples + i];
        const value = lerp(
          lerp(ll, hl, tx),
          lerp(lh, hh, tx),
          rawY % 1
        );
        newArray[y * outWidth * samples + x * samples + i] = value;
      }
    }
  }
  return newArray;
}
function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = "nearest") {
  switch (method.toLowerCase()) {
    case "nearest":
      return resampleNearestInterleaved(
        valueArray,
        inWidth,
        inHeight,
        outWidth,
        outHeight,
        samples
      );
    case "bilinear":
    case "linear":
      return resampleBilinearInterleaved(
        valueArray,
        inWidth,
        inHeight,
        outWidth,
        outHeight,
        samples
      );
    default:
      throw new Error(`Unsupported resampling method: '${method}'`);
  }
}

// node_modules/geotiff/dist-module/geotiffimage.js
function sum(array, start, end) {
  let s = 0;
  for (let i = start; i < end; ++i) {
    s += array[i];
  }
  return s;
}
function arrayForType(format, bitsPerSample, size) {
  switch (format) {
    case 1:
      if (bitsPerSample <= 8) {
        return new Uint8Array(size);
      } else if (bitsPerSample <= 16) {
        return new Uint16Array(size);
      } else if (bitsPerSample <= 32) {
        return new Uint32Array(size);
      }
      break;
    case 2:
      if (bitsPerSample === 8) {
        return new Int8Array(size);
      } else if (bitsPerSample === 16) {
        return new Int16Array(size);
      } else if (bitsPerSample === 32) {
        return new Int32Array(size);
      }
      break;
    case 3:
      switch (bitsPerSample) {
        case 16:
        case 32:
          return new Float32Array(size);
        case 64:
          return new Float64Array(size);
        default:
          break;
      }
      break;
    default:
      break;
  }
  throw Error("Unsupported data format/bitsPerSample");
}
function needsNormalization(format, bitsPerSample) {
  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {
    return false;
  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {
    return false;
  }
  return true;
}
function normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {
  const view = new DataView(inBuffer);
  const outSize = planarConfiguration === 2 ? tileHeight * tileWidth : tileHeight * tileWidth * samplesPerPixel;
  const samplesToTransfer = planarConfiguration === 2 ? 1 : samplesPerPixel;
  const outArray = arrayForType(format, bitsPerSample, outSize);
  const bitMask = parseInt("1".repeat(bitsPerSample), 2);
  if (format === 1) {
    let pixelBitSkip;
    if (planarConfiguration === 1) {
      pixelBitSkip = samplesPerPixel * bitsPerSample;
    } else {
      pixelBitSkip = bitsPerSample;
    }
    let bitsPerLine = tileWidth * pixelBitSkip;
    if ((bitsPerLine & 7) !== 0) {
      bitsPerLine = bitsPerLine + 7 & ~7;
    }
    for (let y = 0; y < tileHeight; ++y) {
      const lineBitOffset = y * bitsPerLine;
      for (let x = 0; x < tileWidth; ++x) {
        const pixelBitOffset = lineBitOffset + x * samplesToTransfer * bitsPerSample;
        for (let i = 0; i < samplesToTransfer; ++i) {
          const bitOffset = pixelBitOffset + i * bitsPerSample;
          const outIndex = (y * tileWidth + x) * samplesToTransfer + i;
          const byteOffset = Math.floor(bitOffset / 8);
          const innerBitOffset = bitOffset % 8;
          if (innerBitOffset + bitsPerSample <= 8) {
            outArray[outIndex] = view.getUint8(byteOffset) >> 8 - bitsPerSample - innerBitOffset & bitMask;
          } else if (innerBitOffset + bitsPerSample <= 16) {
            outArray[outIndex] = view.getUint16(byteOffset) >> 16 - bitsPerSample - innerBitOffset & bitMask;
          } else if (innerBitOffset + bitsPerSample <= 24) {
            const raw = view.getUint16(byteOffset) << 8 | view.getUint8(byteOffset + 2);
            outArray[outIndex] = raw >> 24 - bitsPerSample - innerBitOffset & bitMask;
          } else {
            outArray[outIndex] = view.getUint32(byteOffset) >> 32 - bitsPerSample - innerBitOffset & bitMask;
          }
        }
      }
    }
  } else if (format === 3) {
  }
  return outArray.buffer;
}
var GeoTIFFImage = class {
  /**
   * @constructor
   * @param {Object} fileDirectory The parsed file directory
   * @param {Object} geoKeys The parsed geo-keys
   * @param {DataView} dataView The DataView for the underlying file.
   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian
   * @param {Boolean} cache Whether or not decoded tiles shall be cached
   * @param {import('./source/basesource').BaseSource} source The datasource to read from
   */
  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {
    this.fileDirectory = fileDirectory;
    this.geoKeys = geoKeys;
    this.dataView = dataView;
    this.littleEndian = littleEndian;
    this.tiles = cache ? {} : null;
    this.isTiled = !fileDirectory.StripOffsets;
    const planarConfiguration = fileDirectory.PlanarConfiguration;
    this.planarConfiguration = typeof planarConfiguration === "undefined" ? 1 : planarConfiguration;
    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {
      throw new Error("Invalid planar configuration.");
    }
    this.source = source;
  }
  /**
   * Returns the associated parsed file directory.
   * @returns {Object} the parsed file directory
   */
  getFileDirectory() {
    return this.fileDirectory;
  }
  /**
   * Returns the associated parsed geo keys.
   * @returns {Object} the parsed geo keys
   */
  getGeoKeys() {
    return this.geoKeys;
  }
  /**
   * Returns the width of the image.
   * @returns {Number} the width of the image
   */
  getWidth() {
    return this.fileDirectory.ImageWidth;
  }
  /**
   * Returns the height of the image.
   * @returns {Number} the height of the image
   */
  getHeight() {
    return this.fileDirectory.ImageLength;
  }
  /**
   * Returns the number of samples per pixel.
   * @returns {Number} the number of samples per pixel
   */
  getSamplesPerPixel() {
    return typeof this.fileDirectory.SamplesPerPixel !== "undefined" ? this.fileDirectory.SamplesPerPixel : 1;
  }
  /**
   * Returns the width of each tile.
   * @returns {Number} the width of each tile
   */
  getTileWidth() {
    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();
  }
  /**
   * Returns the height of each tile.
   * @returns {Number} the height of each tile
   */
  getTileHeight() {
    if (this.isTiled) {
      return this.fileDirectory.TileLength;
    }
    if (typeof this.fileDirectory.RowsPerStrip !== "undefined") {
      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());
    }
    return this.getHeight();
  }
  getBlockWidth() {
    return this.getTileWidth();
  }
  getBlockHeight(y) {
    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {
      return this.getTileHeight();
    } else {
      return this.getHeight() - y * this.getTileHeight();
    }
  }
  /**
   * Calculates the number of bytes for each pixel across all samples. Only full
   * bytes are supported, an exception is thrown when this is not the case.
   * @returns {Number} the bytes per pixel
   */
  getBytesPerPixel() {
    let bytes = 0;
    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {
      bytes += this.getSampleByteSize(i);
    }
    return bytes;
  }
  getSampleByteSize(i) {
    if (i >= this.fileDirectory.BitsPerSample.length) {
      throw new RangeError(`Sample index ${i} is out of range.`);
    }
    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);
  }
  getReaderForSample(sampleIndex) {
    const format = this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];
    switch (format) {
      case 1:
        if (bitsPerSample <= 8) {
          return DataView.prototype.getUint8;
        } else if (bitsPerSample <= 16) {
          return DataView.prototype.getUint16;
        } else if (bitsPerSample <= 32) {
          return DataView.prototype.getUint32;
        }
        break;
      case 2:
        if (bitsPerSample <= 8) {
          return DataView.prototype.getInt8;
        } else if (bitsPerSample <= 16) {
          return DataView.prototype.getInt16;
        } else if (bitsPerSample <= 32) {
          return DataView.prototype.getInt32;
        }
        break;
      case 3:
        switch (bitsPerSample) {
          case 16:
            return function(offset, littleEndian) {
              return getFloat16(this, offset, littleEndian);
            };
          case 32:
            return DataView.prototype.getFloat32;
          case 64:
            return DataView.prototype.getFloat64;
          default:
            break;
        }
        break;
      default:
        break;
    }
    throw Error("Unsupported data format/bitsPerSample");
  }
  getSampleFormat(sampleIndex = 0) {
    return this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
  }
  getBitsPerSample(sampleIndex = 0) {
    return this.fileDirectory.BitsPerSample[sampleIndex];
  }
  getArrayForSample(sampleIndex, size) {
    const format = this.getSampleFormat(sampleIndex);
    const bitsPerSample = this.getBitsPerSample(sampleIndex);
    return arrayForType(format, bitsPerSample, size);
  }
  /**
   * Returns the decoded strip or tile.
   * @param {Number} x the strip or tile x-offset
   * @param {Number} y the tile y-offset (0 for stripped images)
   * @param {Number} sample the sample to get for separated samples
   * @param {import("./geotiff").Pool|import("./geotiff").BaseDecoder} poolOrDecoder the decoder or decoder pool
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   * @returns {Promise.<{x: number, y: number, sample: number, data: ArrayBuffer}>} the decoded strip or tile
   */
  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {
    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());
    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());
    let index;
    const { tiles } = this;
    if (this.planarConfiguration === 1) {
      index = y * numTilesPerRow + x;
    } else if (this.planarConfiguration === 2) {
      index = sample * numTilesPerRow * numTilesPerCol + y * numTilesPerRow + x;
    }
    let offset;
    let byteCount;
    if (this.isTiled) {
      offset = this.fileDirectory.TileOffsets[index];
      byteCount = this.fileDirectory.TileByteCounts[index];
    } else {
      offset = this.fileDirectory.StripOffsets[index];
      byteCount = this.fileDirectory.StripByteCounts[index];
    }
    if (byteCount === 0) {
      const nPixels = this.getBlockHeight(y) * this.getTileWidth();
      const bytesPerPixel = this.planarConfiguration === 2 ? this.getSampleByteSize(sample) : this.getBytesPerPixel();
      const data = new ArrayBuffer(nPixels * bytesPerPixel);
      const view = this.getArrayForSample(sample, data);
      view.fill(this.getGDALNoData() || 0);
      return { x, y, sample, data };
    }
    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];
    let request;
    if (tiles === null || !tiles[index]) {
      request = (async () => {
        let data = await poolOrDecoder.decode(this.fileDirectory, slice);
        const sampleFormat = this.getSampleFormat();
        const bitsPerSample = this.getBitsPerSample();
        if (needsNormalization(sampleFormat, bitsPerSample)) {
          data = normalizeArray(
            data,
            sampleFormat,
            this.planarConfiguration,
            this.getSamplesPerPixel(),
            bitsPerSample,
            this.getTileWidth(),
            this.getBlockHeight(y)
          );
        }
        return data;
      })();
      if (tiles !== null) {
        tiles[index] = request;
      }
    } else {
      request = tiles[index];
    }
    return { x, y, sample, data: await request };
  }
  /**
   * Internal read function.
   * @private
   * @param {Array} imageWindow The image window in pixel coordinates
   * @param {Array} samples The selected samples (0-based indices)
   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into
   * @param {Boolean} interleave Whether or not to write in an interleaved manner
   * @param {import("./geotiff").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool
   * @param {number} width the width of window to be read into
   * @param {number} height the height of window to be read into
   * @param {number} resampleMethod the resampling method to be used when interpolating
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   * @returns {Promise<ReadRasterResult>}
   */
  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal) {
    const tileWidth = this.getTileWidth();
    const tileHeight = this.getTileHeight();
    const imageWidth = this.getWidth();
    const imageHeight = this.getHeight();
    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);
    const maxXTile = Math.min(
      Math.ceil(imageWindow[2] / tileWidth),
      Math.ceil(imageWidth / tileWidth)
    );
    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);
    const maxYTile = Math.min(
      Math.ceil(imageWindow[3] / tileHeight),
      Math.ceil(imageHeight / tileHeight)
    );
    const windowWidth = imageWindow[2] - imageWindow[0];
    let bytesPerPixel = this.getBytesPerPixel();
    const srcSampleOffsets = [];
    const sampleReaders = [];
    for (let i = 0; i < samples.length; ++i) {
      if (this.planarConfiguration === 1) {
        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);
      } else {
        srcSampleOffsets.push(0);
      }
      sampleReaders.push(this.getReaderForSample(samples[i]));
    }
    const promises = [];
    const { littleEndian } = this;
    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {
      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {
        let getPromise;
        if (this.planarConfiguration === 1) {
          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);
        }
        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {
          const si = sampleIndex;
          const sample = samples[sampleIndex];
          if (this.planarConfiguration === 2) {
            bytesPerPixel = this.getSampleByteSize(sample);
            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);
          }
          const promise = getPromise.then((tile) => {
            const buffer2 = tile.data;
            const dataView = new DataView(buffer2);
            const blockHeight = this.getBlockHeight(tile.y);
            const firstLine = tile.y * tileHeight;
            const firstCol = tile.x * tileWidth;
            const lastLine = firstLine + blockHeight;
            const lastCol = (tile.x + 1) * tileWidth;
            const reader = sampleReaders[si];
            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);
            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);
            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {
              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {
                const pixelOffset = (y * tileWidth + x) * bytesPerPixel;
                const value = reader.call(
                  dataView,
                  pixelOffset + srcSampleOffsets[si],
                  littleEndian
                );
                let windowCoordinate;
                if (interleave) {
                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0]) * samples.length + si;
                  valueArrays[windowCoordinate] = value;
                } else {
                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x + firstCol - imageWindow[0];
                  valueArrays[si][windowCoordinate] = value;
                }
              }
            }
          });
          promises.push(promise);
        }
      }
    }
    await Promise.all(promises);
    if (width && imageWindow[2] - imageWindow[0] !== width || height && imageWindow[3] - imageWindow[1] !== height) {
      let resampled;
      if (interleave) {
        resampled = resampleInterleaved(
          valueArrays,
          imageWindow[2] - imageWindow[0],
          imageWindow[3] - imageWindow[1],
          width,
          height,
          samples.length,
          resampleMethod
        );
      } else {
        resampled = resample(
          valueArrays,
          imageWindow[2] - imageWindow[0],
          imageWindow[3] - imageWindow[1],
          width,
          height,
          resampleMethod
        );
      }
      resampled.width = width;
      resampled.height = height;
      return resampled;
    }
    valueArrays.width = width || imageWindow[2] - imageWindow[0];
    valueArrays.height = height || imageWindow[3] - imageWindow[1];
    return valueArrays;
  }
  /**
   * Reads raster data from the image. This function reads all selected samples
   * into separate arrays of the correct type for that sample or into a single
   * combined array when `interleave` is set. When provided, only a subset
   * of the raster is read for each sample.
   *
   * @param {ReadRasterOptions} [options={}] optional parameters
   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise
   */
  async readRasters({
    window: wnd,
    samples = [],
    interleave,
    pool = null,
    width,
    height,
    resampleMethod,
    fillValue,
    signal
  } = {}) {
    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];
    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
      throw new Error("Invalid subsets");
    }
    const imageWindowWidth = imageWindow[2] - imageWindow[0];
    const imageWindowHeight = imageWindow[3] - imageWindow[1];
    const numPixels = imageWindowWidth * imageWindowHeight;
    const samplesPerPixel = this.getSamplesPerPixel();
    if (!samples || !samples.length) {
      for (let i = 0; i < samplesPerPixel; ++i) {
        samples.push(i);
      }
    } else {
      for (let i = 0; i < samples.length; ++i) {
        if (samples[i] >= samplesPerPixel) {
          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));
        }
      }
    }
    let valueArrays;
    if (interleave) {
      const format = this.fileDirectory.SampleFormat ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;
      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);
      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);
      if (fillValue) {
        valueArrays.fill(fillValue);
      }
    } else {
      valueArrays = [];
      for (let i = 0; i < samples.length; ++i) {
        const valueArray = this.getArrayForSample(samples[i], numPixels);
        if (Array.isArray(fillValue) && i < fillValue.length) {
          valueArray.fill(fillValue[i]);
        } else if (fillValue && !Array.isArray(fillValue)) {
          valueArray.fill(fillValue);
        }
        valueArrays.push(valueArray);
      }
    }
    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);
    const result = await this._readRaster(
      imageWindow,
      samples,
      valueArrays,
      interleave,
      poolOrDecoder,
      width,
      height,
      resampleMethod,
      signal
    );
    return result;
  }
  /**
   * Reads raster data from the image as RGB.
   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.
   * When no other method is applicable, the first sample is used to produce a
   * grayscale image.
   * When provided, only a subset of the raster is read for each sample.
   *
   * @param {Object} [options] optional parameters
   * @param {Array<number>} [options.window] the subset to read data from in pixels.
   * @param {boolean} [options.interleave=true] whether the data shall be read
   *                                             in one single array or separate
   *                                             arrays.
   * @param {import("./geotiff").Pool} [options.pool=null] The optional decoder pool to use.
   * @param {number} [options.width] The desired width of the output. When the width is no the
   *                                 same as the images, resampling will be performed.
   * @param {number} [options.height] The desired height of the output. When the width is no the
   *                                  same as the images, resampling will be performed.
   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.
   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.
   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is
   *                                       to be aborted
   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise
   */
  async readRGB({
    window,
    interleave = true,
    pool = null,
    width,
    height,
    resampleMethod,
    enableAlpha = false,
    signal
  } = {}) {
    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];
    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
      throw new Error("Invalid subsets");
    }
    const pi = this.fileDirectory.PhotometricInterpretation;
    if (pi === photometricInterpretations.RGB) {
      let s = [0, 1, 2];
      if (!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified) && enableAlpha) {
        s = [];
        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {
          s.push(i);
        }
      }
      return this.readRasters({
        window,
        interleave,
        samples: s,
        pool,
        width,
        height,
        resampleMethod,
        signal
      });
    }
    let samples;
    switch (pi) {
      case photometricInterpretations.WhiteIsZero:
      case photometricInterpretations.BlackIsZero:
      case photometricInterpretations.Palette:
        samples = [0];
        break;
      case photometricInterpretations.CMYK:
        samples = [0, 1, 2, 3];
        break;
      case photometricInterpretations.YCbCr:
      case photometricInterpretations.CIELab:
        samples = [0, 1, 2];
        break;
      default:
        throw new Error("Invalid or unsupported photometric interpretation.");
    }
    const subOptions = {
      window: imageWindow,
      interleave: true,
      samples,
      pool,
      width,
      height,
      resampleMethod,
      signal
    };
    const { fileDirectory } = this;
    const raster = await this.readRasters(subOptions);
    const max = 2 ** this.fileDirectory.BitsPerSample[0];
    let data;
    switch (pi) {
      case photometricInterpretations.WhiteIsZero:
        data = fromWhiteIsZero(raster, max);
        break;
      case photometricInterpretations.BlackIsZero:
        data = fromBlackIsZero(raster, max);
        break;
      case photometricInterpretations.Palette:
        data = fromPalette(raster, fileDirectory.ColorMap);
        break;
      case photometricInterpretations.CMYK:
        data = fromCMYK(raster);
        break;
      case photometricInterpretations.YCbCr:
        data = fromYCbCr(raster);
        break;
      case photometricInterpretations.CIELab:
        data = fromCIELab(raster);
        break;
      default:
        throw new Error("Unsupported photometric interpretation.");
    }
    if (!interleave) {
      const red = new Uint8Array(data.length / 3);
      const green = new Uint8Array(data.length / 3);
      const blue = new Uint8Array(data.length / 3);
      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {
        red[j] = data[i];
        green[j] = data[i + 1];
        blue[j] = data[i + 2];
      }
      data = [red, green, blue];
    }
    data.width = raster.width;
    data.height = raster.height;
    return data;
  }
  /**
   * Returns an array of tiepoints.
   * @returns {Object[]}
   */
  getTiePoints() {
    if (!this.fileDirectory.ModelTiepoint) {
      return [];
    }
    const tiePoints = [];
    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {
      tiePoints.push({
        i: this.fileDirectory.ModelTiepoint[i],
        j: this.fileDirectory.ModelTiepoint[i + 1],
        k: this.fileDirectory.ModelTiepoint[i + 2],
        x: this.fileDirectory.ModelTiepoint[i + 3],
        y: this.fileDirectory.ModelTiepoint[i + 4],
        z: this.fileDirectory.ModelTiepoint[i + 5]
      });
    }
    return tiePoints;
  }
  /**
   * Returns the parsed GDAL metadata items.
   *
   * If sample is passed to null, dataset-level metadata will be returned.
   * Otherwise only metadata specific to the provided sample will be returned.
   *
   * @param {number} [sample=null] The sample index.
   * @returns {Object}
   */
  getGDALMetadata(sample = null) {
    const metadata = {};
    if (!this.fileDirectory.GDAL_METADATA) {
      return null;
    }
    const string = this.fileDirectory.GDAL_METADATA;
    let items = findTagsByName(string, "Item");
    if (sample === null) {
      items = items.filter((item) => getAttribute(item, "sample") === void 0);
    } else {
      items = items.filter((item) => Number(getAttribute(item, "sample")) === sample);
    }
    for (let i = 0; i < items.length; ++i) {
      const item = items[i];
      metadata[getAttribute(item, "name")] = item.inner;
    }
    return metadata;
  }
  /**
   * Returns the GDAL nodata value
   * @returns {number|null}
   */
  getGDALNoData() {
    if (!this.fileDirectory.GDAL_NODATA) {
      return null;
    }
    const string = this.fileDirectory.GDAL_NODATA;
    return Number(string.substring(0, string.length - 1));
  }
  /**
   * Returns the image origin as a XYZ-vector. When the image has no affine
   * transformation, then an exception is thrown.
   * @returns {Array<number>} The origin as a vector
   */
  getOrigin() {
    const tiePoints = this.fileDirectory.ModelTiepoint;
    const modelTransformation = this.fileDirectory.ModelTransformation;
    if (tiePoints && tiePoints.length === 6) {
      return [
        tiePoints[3],
        tiePoints[4],
        tiePoints[5]
      ];
    }
    if (modelTransformation) {
      return [
        modelTransformation[3],
        modelTransformation[7],
        modelTransformation[11]
      ];
    }
    throw new Error("The image does not have an affine transformation.");
  }
  /**
   * Returns the image resolution as a XYZ-vector. When the image has no affine
   * transformation, then an exception is thrown.
   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from
   *                                             in cases when the current image does not have the
   *                                             required tags on its own.
   * @returns {Array<number>} The resolution as a vector
   */
  getResolution(referenceImage = null) {
    const modelPixelScale = this.fileDirectory.ModelPixelScale;
    const modelTransformation = this.fileDirectory.ModelTransformation;
    if (modelPixelScale) {
      return [
        modelPixelScale[0],
        -modelPixelScale[1],
        modelPixelScale[2]
      ];
    }
    if (modelTransformation) {
      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {
        return [
          modelTransformation[0],
          -modelTransformation[5],
          modelTransformation[10]
        ];
      }
      return [
        Math.sqrt(modelTransformation[0] * modelTransformation[0] + modelTransformation[4] * modelTransformation[4]),
        -Math.sqrt(modelTransformation[1] * modelTransformation[1] + modelTransformation[5] * modelTransformation[5]),
        modelTransformation[10]
      ];
    }
    if (referenceImage) {
      const [refResX, refResY, refResZ] = referenceImage.getResolution();
      return [
        refResX * referenceImage.getWidth() / this.getWidth(),
        refResY * referenceImage.getHeight() / this.getHeight(),
        refResZ * referenceImage.getWidth() / this.getWidth()
      ];
    }
    throw new Error("The image does not have an affine transformation.");
  }
  /**
   * Returns whether or not the pixels of the image depict an area (or point).
   * @returns {Boolean} Whether the pixels are a point
   */
  pixelIsArea() {
    return this.geoKeys.GTRasterTypeGeoKey === 1;
  }
  /**
   * Returns the image bounding box as an array of 4 values: min-x, min-y,
   * max-x and max-y. When the image has no affine transformation, then an
   * exception is thrown.
   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid
   *                                   without adjustment for ModelTransformation.
   * @returns {Array<number>} The bounding box
   */
  getBoundingBox(tilegrid = false) {
    const height = this.getHeight();
    const width = this.getWidth();
    if (this.fileDirectory.ModelTransformation && !tilegrid) {
      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;
      const corners = [
        [0, 0],
        [0, height],
        [width, 0],
        [width, height]
      ];
      const projected = corners.map(([I, J]) => [
        d + a * I + b * J,
        h + e * I + f * J
      ]);
      const xs = projected.map((pt) => pt[0]);
      const ys = projected.map((pt) => pt[1]);
      return [
        Math.min(...xs),
        Math.min(...ys),
        Math.max(...xs),
        Math.max(...ys)
      ];
    } else {
      const origin = this.getOrigin();
      const resolution = this.getResolution();
      const x1 = origin[0];
      const y1 = origin[1];
      const x2 = x1 + resolution[0] * width;
      const y2 = y1 + resolution[1] * height;
      return [
        Math.min(x1, x2),
        Math.min(y1, y2),
        Math.max(x1, x2),
        Math.max(y1, y2)
      ];
    }
  }
};
var geotiffimage_default = GeoTIFFImage;

// node_modules/geotiff/dist-module/dataview64.js
var DataView64 = class {
  constructor(arrayBuffer) {
    this._dataView = new DataView(arrayBuffer);
  }
  get buffer() {
    return this._dataView.buffer;
  }
  getUint64(offset, littleEndian) {
    const left = this.getUint32(offset, littleEndian);
    const right = this.getUint32(offset + 4, littleEndian);
    let combined;
    if (littleEndian) {
      combined = left + 2 ** 32 * right;
      if (!Number.isSafeInteger(combined)) {
        throw new Error(
          `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`
        );
      }
      return combined;
    }
    combined = 2 ** 32 * left + right;
    if (!Number.isSafeInteger(combined)) {
      throw new Error(
        `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`
      );
    }
    return combined;
  }
  // adapted from https://stackoverflow.com/a/55338384/8060591
  getInt64(offset, littleEndian) {
    let value = 0;
    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 128) > 0;
    let carrying = true;
    for (let i = 0; i < 8; i++) {
      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));
      if (isNegative) {
        if (carrying) {
          if (byte !== 0) {
            byte = ~(byte - 1) & 255;
            carrying = false;
          }
        } else {
          byte = ~byte & 255;
        }
      }
      value += byte * 256 ** i;
    }
    if (isNegative) {
      value = -value;
    }
    return value;
  }
  getUint8(offset, littleEndian) {
    return this._dataView.getUint8(offset, littleEndian);
  }
  getInt8(offset, littleEndian) {
    return this._dataView.getInt8(offset, littleEndian);
  }
  getUint16(offset, littleEndian) {
    return this._dataView.getUint16(offset, littleEndian);
  }
  getInt16(offset, littleEndian) {
    return this._dataView.getInt16(offset, littleEndian);
  }
  getUint32(offset, littleEndian) {
    return this._dataView.getUint32(offset, littleEndian);
  }
  getInt32(offset, littleEndian) {
    return this._dataView.getInt32(offset, littleEndian);
  }
  getFloat16(offset, littleEndian) {
    return getFloat16(this._dataView, offset, littleEndian);
  }
  getFloat32(offset, littleEndian) {
    return this._dataView.getFloat32(offset, littleEndian);
  }
  getFloat64(offset, littleEndian) {
    return this._dataView.getFloat64(offset, littleEndian);
  }
};

// node_modules/geotiff/dist-module/dataslice.js
var DataSlice = class {
  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {
    this._dataView = new DataView(arrayBuffer);
    this._sliceOffset = sliceOffset;
    this._littleEndian = littleEndian;
    this._bigTiff = bigTiff;
  }
  get sliceOffset() {
    return this._sliceOffset;
  }
  get sliceTop() {
    return this._sliceOffset + this.buffer.byteLength;
  }
  get littleEndian() {
    return this._littleEndian;
  }
  get bigTiff() {
    return this._bigTiff;
  }
  get buffer() {
    return this._dataView.buffer;
  }
  covers(offset, length) {
    return this.sliceOffset <= offset && this.sliceTop >= offset + length;
  }
  readUint8(offset) {
    return this._dataView.getUint8(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readInt8(offset) {
    return this._dataView.getInt8(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readUint16(offset) {
    return this._dataView.getUint16(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readInt16(offset) {
    return this._dataView.getInt16(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readUint32(offset) {
    return this._dataView.getUint32(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readInt32(offset) {
    return this._dataView.getInt32(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readFloat32(offset) {
    return this._dataView.getFloat32(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readFloat64(offset) {
    return this._dataView.getFloat64(
      offset - this._sliceOffset,
      this._littleEndian
    );
  }
  readUint64(offset) {
    const left = this.readUint32(offset);
    const right = this.readUint32(offset + 4);
    let combined;
    if (this._littleEndian) {
      combined = left + 2 ** 32 * right;
      if (!Number.isSafeInteger(combined)) {
        throw new Error(
          `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`
        );
      }
      return combined;
    }
    combined = 2 ** 32 * left + right;
    if (!Number.isSafeInteger(combined)) {
      throw new Error(
        `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`
      );
    }
    return combined;
  }
  // adapted from https://stackoverflow.com/a/55338384/8060591
  readInt64(offset) {
    let value = 0;
    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 128) > 0;
    let carrying = true;
    for (let i = 0; i < 8; i++) {
      let byte = this._dataView.getUint8(
        offset + (this._littleEndian ? i : 7 - i)
      );
      if (isNegative) {
        if (carrying) {
          if (byte !== 0) {
            byte = ~(byte - 1) & 255;
            carrying = false;
          }
        } else {
          byte = ~byte & 255;
        }
      }
      value += byte * 256 ** i;
    }
    if (isNegative) {
      value = -value;
    }
    return value;
  }
  readOffset(offset) {
    if (this._bigTiff) {
      return this.readUint64(offset);
    }
    return this.readUint32(offset);
  }
};

// node_modules/web-worker/src/browser/index.js
var browser_default = typeof Worker !== "undefined" ? Worker : void 0;

// node_modules/geotiff/dist-module/worker/create.js
function create() {
  const source = 'function A(A,I,g){return I in A?Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}):A[I]=g,A}function I(A,I){if(null==A)return{};var g,B,C=function(A,I){if(null==A)return{};var g,B,C={},Q=Object.keys(A);for(B=0;B<Q.length;B++)g=Q[B],I.indexOf(g)>=0||(C[g]=A[g]);return C}(A,I);if(Object.getOwnPropertySymbols){var Q=Object.getOwnPropertySymbols(A);for(B=0;B<Q.length;B++)g=Q[B],I.indexOf(g)>=0||Object.prototype.propertyIsEnumerable.call(A,g)&&(C[g]=A[g])}return C}function g(A,I,g,B,C,Q,E){try{var i=A[Q](E),o=i.value}catch(A){return void g(A)}i.done?I(o):Promise.resolve(o).then(B,C)}function B(A){return function(){var I=this,B=arguments;return new Promise((function(C,Q){var E=A.apply(I,B);function i(A){g(E,C,Q,i,o,"next",A)}function o(A){g(E,C,Q,i,o,"throw",A)}i(void 0)}))}}function C(A){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},C(A)}var Q={exports:{}};!function(A){var I=function(A){var I,g=Object.prototype,B=g.hasOwnProperty,Q="function"==typeof Symbol?Symbol:{},E=Q.iterator||"@@iterator",i=Q.asyncIterator||"@@asyncIterator",o=Q.toStringTag||"@@toStringTag";function e(A,I,g){return Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}),A[I]}try{e({},"")}catch(A){e=function(A,I,g){return A[I]=g}}function t(A,I,g,B){var C=I&&I.prototype instanceof h?I:h,Q=Object.create(C.prototype),E=new u(B||[]);return Q._invoke=function(A,I,g){var B=r;return function(C,Q){if(B===n)throw new Error("Generator is already running");if(B===D){if("throw"===C)throw Q;return d()}for(g.method=C,g.arg=Q;;){var E=g.delegate;if(E){var i=R(E,g);if(i){if(i===w)continue;return i}}if("next"===g.method)g.sent=g._sent=g.arg;else if("throw"===g.method){if(B===r)throw B=D,g.arg;g.dispatchException(g.arg)}else"return"===g.method&&g.abrupt("return",g.arg);B=n;var o=a(A,I,g);if("normal"===o.type){if(B=g.done?D:s,o.arg===w)continue;return{value:o.arg,done:g.done}}"throw"===o.type&&(B=D,g.method="throw",g.arg=o.arg)}}}(A,g,E),Q}function a(A,I,g){try{return{type:"normal",arg:A.call(I,g)}}catch(A){return{type:"throw",arg:A}}}A.wrap=t;var r="suspendedStart",s="suspendedYield",n="executing",D="completed",w={};function h(){}function y(){}function c(){}var G={};e(G,E,(function(){return this}));var S=Object.getPrototypeOf,N=S&&S(S(Y([])));N&&N!==g&&B.call(N,E)&&(G=N);var F=c.prototype=h.prototype=Object.create(G);function f(A){["next","throw","return"].forEach((function(I){e(A,I,(function(A){return this._invoke(I,A)}))}))}function k(A,I){function g(Q,E,i,o){var e=a(A[Q],A,E);if("throw"!==e.type){var t=e.arg,r=t.value;return r&&"object"===C(r)&&B.call(r,"__await")?I.resolve(r.__await).then((function(A){g("next",A,i,o)}),(function(A){g("throw",A,i,o)})):I.resolve(r).then((function(A){t.value=A,i(t)}),(function(A){return g("throw",A,i,o)}))}o(e.arg)}var Q;this._invoke=function(A,B){function C(){return new I((function(I,C){g(A,B,I,C)}))}return Q=Q?Q.then(C,C):C()}}function R(A,g){var B=A.iterator[g.method];if(B===I){if(g.delegate=null,"throw"===g.method){if(A.iterator.return&&(g.method="return",g.arg=I,R(A,g),"throw"===g.method))return w;g.method="throw",g.arg=new TypeError("The iterator does not provide a \'throw\' method")}return w}var C=a(B,A.iterator,g.arg);if("throw"===C.type)return g.method="throw",g.arg=C.arg,g.delegate=null,w;var Q=C.arg;return Q?Q.done?(g[A.resultName]=Q.value,g.next=A.nextLoc,"return"!==g.method&&(g.method="next",g.arg=I),g.delegate=null,w):Q:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,w)}function L(A){var I={tryLoc:A[0]};1 in A&&(I.catchLoc=A[1]),2 in A&&(I.finallyLoc=A[2],I.afterLoc=A[3]),this.tryEntries.push(I)}function U(A){var I=A.completion||{};I.type="normal",delete I.arg,A.completion=I}function u(A){this.tryEntries=[{tryLoc:"root"}],A.forEach(L,this),this.reset(!0)}function Y(A){if(A){var g=A[E];if(g)return g.call(A);if("function"==typeof A.next)return A;if(!isNaN(A.length)){var C=-1,Q=function g(){for(;++C<A.length;)if(B.call(A,C))return g.value=A[C],g.done=!1,g;return g.value=I,g.done=!0,g};return Q.next=Q}}return{next:d}}function d(){return{value:I,done:!0}}return y.prototype=c,e(F,"constructor",c),e(c,"constructor",y),y.displayName=e(c,o,"GeneratorFunction"),A.isGeneratorFunction=function(A){var I="function"==typeof A&&A.constructor;return!!I&&(I===y||"GeneratorFunction"===(I.displayName||I.name))},A.mark=function(A){return Object.setPrototypeOf?Object.setPrototypeOf(A,c):(A.__proto__=c,e(A,o,"GeneratorFunction")),A.prototype=Object.create(F),A},A.awrap=function(A){return{__await:A}},f(k.prototype),e(k.prototype,i,(function(){return this})),A.AsyncIterator=k,A.async=function(I,g,B,C,Q){void 0===Q&&(Q=Promise);var E=new k(t(I,g,B,C),Q);return A.isGeneratorFunction(g)?E:E.next().then((function(A){return A.done?A.value:E.next()}))},f(F),e(F,o,"Generator"),e(F,E,(function(){return this})),e(F,"toString",(function(){return"[object Generator]"})),A.keys=function(A){var I=[];for(var g in A)I.push(g);return I.reverse(),function g(){for(;I.length;){var B=I.pop();if(B in A)return g.value=B,g.done=!1,g}return g.done=!0,g}},A.values=Y,u.prototype={constructor:u,reset:function(A){if(this.prev=0,this.next=0,this.sent=this._sent=I,this.done=!1,this.delegate=null,this.method="next",this.arg=I,this.tryEntries.forEach(U),!A)for(var g in this)"t"===g.charAt(0)&&B.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=I)},stop:function(){this.done=!0;var A=this.tryEntries[0].completion;if("throw"===A.type)throw A.arg;return this.rval},dispatchException:function(A){if(this.done)throw A;var g=this;function C(B,C){return i.type="throw",i.arg=A,g.next=B,C&&(g.method="next",g.arg=I),!!C}for(var Q=this.tryEntries.length-1;Q>=0;--Q){var E=this.tryEntries[Q],i=E.completion;if("root"===E.tryLoc)return C("end");if(E.tryLoc<=this.prev){var o=B.call(E,"catchLoc"),e=B.call(E,"finallyLoc");if(o&&e){if(this.prev<E.catchLoc)return C(E.catchLoc,!0);if(this.prev<E.finallyLoc)return C(E.finallyLoc)}else if(o){if(this.prev<E.catchLoc)return C(E.catchLoc,!0)}else{if(!e)throw new Error("try statement without catch or finally");if(this.prev<E.finallyLoc)return C(E.finallyLoc)}}}},abrupt:function(A,I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc<=this.prev&&B.call(C,"finallyLoc")&&this.prev<C.finallyLoc){var Q=C;break}}Q&&("break"===A||"continue"===A)&&Q.tryLoc<=I&&I<=Q.finallyLoc&&(Q=null);var E=Q?Q.completion:{};return E.type=A,E.arg=I,Q?(this.method="next",this.next=Q.finallyLoc,w):this.complete(E)},complete:function(A,I){if("throw"===A.type)throw A.arg;return"break"===A.type||"continue"===A.type?this.next=A.arg:"return"===A.type?(this.rval=this.arg=A.arg,this.method="return",this.next="end"):"normal"===A.type&&I&&(this.next=I),w},finish:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.finallyLoc===A)return this.complete(g.completion,g.afterLoc),U(g),w}},catch:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.tryLoc===A){var B=g.completion;if("throw"===B.type){var C=B.arg;U(g)}return C}}throw new Error("illegal catch attempt")},delegateYield:function(A,g,B){return this.delegate={iterator:Y(A),resultName:g,nextLoc:B},"next"===this.method&&(this.arg=I),w}},A}(A.exports);try{regeneratorRuntime=I}catch(A){"object"===("undefined"==typeof globalThis?"undefined":C(globalThis))?globalThis.regeneratorRuntime=I:Function("r","regeneratorRuntime = r")(I)}}(Q);var E=Q.exports,i=new Map,o=new Map;function e(A,I){var g=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Array.isArray(A)||(A=[A]),A.forEach((function(A){i.set(A,I),o.set(A,g)}))}function t(A){return a.apply(this,arguments)}function a(){return(a=B(E.mark((function A(I){var g,B;return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(g=i.get(I.Compression)){A.next=3;break}throw new Error("Unknown compression method identifier: ".concat(I.Compression));case 3:return A.next=5,g();case 5:return B=A.sent,A.abrupt("return",new B(I));case 7:case"end":return A.stop()}}),A)})))).apply(this,arguments)}e([void 0,1],(function(){return Promise.resolve().then((function(){return u})).then((function(A){return A.default}))}),!1),e(5,(function(){return Promise.resolve().then((function(){return M})).then((function(A){return A.default}))})),e(6,(function(){throw new Error("old style JPEG compression is not supported.")})),e(7,(function(){return Promise.resolve().then((function(){return v})).then((function(A){return A.default}))})),e([8,32946],(function(){return Promise.resolve().then((function(){return VA})).then((function(A){return A.default}))})),e(32773,(function(){return Promise.resolve().then((function(){return $A})).then((function(A){return A.default}))})),e(34887,(function(){return Promise.resolve().then((function(){return UI})).then(function(){var A=B(E.mark((function A(I){return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,I.zstd.init();case 2:return A.abrupt("return",I);case 3:case"end":return A.stop()}}),A)})));return function(I){return A.apply(this,arguments)}}()).then((function(A){return A.default}))})),e(5e4,(function(){return Promise.resolve().then((function(){return pI})).then(function(){var A=B(E.mark((function A(I){return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,I.zstd.init();case 2:return A.abrupt("return",I);case 3:case"end":return A.stop()}}),A)})));return function(I){return A.apply(this,arguments)}}()).then((function(A){return A.default}))})),e(50001,(function(){return Promise.resolve().then((function(){return bI})).then((function(A){return A.default}))}),!1);var r=["fileDirectory","buffer"];function s(A,I){var g=Object.keys(A);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(A);I&&(B=B.filter((function(I){return Object.getOwnPropertyDescriptor(A,I).enumerable}))),g.push.apply(g,B)}return g}function n(I){for(var g=1;g<arguments.length;g++){var B=null!=arguments[g]?arguments[g]:{};g%2?s(Object(B),!0).forEach((function(g){A(I,g,B[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(B)):s(Object(B)).forEach((function(A){Object.defineProperty(I,A,Object.getOwnPropertyDescriptor(B,A))}))}return I}var D=globalThis;function w(A,I){if(!(A instanceof I))throw new TypeError("Cannot call a class as a function")}function h(A,I){for(var g=0;g<I.length;g++){var B=I[g];B.enumerable=B.enumerable||!1,B.configurable=!0,"value"in B&&(B.writable=!0),Object.defineProperty(A,B.key,B)}}function y(A,I,g){return I&&h(A.prototype,I),g&&h(A,g),A}function c(A,I){return c=Object.setPrototypeOf||function(A,I){return A.__proto__=I,A},c(A,I)}function G(A,I){if("function"!=typeof I&&null!==I)throw new TypeError("Super expression must either be null or a function");A.prototype=Object.create(I&&I.prototype,{constructor:{value:A,writable:!0,configurable:!0}}),I&&c(A,I)}function S(A,I){if(I&&("object"===C(I)||"function"==typeof I))return I;if(void 0!==I)throw new TypeError("Derived constructors may only return object or undefined");return function(A){if(void 0===A)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return A}(A)}function N(A){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(A){return A.__proto__||Object.getPrototypeOf(A)},N(A)}function F(A,I){var g=A.length-I,B=0;do{for(var C=I;C>0;C--)A[B+I]+=A[B],B++;g-=I}while(g>0)}function f(A,I,g){for(var B=0,C=A.length,Q=C/g;C>I;){for(var E=I;E>0;--E)A[B+I]+=A[B],++B;C-=I}for(var i=A.slice(),o=0;o<Q;++o)for(var e=0;e<g;++e)A[g*o+e]=i[(g-e-1)*Q+o]}function k(A,I,g,B,C,Q){if(!I||1===I)return A;for(var E=0;E<C.length;++E){if(C[E]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(C[E]!==C[0])throw new Error("When decoding with predictor, all samples must have the same size.")}for(var i=C[0]/8,o=2===Q?1:C.length,e=0;e<B&&!(e*o*g*i>=A.byteLength);++e){var t=void 0;if(2===I){switch(C[0]){case 8:t=new Uint8Array(A,e*o*g*i,o*g*i);break;case 16:t=new Uint16Array(A,e*o*g*i,o*g*i/2);break;case 32:t=new Uint32Array(A,e*o*g*i,o*g*i/4);break;default:throw new Error("Predictor 2 not allowed with ".concat(C[0]," bits per sample."))}F(t,o)}else 3===I&&f(t=new Uint8Array(A,e*o*g*i,o*g*i),o,i)}return A}D.addEventListener("message",function(){var A=B(E.mark((function A(g){var B,C,Q,i,o,e;return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return B=g.data,C=B.fileDirectory,Q=B.buffer,i=I(B,r),A.prev=1,A.next=4,t(C);case 4:return o=A.sent,A.next=7,o.decode(C,Q);case 7:e=A.sent,D.postMessage(n({decoded:e},i),[e]),A.next=14;break;case 11:A.prev=11,A.t0=A.catch(1),D.postMessage(n({error:A.t0.message},i));case 14:case"end":return A.stop()}}),A,null,[[1,11]])})));return function(I){return A.apply(this,arguments)}}());var R=function(){function A(){w(this,A)}var I;return y(A,[{key:"decode",value:(I=B(E.mark((function A(I,g){var B,C,Q,i,o;return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,this.decodeBlock(g);case 2:if(B=A.sent,1===(C=I.Predictor||1)){A.next=9;break}return Q=!I.StripOffsets,i=Q?I.TileWidth:I.ImageWidth,o=Q?I.TileLength:I.RowsPerStrip||I.ImageLength,A.abrupt("return",k(B,C,i,o,I.BitsPerSample,I.PlanarConfiguration));case 9:return A.abrupt("return",B);case 10:case"end":return A.stop()}}),A,this)}))),function(A,g){return I.apply(this,arguments)})}]),A}();function L(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var U=function(A){G(g,R);var I=L(g);function g(){return w(this,g),I.apply(this,arguments)}return y(g,[{key:"decodeBlock",value:function(A){return A}}]),g}(),u=Object.freeze({__proto__:null,default:U});function Y(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}function d(A,I){for(var g=I.length-1;g>=0;g--)A.push(I[g]);return A}function l(A){for(var I=new Uint16Array(4093),g=new Uint8Array(4093),B=0;B<=257;B++)I[B]=4096,g[B]=B;var C=258,Q=9,E=0;function i(){C=258,Q=9}function o(A){var I=function(A,I,g){var B=I%8,C=Math.floor(I/8),Q=8-B,E=I+g-8*(C+1),i=8*(C+2)-(I+g),o=8*(C+2)-I;if(i=Math.max(0,i),C>=A.length)return console.warn("ran off the end of the buffer before finding EOI_CODE (end on input code)"),257;var e=A[C]&Math.pow(2,8-B)-1,t=e<<=g-Q;if(C+1<A.length){var a=A[C+1]>>>i;t+=a<<=Math.max(0,g-o)}if(E>8&&C+2<A.length){var r=8*(C+3)-(I+g);t+=A[C+2]>>>r}return t}(A,E,Q);return E+=Q,I}function e(A,B){return g[C]=B,I[C]=A,++C-1}function t(A){for(var B=[],C=A;4096!==C;C=I[C])B.push(g[C]);return B}var a=[];i();for(var r,s=new Uint8Array(A),n=o(s);257!==n;){if(256===n){for(i(),n=o(s);256===n;)n=o(s);if(257===n)break;if(n>256)throw new Error("corrupted code at scanline ".concat(n));d(a,t(n)),r=n}else if(n<C){var D=t(n);d(a,D),e(r,D[D.length-1]),r=n}else{var w=t(r);if(!w)throw new Error("Bogus entry. Not in dictionary, ".concat(r," / ").concat(C,", position: ").concat(E));d(a,w),a.push(w[w.length-1]),e(r,w[w.length-1]),r=n}C+1>=Math.pow(2,Q)&&(12===Q?r=void 0:Q++),n=o(s)}return new Uint8Array(a)}var K=function(A){G(g,R);var I=Y(g);function g(){return w(this,g),I.apply(this,arguments)}return y(g,[{key:"decodeBlock",value:function(A){return l(A).buffer}}]),g}(),M=Object.freeze({__proto__:null,default:K});function J(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var H=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]);function p(A,I){for(var g=0,B=[],C=16;C>0&&!A[C-1];)--C;B.push({children:[],index:0});for(var Q,E=B[0],i=0;i<C;i++){for(var o=0;o<A[i];o++){for((E=B.pop()).children[E.index]=I[g];E.index>0;)E=B.pop();for(E.index++,B.push(E);B.length<=i;)B.push(Q={children:[],index:0}),E.children[E.index]=Q.children,E=Q;g++}i+1<C&&(B.push(Q={children:[],index:0}),E.children[E.index]=Q.children,E=Q)}return B[0].children}function q(A,I,g,B,Q,E,i,o,e){var t=g.mcusPerLine,a=g.progressive,r=I,s=I,n=0,D=0;function w(){if(D>0)return D--,n>>D&1;if(255===(n=A[s++])){var I=A[s++];if(I)throw new Error("unexpected marker: ".concat((n<<8|I).toString(16)))}return D=7,n>>>7}function h(A){for(var I,g=A;null!==(I=w());){if("number"==typeof(g=g[I]))return g;if("object"!==C(g))throw new Error("invalid huffman sequence")}return null}function y(A){for(var I=A,g=0;I>0;){var B=w();if(null===B)return;g=g<<1|B,--I}return g}function c(A){var I=y(A);return I>=1<<A-1?I:I+(-1<<A)+1}var G=0;var S,N=0;function F(A,I,g,B,C){var Q=g%t,E=(g/t|0)*A.v+B,i=Q*A.h+C;I(A,A.blocks[E][i])}function f(A,I,g){var B=g/A.blocksPerLine|0,C=g%A.blocksPerLine;I(A,A.blocks[B][C])}var k,R,L,U,u,Y,d=B.length;Y=a?0===E?0===o?function(A,I){var g=h(A.huffmanTableDC),B=0===g?0:c(g)<<e;A.pred+=B,I[0]=A.pred}:function(A,I){I[0]|=w()<<e}:0===o?function(A,I){if(G>0)G--;else for(var g=E,B=i;g<=B;){var C=h(A.huffmanTableAC),Q=15&C,o=C>>4;if(0===Q){if(o<15){G=y(o)+(1<<o)-1;break}g+=16}else I[H[g+=o]]=c(Q)*(1<<e),g++}}:function(A,I){for(var g=E,B=i,C=0;g<=B;){var Q=H[g],o=I[Q]<0?-1:1;switch(N){case 0:var t=h(A.huffmanTableAC),a=15&t;if(C=t>>4,0===a)C<15?(G=y(C)+(1<<C),N=4):(C=16,N=1);else{if(1!==a)throw new Error("invalid ACn encoding");S=c(a),N=C?2:3}continue;case 1:case 2:I[Q]?I[Q]+=(w()<<e)*o:0==--C&&(N=2===N?3:0);break;case 3:I[Q]?I[Q]+=(w()<<e)*o:(I[Q]=S<<e,N=0);break;case 4:I[Q]&&(I[Q]+=(w()<<e)*o)}g++}4===N&&0==--G&&(N=0)}:function(A,I){var g=h(A.huffmanTableDC),B=0===g?0:c(g);A.pred+=B,I[0]=A.pred;for(var C=1;C<64;){var Q=h(A.huffmanTableAC),E=15&Q,i=Q>>4;if(0===E){if(i<15)break;C+=16}else I[H[C+=i]]=c(E),C++}};var l,K,M=0;K=1===d?B[0].blocksPerLine*B[0].blocksPerColumn:t*g.mcusPerColumn;for(var J=Q||K;M<K;){for(R=0;R<d;R++)B[R].pred=0;if(G=0,1===d)for(k=B[0],u=0;u<J;u++)f(k,Y,M),M++;else for(u=0;u<J;u++){for(R=0;R<d;R++){var p=k=B[R],q=p.h,m=p.v;for(L=0;L<m;L++)for(U=0;U<q;U++)F(k,Y,M,L,U)}if(++M===K)break}if(D=0,(l=A[s]<<8|A[s+1])<65280)throw new Error("marker was not found");if(!(l>=65488&&l<=65495))break;s+=2}return s-r}function m(A,I){var g=[],B=I.blocksPerLine,C=I.blocksPerColumn,Q=B<<3,E=new Int32Array(64),i=new Uint8Array(64);function o(A,g,B){var C,Q,E,i,o,e,t,a,r,s,n=I.quantizationTable,D=B;for(s=0;s<64;s++)D[s]=A[s]*n[s];for(s=0;s<8;++s){var w=8*s;0!==D[1+w]||0!==D[2+w]||0!==D[3+w]||0!==D[4+w]||0!==D[5+w]||0!==D[6+w]||0!==D[7+w]?(C=5793*D[0+w]+128>>8,Q=5793*D[4+w]+128>>8,E=D[2+w],i=D[6+w],o=2896*(D[1+w]-D[7+w])+128>>8,a=2896*(D[1+w]+D[7+w])+128>>8,e=D[3+w]<<4,r=C-Q+1>>1,C=C+Q+1>>1,Q=r,r=3784*E+1567*i+128>>8,E=1567*E-3784*i+128>>8,i=r,r=o-(t=D[5+w]<<4)+1>>1,o=o+t+1>>1,t=r,r=a+e+1>>1,e=a-e+1>>1,a=r,r=C-i+1>>1,C=C+i+1>>1,i=r,r=Q-E+1>>1,Q=Q+E+1>>1,E=r,r=2276*o+3406*a+2048>>12,o=3406*o-2276*a+2048>>12,a=r,r=799*e+4017*t+2048>>12,e=4017*e-799*t+2048>>12,t=r,D[0+w]=C+a,D[7+w]=C-a,D[1+w]=Q+t,D[6+w]=Q-t,D[2+w]=E+e,D[5+w]=E-e,D[3+w]=i+o,D[4+w]=i-o):(r=5793*D[0+w]+512>>10,D[0+w]=r,D[1+w]=r,D[2+w]=r,D[3+w]=r,D[4+w]=r,D[5+w]=r,D[6+w]=r,D[7+w]=r)}for(s=0;s<8;++s){var h=s;0!==D[8+h]||0!==D[16+h]||0!==D[24+h]||0!==D[32+h]||0!==D[40+h]||0!==D[48+h]||0!==D[56+h]?(C=5793*D[0+h]+2048>>12,Q=5793*D[32+h]+2048>>12,E=D[16+h],i=D[48+h],o=2896*(D[8+h]-D[56+h])+2048>>12,a=2896*(D[8+h]+D[56+h])+2048>>12,e=D[24+h],r=C-Q+1>>1,C=C+Q+1>>1,Q=r,r=3784*E+1567*i+2048>>12,E=1567*E-3784*i+2048>>12,i=r,r=o-(t=D[40+h])+1>>1,o=o+t+1>>1,t=r,r=a+e+1>>1,e=a-e+1>>1,a=r,r=C-i+1>>1,C=C+i+1>>1,i=r,r=Q-E+1>>1,Q=Q+E+1>>1,E=r,r=2276*o+3406*a+2048>>12,o=3406*o-2276*a+2048>>12,a=r,r=799*e+4017*t+2048>>12,e=4017*e-799*t+2048>>12,t=r,D[0+h]=C+a,D[56+h]=C-a,D[8+h]=Q+t,D[48+h]=Q-t,D[16+h]=E+e,D[40+h]=E-e,D[24+h]=i+o,D[32+h]=i-o):(r=5793*B[s+0]+8192>>14,D[0+h]=r,D[8+h]=r,D[16+h]=r,D[24+h]=r,D[32+h]=r,D[40+h]=r,D[48+h]=r,D[56+h]=r)}for(s=0;s<64;++s){var y=128+(D[s]+8>>4);g[s]=y<0?0:y>255?255:y}}for(var e=0;e<C;e++){for(var t=e<<3,a=0;a<8;a++)g.push(new Uint8Array(Q));for(var r=0;r<B;r++){o(I.blocks[e][r],i,E);for(var s=0,n=r<<3,D=0;D<8;D++)for(var w=g[t+D],h=0;h<8;h++)w[n+h]=i[s++]}}return g}var b=function(){function A(){w(this,A),this.jfif=null,this.adobe=null,this.quantizationTables=[],this.huffmanTablesAC=[],this.huffmanTablesDC=[],this.resetFrames()}return y(A,[{key:"resetFrames",value:function(){this.frames=[]}},{key:"parse",value:function(A){var I=0;function g(){var g=A[I]<<8|A[I+1];return I+=2,g}function B(A){var I,g,B=0,C=0;for(g in A.components)A.components.hasOwnProperty(g)&&(B<(I=A.components[g]).h&&(B=I.h),C<I.v&&(C=I.v));var Q=Math.ceil(A.samplesPerLine/8/B),E=Math.ceil(A.scanLines/8/C);for(g in A.components)if(A.components.hasOwnProperty(g)){I=A.components[g];for(var i=Math.ceil(Math.ceil(A.samplesPerLine/8)*I.h/B),o=Math.ceil(Math.ceil(A.scanLines/8)*I.v/C),e=Q*I.h,t=E*I.v,a=[],r=0;r<t;r++){for(var s=[],n=0;n<e;n++)s.push(new Int32Array(64));a.push(s)}I.blocksPerLine=i,I.blocksPerColumn=o,I.blocks=a}A.maxH=B,A.maxV=C,A.mcusPerLine=Q,A.mcusPerColumn=E}var C,Q,E=g();if(65496!==E)throw new Error("SOI not found");for(E=g();65497!==E;){switch(E){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var i=(C=void 0,Q=void 0,C=g(),Q=A.subarray(I,I+C-2),I+=Q.length,Q);65504===E&&74===i[0]&&70===i[1]&&73===i[2]&&70===i[3]&&0===i[4]&&(this.jfif={version:{major:i[5],minor:i[6]},densityUnits:i[7],xDensity:i[8]<<8|i[9],yDensity:i[10]<<8|i[11],thumbWidth:i[12],thumbHeight:i[13],thumbData:i.subarray(14,14+3*i[12]*i[13])}),65518===E&&65===i[0]&&100===i[1]&&111===i[2]&&98===i[3]&&101===i[4]&&0===i[5]&&(this.adobe={version:i[6],flags0:i[7]<<8|i[8],flags1:i[9]<<8|i[10],transformCode:i[11]});break;case 65499:for(var o=g()+I-2;I<o;){var e=A[I++],t=new Int32Array(64);if(e>>4==0)for(var a=0;a<64;a++){t[H[a]]=A[I++]}else{if(e>>4!=1)throw new Error("DQT: invalid table spec");for(var r=0;r<64;r++){t[H[r]]=g()}}this.quantizationTables[15&e]=t}break;case 65472:case 65473:case 65474:g();for(var s={extended:65473===E,progressive:65474===E,precision:A[I++],scanLines:g(),samplesPerLine:g(),components:{},componentsOrder:[]},n=A[I++],D=void 0,w=0;w<n;w++){D=A[I];var h=A[I+1]>>4,y=15&A[I+1],c=A[I+2];s.componentsOrder.push(D),s.components[D]={h:h,v:y,quantizationIdx:c},I+=3}B(s),this.frames.push(s);break;case 65476:for(var G=g(),S=2;S<G;){for(var N=A[I++],F=new Uint8Array(16),f=0,k=0;k<16;k++,I++)F[k]=A[I],f+=F[k];for(var R=new Uint8Array(f),L=0;L<f;L++,I++)R[L]=A[I];S+=17+f,N>>4==0?this.huffmanTablesDC[15&N]=p(F,R):this.huffmanTablesAC[15&N]=p(F,R)}break;case 65501:g(),this.resetInterval=g();break;case 65498:g();for(var U=A[I++],u=[],Y=this.frames[0],d=0;d<U;d++){var l=Y.components[A[I++]],K=A[I++];l.huffmanTableDC=this.huffmanTablesDC[K>>4],l.huffmanTableAC=this.huffmanTablesAC[15&K],u.push(l)}var M=A[I++],J=A[I++],m=A[I++],b=q(A,I,Y,u,this.resetInterval,M,J,m>>4,15&m);I+=b;break;case 65535:255!==A[I]&&I--;break;default:if(255===A[I-3]&&A[I-2]>=192&&A[I-2]<=254){I-=3;break}throw new Error("unknown JPEG marker ".concat(E.toString(16)))}E=g()}}},{key:"getResult",value:function(){var A=this.frames;if(0===this.frames.length)throw new Error("no frames were decoded");this.frames.length>1&&console.warn("more than one frame is not supported");for(var I=0;I<this.frames.length;I++)for(var g=this.frames[I].components,B=0,C=Object.keys(g);B<C.length;B++){var Q=C[B];g[Q].quantizationTable=this.quantizationTables[g[Q].quantizationIdx],delete g[Q].quantizationIdx}for(var E=A[0],i=E.components,o=E.componentsOrder,e=[],t=E.samplesPerLine,a=E.scanLines,r=0;r<o.length;r++){var s=i[o[r]];e.push({lines:m(0,s),scaleX:s.h/E.maxH,scaleY:s.v/E.maxV})}for(var n=new Uint8Array(t*a*e.length),D=0,w=0;w<a;++w)for(var h=0;h<t;++h)for(var y=0;y<e.length;++y){var c=e[y];n[D]=c.lines[0|w*c.scaleY][0|h*c.scaleX],++D}return n}}]),A}(),x=function(A){G(g,R);var I=J(g);function g(A){var B;return w(this,g),(B=I.call(this)).reader=new b,A.JPEGTables&&B.reader.parse(A.JPEGTables),B}return y(g,[{key:"decodeBlock",value:function(A){return this.reader.resetFrames(),this.reader.parse(new Uint8Array(A)),this.reader.getResult().buffer}}]),g}(),v=Object.freeze({__proto__:null,default:x});function O(A){for(var I=A.length;--I>=0;)A[I]=0}O(new Array(576)),O(new Array(60)),O(new Array(512)),O(new Array(256)),O(new Array(29)),O(new Array(30));var T=function(A,I,g,B){for(var C=65535&A|0,Q=A>>>16&65535|0,E=0;0!==g;){g-=E=g>2e3?2e3:g;do{Q=Q+(C=C+I[B++]|0)|0}while(--E);C%=65521,Q%=65521}return C|Q<<16|0},P=new Uint32Array(function(){for(var A,I=[],g=0;g<256;g++){A=g;for(var B=0;B<8;B++)A=1&A?3988292384^A>>>1:A>>>1;I[g]=A}return I}()),Z=function(A,I,g,B){var C=P,Q=B+g;A^=-1;for(var E=B;E<Q;E++)A=A>>>8^C[255&(A^I[E])];return-1^A},j={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},W={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},V=function(A,I){return Object.prototype.hasOwnProperty.call(A,I)},z=function(A){for(var I=Array.prototype.slice.call(arguments,1);I.length;){var g=I.shift();if(g){if("object"!==C(g))throw new TypeError(g+"must be non-object");for(var B in g)V(g,B)&&(A[B]=g[B])}}return A},X=function(A){for(var I=0,g=0,B=A.length;g<B;g++)I+=A[g].length;for(var C=new Uint8Array(I),Q=0,E=0,i=A.length;Q<i;Q++){var o=A[Q];C.set(o,E),E+=o.length}return C},_=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(A){_=!1}for(var $=new Uint8Array(256),AA=0;AA<256;AA++)$[AA]=AA>=252?6:AA>=248?5:AA>=240?4:AA>=224?3:AA>=192?2:1;$[254]=$[254]=1;var IA=function(A){if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(A);var I,g,B,C,Q,E=A.length,i=0;for(C=0;C<E;C++)55296==(64512&(g=A.charCodeAt(C)))&&C+1<E&&56320==(64512&(B=A.charCodeAt(C+1)))&&(g=65536+(g-55296<<10)+(B-56320),C++),i+=g<128?1:g<2048?2:g<65536?3:4;for(I=new Uint8Array(i),Q=0,C=0;Q<i;C++)55296==(64512&(g=A.charCodeAt(C)))&&C+1<E&&56320==(64512&(B=A.charCodeAt(C+1)))&&(g=65536+(g-55296<<10)+(B-56320),C++),g<128?I[Q++]=g:g<2048?(I[Q++]=192|g>>>6,I[Q++]=128|63&g):g<65536?(I[Q++]=224|g>>>12,I[Q++]=128|g>>>6&63,I[Q++]=128|63&g):(I[Q++]=240|g>>>18,I[Q++]=128|g>>>12&63,I[Q++]=128|g>>>6&63,I[Q++]=128|63&g);return I},gA=function(A,I){var g,B,C=I||A.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(A.subarray(0,I));var Q=new Array(2*C);for(B=0,g=0;g<C;){var E=A[g++];if(E<128)Q[B++]=E;else{var i=$[E];if(i>4)Q[B++]=65533,g+=i-1;else{for(E&=2===i?31:3===i?15:7;i>1&&g<C;)E=E<<6|63&A[g++],i--;i>1?Q[B++]=65533:E<65536?Q[B++]=E:(E-=65536,Q[B++]=55296|E>>10&1023,Q[B++]=56320|1023&E)}}}return function(A,I){if(I<65534&&A.subarray&&_)return String.fromCharCode.apply(null,A.length===I?A:A.subarray(0,I));for(var g="",B=0;B<I;B++)g+=String.fromCharCode(A[B]);return g}(Q,B)},BA=function(A,I){(I=I||A.length)>A.length&&(I=A.length);for(var g=I-1;g>=0&&128==(192&A[g]);)g--;return g<0||0===g?I:g+$[A[g]]>I?g:I};var CA=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0},QA=function(A,I){var g,B,C,Q,E,i,o,e,t,a,r,s,n,D,w,h,y,c,G,S,N,F,f,k,R=A.state;g=A.next_in,f=A.input,B=g+(A.avail_in-5),C=A.next_out,k=A.output,Q=C-(I-A.avail_out),E=C+(A.avail_out-257),i=R.dmax,o=R.wsize,e=R.whave,t=R.wnext,a=R.window,r=R.hold,s=R.bits,n=R.lencode,D=R.distcode,w=(1<<R.lenbits)-1,h=(1<<R.distbits)-1;A:do{s<15&&(r+=f[g++]<<s,s+=8,r+=f[g++]<<s,s+=8),y=n[r&w];I:for(;;){if(r>>>=c=y>>>24,s-=c,0===(c=y>>>16&255))k[C++]=65535&y;else{if(!(16&c)){if(0==(64&c)){y=n[(65535&y)+(r&(1<<c)-1)];continue I}if(32&c){R.mode=12;break A}A.msg="invalid literal/length code",R.mode=30;break A}G=65535&y,(c&=15)&&(s<c&&(r+=f[g++]<<s,s+=8),G+=r&(1<<c)-1,r>>>=c,s-=c),s<15&&(r+=f[g++]<<s,s+=8,r+=f[g++]<<s,s+=8),y=D[r&h];g:for(;;){if(r>>>=c=y>>>24,s-=c,!(16&(c=y>>>16&255))){if(0==(64&c)){y=D[(65535&y)+(r&(1<<c)-1)];continue g}A.msg="invalid distance code",R.mode=30;break A}if(S=65535&y,s<(c&=15)&&(r+=f[g++]<<s,(s+=8)<c&&(r+=f[g++]<<s,s+=8)),(S+=r&(1<<c)-1)>i){A.msg="invalid distance too far back",R.mode=30;break A}if(r>>>=c,s-=c,S>(c=C-Q)){if((c=S-c)>e&&R.sane){A.msg="invalid distance too far back",R.mode=30;break A}if(N=0,F=a,0===t){if(N+=o-c,c<G){G-=c;do{k[C++]=a[N++]}while(--c);N=C-S,F=k}}else if(t<c){if(N+=o+t-c,(c-=t)<G){G-=c;do{k[C++]=a[N++]}while(--c);if(N=0,t<G){G-=c=t;do{k[C++]=a[N++]}while(--c);N=C-S,F=k}}}else if(N+=t-c,c<G){G-=c;do{k[C++]=a[N++]}while(--c);N=C-S,F=k}for(;G>2;)k[C++]=F[N++],k[C++]=F[N++],k[C++]=F[N++],G-=3;G&&(k[C++]=F[N++],G>1&&(k[C++]=F[N++]))}else{N=C-S;do{k[C++]=k[N++],k[C++]=k[N++],k[C++]=k[N++],G-=3}while(G>2);G&&(k[C++]=k[N++],G>1&&(k[C++]=k[N++]))}break}}break}}while(g<B&&C<E);g-=G=s>>3,r&=(1<<(s-=G<<3))-1,A.next_in=g,A.next_out=C,A.avail_in=g<B?B-g+5:5-(g-B),A.avail_out=C<E?E-C+257:257-(C-E),R.hold=r,R.bits=s},EA=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),iA=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),oA=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),eA=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),tA=function(A,I,g,B,C,Q,E,i){var o,e,t,a,r,s,n,D,w,h=i.bits,y=0,c=0,G=0,S=0,N=0,F=0,f=0,k=0,R=0,L=0,U=null,u=0,Y=new Uint16Array(16),d=new Uint16Array(16),l=null,K=0;for(y=0;y<=15;y++)Y[y]=0;for(c=0;c<B;c++)Y[I[g+c]]++;for(N=h,S=15;S>=1&&0===Y[S];S--);if(N>S&&(N=S),0===S)return C[Q++]=20971520,C[Q++]=20971520,i.bits=1,0;for(G=1;G<S&&0===Y[G];G++);for(N<G&&(N=G),k=1,y=1;y<=15;y++)if(k<<=1,(k-=Y[y])<0)return-1;if(k>0&&(0===A||1!==S))return-1;for(d[1]=0,y=1;y<15;y++)d[y+1]=d[y]+Y[y];for(c=0;c<B;c++)0!==I[g+c]&&(E[d[I[g+c]]++]=c);if(0===A?(U=l=E,s=19):1===A?(U=EA,u-=257,l=iA,K-=257,s=256):(U=oA,l=eA,s=-1),L=0,c=0,y=G,r=Q,F=N,f=0,t=-1,a=(R=1<<N)-1,1===A&&R>852||2===A&&R>592)return 1;for(;;){n=y-f,E[c]<s?(D=0,w=E[c]):E[c]>s?(D=l[K+E[c]],w=U[u+E[c]]):(D=96,w=0),o=1<<y-f,G=e=1<<F;do{C[r+(L>>f)+(e-=o)]=n<<24|D<<16|w|0}while(0!==e);for(o=1<<y-1;L&o;)o>>=1;if(0!==o?(L&=o-1,L+=o):L=0,c++,0==--Y[y]){if(y===S)break;y=I[g+E[c]]}if(y>N&&(L&a)!==t){for(0===f&&(f=N),r+=G,k=1<<(F=y-f);F+f<S&&!((k-=Y[F+f])<=0);)F++,k<<=1;if(R+=1<<F,1===A&&R>852||2===A&&R>592)return 1;C[t=L&a]=N<<24|F<<16|r-Q|0}}return 0!==L&&(C[r+L]=y-f<<24|64<<16|0),i.bits=N,0},aA=W.Z_FINISH,rA=W.Z_BLOCK,sA=W.Z_TREES,nA=W.Z_OK,DA=W.Z_STREAM_END,wA=W.Z_NEED_DICT,hA=W.Z_STREAM_ERROR,yA=W.Z_DATA_ERROR,cA=W.Z_MEM_ERROR,GA=W.Z_BUF_ERROR,SA=W.Z_DEFLATED,NA=function(A){return(A>>>24&255)+(A>>>8&65280)+((65280&A)<<8)+((255&A)<<24)};function FA(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}var fA,kA,RA=function(A){if(!A||!A.state)return hA;var I=A.state;return A.total_in=A.total_out=I.total=0,A.msg="",I.wrap&&(A.adler=1&I.wrap),I.mode=1,I.last=0,I.havedict=0,I.dmax=32768,I.head=null,I.hold=0,I.bits=0,I.lencode=I.lendyn=new Int32Array(852),I.distcode=I.distdyn=new Int32Array(592),I.sane=1,I.back=-1,nA},LA=function(A){if(!A||!A.state)return hA;var I=A.state;return I.wsize=0,I.whave=0,I.wnext=0,RA(A)},UA=function(A,I){var g;if(!A||!A.state)return hA;var B=A.state;return I<0?(g=0,I=-I):(g=1+(I>>4),I<48&&(I&=15)),I&&(I<8||I>15)?hA:(null!==B.window&&B.wbits!==I&&(B.window=null),B.wrap=g,B.wbits=I,LA(A))},uA=function(A,I){if(!A)return hA;var g=new FA;A.state=g,g.window=null;var B=UA(A,I);return B!==nA&&(A.state=null),B},YA=!0,dA=function(A){if(YA){fA=new Int32Array(512),kA=new Int32Array(32);for(var I=0;I<144;)A.lens[I++]=8;for(;I<256;)A.lens[I++]=9;for(;I<280;)A.lens[I++]=7;for(;I<288;)A.lens[I++]=8;for(tA(1,A.lens,0,288,fA,0,A.work,{bits:9}),I=0;I<32;)A.lens[I++]=5;tA(2,A.lens,0,32,kA,0,A.work,{bits:5}),YA=!1}A.lencode=fA,A.lenbits=9,A.distcode=kA,A.distbits=5},lA=function(A,I,g,B){var C,Q=A.state;return null===Q.window&&(Q.wsize=1<<Q.wbits,Q.wnext=0,Q.whave=0,Q.window=new Uint8Array(Q.wsize)),B>=Q.wsize?(Q.window.set(I.subarray(g-Q.wsize,g),0),Q.wnext=0,Q.whave=Q.wsize):((C=Q.wsize-Q.wnext)>B&&(C=B),Q.window.set(I.subarray(g-B,g-B+C),Q.wnext),(B-=C)?(Q.window.set(I.subarray(g-B,g),0),Q.wnext=B,Q.whave=Q.wsize):(Q.wnext+=C,Q.wnext===Q.wsize&&(Q.wnext=0),Q.whave<Q.wsize&&(Q.whave+=C))),0},KA={inflateReset:LA,inflateReset2:UA,inflateResetKeep:RA,inflateInit:function(A){return uA(A,15)},inflateInit2:uA,inflate:function(A,I){var g,B,C,Q,E,i,o,e,t,a,r,s,n,D,w,h,y,c,G,S,N,F,f,k,R=0,L=new Uint8Array(4),U=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!A||!A.state||!A.output||!A.input&&0!==A.avail_in)return hA;12===(g=A.state).mode&&(g.mode=13),E=A.next_out,C=A.output,o=A.avail_out,Q=A.next_in,B=A.input,i=A.avail_in,e=g.hold,t=g.bits,a=i,r=o,F=nA;A:for(;;)switch(g.mode){case 1:if(0===g.wrap){g.mode=13;break}for(;t<16;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(2&g.wrap&&35615===e){g.check=0,L[0]=255&e,L[1]=e>>>8&255,g.check=Z(g.check,L,2,0),e=0,t=0,g.mode=2;break}if(g.flags=0,g.head&&(g.head.done=!1),!(1&g.wrap)||(((255&e)<<8)+(e>>8))%31){A.msg="incorrect header check",g.mode=30;break}if((15&e)!==SA){A.msg="unknown compression method",g.mode=30;break}if(t-=4,N=8+(15&(e>>>=4)),0===g.wbits)g.wbits=N;else if(N>g.wbits){A.msg="invalid window size",g.mode=30;break}g.dmax=1<<g.wbits,A.adler=g.check=1,g.mode=512&e?10:12,e=0,t=0;break;case 2:for(;t<16;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(g.flags=e,(255&g.flags)!==SA){A.msg="unknown compression method",g.mode=30;break}if(57344&g.flags){A.msg="unknown header flags set",g.mode=30;break}g.head&&(g.head.text=e>>8&1),512&g.flags&&(L[0]=255&e,L[1]=e>>>8&255,g.check=Z(g.check,L,2,0)),e=0,t=0,g.mode=3;case 3:for(;t<32;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.head&&(g.head.time=e),512&g.flags&&(L[0]=255&e,L[1]=e>>>8&255,L[2]=e>>>16&255,L[3]=e>>>24&255,g.check=Z(g.check,L,4,0)),e=0,t=0,g.mode=4;case 4:for(;t<16;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.head&&(g.head.xflags=255&e,g.head.os=e>>8),512&g.flags&&(L[0]=255&e,L[1]=e>>>8&255,g.check=Z(g.check,L,2,0)),e=0,t=0,g.mode=5;case 5:if(1024&g.flags){for(;t<16;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.length=e,g.head&&(g.head.extra_len=e),512&g.flags&&(L[0]=255&e,L[1]=e>>>8&255,g.check=Z(g.check,L,2,0)),e=0,t=0}else g.head&&(g.head.extra=null);g.mode=6;case 6:if(1024&g.flags&&((s=g.length)>i&&(s=i),s&&(g.head&&(N=g.head.extra_len-g.length,g.head.extra||(g.head.extra=new Uint8Array(g.head.extra_len)),g.head.extra.set(B.subarray(Q,Q+s),N)),512&g.flags&&(g.check=Z(g.check,B,s,Q)),i-=s,Q+=s,g.length-=s),g.length))break A;g.length=0,g.mode=7;case 7:if(2048&g.flags){if(0===i)break A;s=0;do{N=B[Q+s++],g.head&&N&&g.length<65536&&(g.head.name+=String.fromCharCode(N))}while(N&&s<i);if(512&g.flags&&(g.check=Z(g.check,B,s,Q)),i-=s,Q+=s,N)break A}else g.head&&(g.head.name=null);g.length=0,g.mode=8;case 8:if(4096&g.flags){if(0===i)break A;s=0;do{N=B[Q+s++],g.head&&N&&g.length<65536&&(g.head.comment+=String.fromCharCode(N))}while(N&&s<i);if(512&g.flags&&(g.check=Z(g.check,B,s,Q)),i-=s,Q+=s,N)break A}else g.head&&(g.head.comment=null);g.mode=9;case 9:if(512&g.flags){for(;t<16;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(e!==(65535&g.check)){A.msg="header crc mismatch",g.mode=30;break}e=0,t=0}g.head&&(g.head.hcrc=g.flags>>9&1,g.head.done=!0),A.adler=g.check=0,g.mode=12;break;case 10:for(;t<32;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}A.adler=g.check=NA(e),e=0,t=0,g.mode=11;case 11:if(0===g.havedict)return A.next_out=E,A.avail_out=o,A.next_in=Q,A.avail_in=i,g.hold=e,g.bits=t,wA;A.adler=g.check=1,g.mode=12;case 12:if(I===rA||I===sA)break A;case 13:if(g.last){e>>>=7&t,t-=7&t,g.mode=27;break}for(;t<3;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}switch(g.last=1&e,t-=1,3&(e>>>=1)){case 0:g.mode=14;break;case 1:if(dA(g),g.mode=20,I===sA){e>>>=2,t-=2;break A}break;case 2:g.mode=17;break;case 3:A.msg="invalid block type",g.mode=30}e>>>=2,t-=2;break;case 14:for(e>>>=7&t,t-=7&t;t<32;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if((65535&e)!=(e>>>16^65535)){A.msg="invalid stored block lengths",g.mode=30;break}if(g.length=65535&e,e=0,t=0,g.mode=15,I===sA)break A;case 15:g.mode=16;case 16:if(s=g.length){if(s>i&&(s=i),s>o&&(s=o),0===s)break A;C.set(B.subarray(Q,Q+s),E),i-=s,Q+=s,o-=s,E+=s,g.length-=s;break}g.mode=12;break;case 17:for(;t<14;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(g.nlen=257+(31&e),e>>>=5,t-=5,g.ndist=1+(31&e),e>>>=5,t-=5,g.ncode=4+(15&e),e>>>=4,t-=4,g.nlen>286||g.ndist>30){A.msg="too many length or distance symbols",g.mode=30;break}g.have=0,g.mode=18;case 18:for(;g.have<g.ncode;){for(;t<3;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.lens[U[g.have++]]=7&e,e>>>=3,t-=3}for(;g.have<19;)g.lens[U[g.have++]]=0;if(g.lencode=g.lendyn,g.lenbits=7,f={bits:g.lenbits},F=tA(0,g.lens,0,19,g.lencode,0,g.work,f),g.lenbits=f.bits,F){A.msg="invalid code lengths set",g.mode=30;break}g.have=0,g.mode=19;case 19:for(;g.have<g.nlen+g.ndist;){for(;h=(R=g.lencode[e&(1<<g.lenbits)-1])>>>16&255,y=65535&R,!((w=R>>>24)<=t);){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(y<16)e>>>=w,t-=w,g.lens[g.have++]=y;else{if(16===y){for(k=w+2;t<k;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(e>>>=w,t-=w,0===g.have){A.msg="invalid bit length repeat",g.mode=30;break}N=g.lens[g.have-1],s=3+(3&e),e>>>=2,t-=2}else if(17===y){for(k=w+3;t<k;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}t-=w,N=0,s=3+(7&(e>>>=w)),e>>>=3,t-=3}else{for(k=w+7;t<k;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}t-=w,N=0,s=11+(127&(e>>>=w)),e>>>=7,t-=7}if(g.have+s>g.nlen+g.ndist){A.msg="invalid bit length repeat",g.mode=30;break}for(;s--;)g.lens[g.have++]=N}}if(30===g.mode)break;if(0===g.lens[256]){A.msg="invalid code -- missing end-of-block",g.mode=30;break}if(g.lenbits=9,f={bits:g.lenbits},F=tA(1,g.lens,0,g.nlen,g.lencode,0,g.work,f),g.lenbits=f.bits,F){A.msg="invalid literal/lengths set",g.mode=30;break}if(g.distbits=6,g.distcode=g.distdyn,f={bits:g.distbits},F=tA(2,g.lens,g.nlen,g.ndist,g.distcode,0,g.work,f),g.distbits=f.bits,F){A.msg="invalid distances set",g.mode=30;break}if(g.mode=20,I===sA)break A;case 20:g.mode=21;case 21:if(i>=6&&o>=258){A.next_out=E,A.avail_out=o,A.next_in=Q,A.avail_in=i,g.hold=e,g.bits=t,QA(A,r),E=A.next_out,C=A.output,o=A.avail_out,Q=A.next_in,B=A.input,i=A.avail_in,e=g.hold,t=g.bits,12===g.mode&&(g.back=-1);break}for(g.back=0;h=(R=g.lencode[e&(1<<g.lenbits)-1])>>>16&255,y=65535&R,!((w=R>>>24)<=t);){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(h&&0==(240&h)){for(c=w,G=h,S=y;h=(R=g.lencode[S+((e&(1<<c+G)-1)>>c)])>>>16&255,y=65535&R,!(c+(w=R>>>24)<=t);){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}e>>>=c,t-=c,g.back+=c}if(e>>>=w,t-=w,g.back+=w,g.length=y,0===h){g.mode=26;break}if(32&h){g.back=-1,g.mode=12;break}if(64&h){A.msg="invalid literal/length code",g.mode=30;break}g.extra=15&h,g.mode=22;case 22:if(g.extra){for(k=g.extra;t<k;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.length+=e&(1<<g.extra)-1,e>>>=g.extra,t-=g.extra,g.back+=g.extra}g.was=g.length,g.mode=23;case 23:for(;h=(R=g.distcode[e&(1<<g.distbits)-1])>>>16&255,y=65535&R,!((w=R>>>24)<=t);){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(0==(240&h)){for(c=w,G=h,S=y;h=(R=g.distcode[S+((e&(1<<c+G)-1)>>c)])>>>16&255,y=65535&R,!(c+(w=R>>>24)<=t);){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}e>>>=c,t-=c,g.back+=c}if(e>>>=w,t-=w,g.back+=w,64&h){A.msg="invalid distance code",g.mode=30;break}g.offset=y,g.extra=15&h,g.mode=24;case 24:if(g.extra){for(k=g.extra;t<k;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}g.offset+=e&(1<<g.extra)-1,e>>>=g.extra,t-=g.extra,g.back+=g.extra}if(g.offset>g.dmax){A.msg="invalid distance too far back",g.mode=30;break}g.mode=25;case 25:if(0===o)break A;if(s=r-o,g.offset>s){if((s=g.offset-s)>g.whave&&g.sane){A.msg="invalid distance too far back",g.mode=30;break}s>g.wnext?(s-=g.wnext,n=g.wsize-s):n=g.wnext-s,s>g.length&&(s=g.length),D=g.window}else D=C,n=E-g.offset,s=g.length;s>o&&(s=o),o-=s,g.length-=s;do{C[E++]=D[n++]}while(--s);0===g.length&&(g.mode=21);break;case 26:if(0===o)break A;C[E++]=g.length,o--,g.mode=21;break;case 27:if(g.wrap){for(;t<32;){if(0===i)break A;i--,e|=B[Q++]<<t,t+=8}if(r-=o,A.total_out+=r,g.total+=r,r&&(A.adler=g.check=g.flags?Z(g.check,C,r,E-r):T(g.check,C,r,E-r)),r=o,(g.flags?e:NA(e))!==g.check){A.msg="incorrect data check",g.mode=30;break}e=0,t=0}g.mode=28;case 28:if(g.wrap&&g.flags){for(;t<32;){if(0===i)break A;i--,e+=B[Q++]<<t,t+=8}if(e!==(4294967295&g.total)){A.msg="incorrect length check",g.mode=30;break}e=0,t=0}g.mode=29;case 29:F=DA;break A;case 30:F=yA;break A;case 31:return cA;default:return hA}return A.next_out=E,A.avail_out=o,A.next_in=Q,A.avail_in=i,g.hold=e,g.bits=t,(g.wsize||r!==A.avail_out&&g.mode<30&&(g.mode<27||I!==aA))&&lA(A,A.output,A.next_out,r-A.avail_out),a-=A.avail_in,r-=A.avail_out,A.total_in+=a,A.total_out+=r,g.total+=r,g.wrap&&r&&(A.adler=g.check=g.flags?Z(g.check,C,r,A.next_out-r):T(g.check,C,r,A.next_out-r)),A.data_type=g.bits+(g.last?64:0)+(12===g.mode?128:0)+(20===g.mode||15===g.mode?256:0),(0===a&&0===r||I===aA)&&F===nA&&(F=GA),F},inflateEnd:function(A){if(!A||!A.state)return hA;var I=A.state;return I.window&&(I.window=null),A.state=null,nA},inflateGetHeader:function(A,I){if(!A||!A.state)return hA;var g=A.state;return 0==(2&g.wrap)?hA:(g.head=I,I.done=!1,nA)},inflateSetDictionary:function(A,I){var g,B=I.length;return A&&A.state?0!==(g=A.state).wrap&&11!==g.mode?hA:11===g.mode&&T(1,I,B,0)!==g.check?yA:lA(A,I,B,B)?(g.mode=31,cA):(g.havedict=1,nA):hA},inflateInfo:"pako inflate (from Nodeca project)"};var MA=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},JA=Object.prototype.toString,HA=W.Z_NO_FLUSH,pA=W.Z_FINISH,qA=W.Z_OK,mA=W.Z_STREAM_END,bA=W.Z_NEED_DICT,xA=W.Z_STREAM_ERROR,vA=W.Z_DATA_ERROR,OA=W.Z_MEM_ERROR;function TA(A){this.options=z({chunkSize:65536,windowBits:15,to:""},A||{});var I=this.options;I.raw&&I.windowBits>=0&&I.windowBits<16&&(I.windowBits=-I.windowBits,0===I.windowBits&&(I.windowBits=-15)),!(I.windowBits>=0&&I.windowBits<16)||A&&A.windowBits||(I.windowBits+=32),I.windowBits>15&&I.windowBits<48&&0==(15&I.windowBits)&&(I.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new CA,this.strm.avail_out=0;var g=KA.inflateInit2(this.strm,I.windowBits);if(g!==qA)throw new Error(j[g]);if(this.header=new MA,KA.inflateGetHeader(this.strm,this.header),I.dictionary&&("string"==typeof I.dictionary?I.dictionary=IA(I.dictionary):"[object ArrayBuffer]"===JA.call(I.dictionary)&&(I.dictionary=new Uint8Array(I.dictionary)),I.raw&&(g=KA.inflateSetDictionary(this.strm,I.dictionary))!==qA))throw new Error(j[g])}function PA(A,I){var g=new TA(I);if(g.push(A),g.err)throw g.msg||j[g.err];return g.result}TA.prototype.push=function(A,I){var g,B,C,Q=this.strm,E=this.options.chunkSize,i=this.options.dictionary;if(this.ended)return!1;for(B=I===~~I?I:!0===I?pA:HA,"[object ArrayBuffer]"===JA.call(A)?Q.input=new Uint8Array(A):Q.input=A,Q.next_in=0,Q.avail_in=Q.input.length;;){for(0===Q.avail_out&&(Q.output=new Uint8Array(E),Q.next_out=0,Q.avail_out=E),(g=KA.inflate(Q,B))===bA&&i&&((g=KA.inflateSetDictionary(Q,i))===qA?g=KA.inflate(Q,B):g===vA&&(g=bA));Q.avail_in>0&&g===mA&&Q.state.wrap>0&&0!==A[Q.next_in];)KA.inflateReset(Q),g=KA.inflate(Q,B);switch(g){case xA:case vA:case bA:case OA:return this.onEnd(g),this.ended=!0,!1}if(C=Q.avail_out,Q.next_out&&(0===Q.avail_out||g===mA))if("string"===this.options.to){var o=BA(Q.output,Q.next_out),e=Q.next_out-o,t=gA(Q.output,o);Q.next_out=e,Q.avail_out=E-e,e&&Q.output.set(Q.output.subarray(o,o+e),0),this.onData(t)}else this.onData(Q.output.length===Q.next_out?Q.output:Q.output.subarray(0,Q.next_out));if(g!==qA||0!==C){if(g===mA)return g=KA.inflateEnd(this.strm),this.onEnd(g),this.ended=!0,!0;if(0===Q.avail_in)break}}return!0},TA.prototype.onData=function(A){this.chunks.push(A)},TA.prototype.onEnd=function(A){A===qA&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=X(this.chunks)),this.chunks=[],this.err=A,this.msg=this.strm.msg};var ZA={Inflate:TA,inflate:PA,inflateRaw:function(A,I){return(I=I||{}).raw=!0,PA(A,I)},ungzip:PA,constants:W}.inflate;function jA(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var WA=function(A){G(g,R);var I=jA(g);function g(){return w(this,g),I.apply(this,arguments)}return y(g,[{key:"decodeBlock",value:function(A){return ZA(new Uint8Array(A)).buffer}}]),g}(),VA=Object.freeze({__proto__:null,default:WA});function zA(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var XA,_A=function(A){G(g,R);var I=zA(g);function g(){return w(this,g),I.apply(this,arguments)}return y(g,[{key:"decodeBlock",value:function(A){for(var I=new DataView(A),g=[],B=0;B<A.byteLength;++B){var C=I.getInt8(B);if(C<0){var Q=I.getUint8(B+1);C=-C;for(var E=0;E<=C;++E)g.push(Q);B+=1}else{for(var i=0;i<=C;++i)g.push(I.getUint8(B+i+1));B+=C+1}}return new Uint8Array(g).buffer}}]),g}(),$A=Object.freeze({__proto__:null,default:_A}),AI={exports:{}};XA=AI,\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\nfunction(){var A,I,g,B,C,Q,E,i,o,e,t,a,r,s,n,D,w=(A={defaultNoDataValue:-34027999387901484e22,decode:function(Q,E){var i=(E=E||{}).encodedMaskData||null===E.encodedMaskData,o=C(Q,E.inputOffset||0,i),e=null!==E.noDataValue?E.noDataValue:A.defaultNoDataValue,t=I(o,E.pixelType||Float32Array,E.encodedMaskData,e,E.returnMask),a={width:o.width,height:o.height,pixelData:t.resultPixels,minValue:t.minValue,maxValue:o.pixels.maxValue,noDataValue:e};return t.resultMask&&(a.maskData=t.resultMask),E.returnEncodedMask&&o.mask&&(a.encodedMaskData=o.mask.bitset?o.mask.bitset:null),E.returnFileInfo&&(a.fileInfo=g(o),E.computeUsedBitDepths&&(a.fileInfo.bitDepths=B(o))),a}},I=function(A,I,g,B,C){var E,i,o,e=0,t=A.pixels.numBlocksX,a=A.pixels.numBlocksY,r=Math.floor(A.width/t),s=Math.floor(A.height/a),n=2*A.maxZError,D=Number.MAX_VALUE;g=g||(A.mask?A.mask.bitset:null),i=new I(A.width*A.height),C&&g&&(o=new Uint8Array(A.width*A.height));for(var w,h,y=new Float32Array(r*s),c=0;c<=a;c++){var G=c!==a?s:A.height%a;if(0!==G)for(var S=0;S<=t;S++){var N=S!==t?r:A.width%t;if(0!==N){var F,f,k,R,L=c*A.width*s+S*r,U=A.width-N,u=A.pixels.blocks[e];if(u.encoding<2?(0===u.encoding?F=u.rawData:(Q(u.stuffedData,u.bitsPerPixel,u.numValidPixels,u.offset,n,y,A.pixels.maxValue),F=y),f=0):k=2===u.encoding?0:u.offset,g)for(h=0;h<G;h++){for(7&L&&(R=g[L>>3],R<<=7&L),w=0;w<N;w++)7&L||(R=g[L>>3]),128&R?(o&&(o[L]=1),D=D>(E=u.encoding<2?F[f++]:k)?E:D,i[L++]=E):(o&&(o[L]=0),i[L++]=B),R<<=1;L+=U}else if(u.encoding<2)for(h=0;h<G;h++){for(w=0;w<N;w++)D=D>(E=F[f++])?E:D,i[L++]=E;L+=U}else for(D=D>k?k:D,h=0;h<G;h++){for(w=0;w<N;w++)i[L++]=k;L+=U}if(1===u.encoding&&f!==u.numValidPixels)throw"Block and Mask do not match";e++}}}return{resultPixels:i,resultMask:o,minValue:D}},g=function(A){return{fileIdentifierString:A.fileIdentifierString,fileVersion:A.fileVersion,imageType:A.imageType,height:A.height,width:A.width,maxZError:A.maxZError,eofOffset:A.eofOffset,mask:A.mask?{numBlocksX:A.mask.numBlocksX,numBlocksY:A.mask.numBlocksY,numBytes:A.mask.numBytes,maxValue:A.mask.maxValue}:null,pixels:{numBlocksX:A.pixels.numBlocksX,numBlocksY:A.pixels.numBlocksY,numBytes:A.pixels.numBytes,maxValue:A.pixels.maxValue,noDataValue:A.noDataValue}}},B=function(A){for(var I=A.pixels.numBlocksX*A.pixels.numBlocksY,g={},B=0;B<I;B++){var C=A.pixels.blocks[B];0===C.encoding?g.float32=!0:1===C.encoding?g[C.bitsPerPixel]=!0:g[0]=!0}return Object.keys(g)},C=function(A,I,g){var B={},C=new Uint8Array(A,I,10);if(B.fileIdentifierString=String.fromCharCode.apply(null,C),"CntZImage"!==B.fileIdentifierString.trim())throw"Unexpected file identifier string: "+B.fileIdentifierString;I+=10;var Q=new DataView(A,I,24);if(B.fileVersion=Q.getInt32(0,!0),B.imageType=Q.getInt32(4,!0),B.height=Q.getUint32(8,!0),B.width=Q.getUint32(12,!0),B.maxZError=Q.getFloat64(16,!0),I+=24,!g)if(Q=new DataView(A,I,16),B.mask={},B.mask.numBlocksY=Q.getUint32(0,!0),B.mask.numBlocksX=Q.getUint32(4,!0),B.mask.numBytes=Q.getUint32(8,!0),B.mask.maxValue=Q.getFloat32(12,!0),I+=16,B.mask.numBytes>0){var E=new Uint8Array(Math.ceil(B.width*B.height/8)),i=(Q=new DataView(A,I,B.mask.numBytes)).getInt16(0,!0),o=2,e=0;do{if(i>0)for(;i--;)E[e++]=Q.getUint8(o++);else{var t=Q.getUint8(o++);for(i=-i;i--;)E[e++]=t}i=Q.getInt16(o,!0),o+=2}while(o<B.mask.numBytes);if(-32768!==i||e<E.length)throw"Unexpected end of mask RLE encoding";B.mask.bitset=E,I+=B.mask.numBytes}else 0==(B.mask.numBytes|B.mask.numBlocksY|B.mask.maxValue)&&(B.mask.bitset=new Uint8Array(Math.ceil(B.width*B.height/8)));Q=new DataView(A,I,16),B.pixels={},B.pixels.numBlocksY=Q.getUint32(0,!0),B.pixels.numBlocksX=Q.getUint32(4,!0),B.pixels.numBytes=Q.getUint32(8,!0),B.pixels.maxValue=Q.getFloat32(12,!0),I+=16;var a=B.pixels.numBlocksX,r=B.pixels.numBlocksY,s=a+(B.width%a>0?1:0),n=r+(B.height%r>0?1:0);B.pixels.blocks=new Array(s*n);for(var D=0,w=0;w<n;w++)for(var h=0;h<s;h++){var y=0,c=A.byteLength-I;Q=new DataView(A,I,Math.min(10,c));var G={};B.pixels.blocks[D++]=G;var S=Q.getUint8(0);if(y++,G.encoding=63&S,G.encoding>3)throw"Invalid block encoding ("+G.encoding+")";if(2!==G.encoding){if(0!==S&&2!==S){if(S>>=6,G.offsetType=S,2===S)G.offset=Q.getInt8(1),y++;else if(1===S)G.offset=Q.getInt16(1,!0),y+=2;else{if(0!==S)throw"Invalid block offset type";G.offset=Q.getFloat32(1,!0),y+=4}if(1===G.encoding)if(S=Q.getUint8(y),y++,G.bitsPerPixel=63&S,S>>=6,G.numValidPixelsType=S,2===S)G.numValidPixels=Q.getUint8(y),y++;else if(1===S)G.numValidPixels=Q.getUint16(y,!0),y+=2;else{if(0!==S)throw"Invalid valid pixel count type";G.numValidPixels=Q.getUint32(y,!0),y+=4}}var N;if(I+=y,3!==G.encoding)if(0===G.encoding){var F=(B.pixels.numBytes-1)/4;if(F!==Math.floor(F))throw"uncompressed block has invalid length";N=new ArrayBuffer(4*F),new Uint8Array(N).set(new Uint8Array(A,I,4*F));var f=new Float32Array(N);G.rawData=f,I+=4*F}else if(1===G.encoding){var k=Math.ceil(G.numValidPixels*G.bitsPerPixel/8),R=Math.ceil(k/4);N=new ArrayBuffer(4*R),new Uint8Array(N).set(new Uint8Array(A,I,k)),G.stuffedData=new Uint32Array(N),I+=k}}else I++}return B.eofOffset=I,B},Q=function(A,I,g,B,C,Q,E){var i,o,e,t=(1<<I)-1,a=0,r=0,s=Math.ceil((E-B)/C),n=4*A.length-Math.ceil(I*g/8);for(A[A.length-1]<<=8*n,i=0;i<g;i++){if(0===r&&(e=A[a++],r=32),r>=I)o=e>>>r-I&t,r-=I;else{var D=I-r;o=(e&t)<<D&t,o+=(e=A[a++])>>>(r=32-D)}Q[i]=o<s?B+o*C:E}return Q},A),h=(E=function(A,I,g,B,C,Q,E,i){var o,e,t,a,r,s=(1<<g)-1,n=0,D=0,w=4*A.length-Math.ceil(g*B/8);if(A[A.length-1]<<=8*w,C)for(o=0;o<B;o++)0===D&&(t=A[n++],D=32),D>=g?(e=t>>>D-g&s,D-=g):(e=(t&s)<<(a=g-D)&s,e+=(t=A[n++])>>>(D=32-a)),I[o]=C[e];else for(r=Math.ceil((i-Q)/E),o=0;o<B;o++)0===D&&(t=A[n++],D=32),D>=g?(e=t>>>D-g&s,D-=g):(e=(t&s)<<(a=g-D)&s,e+=(t=A[n++])>>>(D=32-a)),I[o]=e<r?Q+e*E:i},i=function(A,I,g,B,C,Q){var E,i=(1<<I)-1,o=0,e=0,t=0,a=0,r=0,s=[],n=4*A.length-Math.ceil(I*g/8);A[A.length-1]<<=8*n;var D=Math.ceil((Q-B)/C);for(e=0;e<g;e++)0===a&&(E=A[o++],a=32),a>=I?(r=E>>>a-I&i,a-=I):(r=(E&i)<<(t=I-a)&i,r+=(E=A[o++])>>>(a=32-t)),s[e]=r<D?B+r*C:Q;return s.unshift(B),s},o=function(A,I,g,B,C,Q,E,i){var o,e,t,a,r=(1<<g)-1,s=0,n=0,D=0;if(C)for(o=0;o<B;o++)0===n&&(t=A[s++],n=32,D=0),n>=g?(e=t>>>D&r,n-=g,D+=g):(e=t>>>D&r,n=32-(a=g-n),e|=((t=A[s++])&(1<<a)-1)<<g-a,D=a),I[o]=C[e];else{var w=Math.ceil((i-Q)/E);for(o=0;o<B;o++)0===n&&(t=A[s++],n=32,D=0),n>=g?(e=t>>>D&r,n-=g,D+=g):(e=t>>>D&r,n=32-(a=g-n),e|=((t=A[s++])&(1<<a)-1)<<g-a,D=a),I[o]=e<w?Q+e*E:i}return I},e=function(A,I,g,B,C,Q){var E,i=(1<<I)-1,o=0,e=0,t=0,a=0,r=0,s=0,n=[],D=Math.ceil((Q-B)/C);for(e=0;e<g;e++)0===a&&(E=A[o++],a=32,s=0),a>=I?(r=E>>>s&i,a-=I,s+=I):(r=E>>>s&i,a=32-(t=I-a),r|=((E=A[o++])&(1<<t)-1)<<I-t,s=t),n[e]=r<D?B+r*C:Q;return n.unshift(B),n},t=function(A,I,g,B){var C,Q,E,i,o=(1<<g)-1,e=0,t=0,a=4*A.length-Math.ceil(g*B/8);for(A[A.length-1]<<=8*a,C=0;C<B;C++)0===t&&(E=A[e++],t=32),t>=g?(Q=E>>>t-g&o,t-=g):(Q=(E&o)<<(i=g-t)&o,Q+=(E=A[e++])>>>(t=32-i)),I[C]=Q;return I},a=function(A,I,g,B){var C,Q,E,i,o=(1<<g)-1,e=0,t=0,a=0;for(C=0;C<B;C++)0===t&&(E=A[e++],t=32,a=0),t>=g?(Q=E>>>a&o,t-=g,a+=g):(Q=E>>>a&o,t=32-(i=g-t),Q|=((E=A[e++])&(1<<i)-1)<<g-i,a=i),I[C]=Q;return I},r={HUFFMAN_LUT_BITS_MAX:12,computeChecksumFletcher32:function(A){for(var I=65535,g=65535,B=A.length,C=Math.floor(B/2),Q=0;C;){var E=C>=359?359:C;C-=E;do{I+=A[Q++]<<8,g+=I+=A[Q++]}while(--E);I=(65535&I)+(I>>>16),g=(65535&g)+(g>>>16)}return 1&B&&(g+=I+=A[Q]<<8),((g=(65535&g)+(g>>>16))<<16|(I=(65535&I)+(I>>>16)))>>>0},readHeaderInfo:function(A,I){var g=I.ptr,B=new Uint8Array(A,g,6),C={};if(C.fileIdentifierString=String.fromCharCode.apply(null,B),0!==C.fileIdentifierString.lastIndexOf("Lerc2",0))throw"Unexpected file identifier string (expect Lerc2 ): "+C.fileIdentifierString;g+=6;var Q,E=new DataView(A,g,8),i=E.getInt32(0,!0);if(C.fileVersion=i,g+=4,i>=3&&(C.checksum=E.getUint32(4,!0),g+=4),E=new DataView(A,g,12),C.height=E.getUint32(0,!0),C.width=E.getUint32(4,!0),g+=8,i>=4?(C.numDims=E.getUint32(8,!0),g+=4):C.numDims=1,E=new DataView(A,g,40),C.numValidPixel=E.getUint32(0,!0),C.microBlockSize=E.getInt32(4,!0),C.blobSize=E.getInt32(8,!0),C.imageType=E.getInt32(12,!0),C.maxZError=E.getFloat64(16,!0),C.zMin=E.getFloat64(24,!0),C.zMax=E.getFloat64(32,!0),g+=40,I.headerInfo=C,I.ptr=g,i>=3&&(Q=i>=4?52:48,this.computeChecksumFletcher32(new Uint8Array(A,g-Q,C.blobSize-14))!==C.checksum))throw"Checksum failed.";return!0},checkMinMaxRanges:function(A,I){var g=I.headerInfo,B=this.getDataTypeArray(g.imageType),C=g.numDims*this.getDataTypeSize(g.imageType),Q=this.readSubArray(A,I.ptr,B,C),E=this.readSubArray(A,I.ptr+C,B,C);I.ptr+=2*C;var i,o=!0;for(i=0;i<g.numDims;i++)if(Q[i]!==E[i]){o=!1;break}return g.minValues=Q,g.maxValues=E,o},readSubArray:function(A,I,g,B){var C;if(g===Uint8Array)C=new Uint8Array(A,I,B);else{var Q=new ArrayBuffer(B);new Uint8Array(Q).set(new Uint8Array(A,I,B)),C=new g(Q)}return C},readMask:function(A,I){var g,B,C=I.ptr,Q=I.headerInfo,E=Q.width*Q.height,i=Q.numValidPixel,o=new DataView(A,C,4),e={};if(e.numBytes=o.getUint32(0,!0),C+=4,(0===i||E===i)&&0!==e.numBytes)throw"invalid mask";if(0===i)g=new Uint8Array(Math.ceil(E/8)),e.bitset=g,B=new Uint8Array(E),I.pixels.resultMask=B,C+=e.numBytes;else if(e.numBytes>0){g=new Uint8Array(Math.ceil(E/8));var t=(o=new DataView(A,C,e.numBytes)).getInt16(0,!0),a=2,r=0,s=0;do{if(t>0)for(;t--;)g[r++]=o.getUint8(a++);else for(s=o.getUint8(a++),t=-t;t--;)g[r++]=s;t=o.getInt16(a,!0),a+=2}while(a<e.numBytes);if(-32768!==t||r<g.length)throw"Unexpected end of mask RLE encoding";B=new Uint8Array(E);var n=0,D=0;for(D=0;D<E;D++)7&D?(n=g[D>>3],n<<=7&D):n=g[D>>3],128&n&&(B[D]=1);I.pixels.resultMask=B,e.bitset=g,C+=e.numBytes}return I.ptr=C,I.mask=e,!0},readDataOneSweep:function(A,I,g,B){var C,Q=I.ptr,E=I.headerInfo,i=E.numDims,o=E.width*E.height,e=E.imageType,t=E.numValidPixel*r.getDataTypeSize(e)*i,a=I.pixels.resultMask;if(g===Uint8Array)C=new Uint8Array(A,Q,t);else{var s=new ArrayBuffer(t);new Uint8Array(s).set(new Uint8Array(A,Q,t)),C=new g(s)}if(C.length===o*i)I.pixels.resultPixels=B?r.swapDimensionOrder(C,o,i,g,!0):C;else{I.pixels.resultPixels=new g(o*i);var n=0,D=0,w=0,h=0;if(i>1){if(B){for(D=0;D<o;D++)if(a[D])for(h=D,w=0;w<i;w++,h+=o)I.pixels.resultPixels[h]=C[n++]}else for(D=0;D<o;D++)if(a[D])for(h=D*i,w=0;w<i;w++)I.pixels.resultPixels[h+w]=C[n++]}else for(D=0;D<o;D++)a[D]&&(I.pixels.resultPixels[D]=C[n++])}return Q+=t,I.ptr=Q,!0},readHuffmanTree:function(A,I){var g=this.HUFFMAN_LUT_BITS_MAX,B=new DataView(A,I.ptr,16);if(I.ptr+=16,B.getInt32(0,!0)<2)throw"unsupported Huffman version";var C=B.getInt32(4,!0),Q=B.getInt32(8,!0),E=B.getInt32(12,!0);if(Q>=E)return!1;var i=new Uint32Array(E-Q);r.decodeBits(A,I,i);var o,e,t,a,n=[];for(o=Q;o<E;o++)n[e=o-(o<C?0:C)]={first:i[o-Q],second:null};var D=A.byteLength-I.ptr,w=Math.ceil(D/4),h=new ArrayBuffer(4*w);new Uint8Array(h).set(new Uint8Array(A,I.ptr,D));var y,c=new Uint32Array(h),G=0,S=0;for(y=c[0],o=Q;o<E;o++)(a=n[e=o-(o<C?0:C)].first)>0&&(n[e].second=y<<G>>>32-a,32-G>=a?32===(G+=a)&&(G=0,y=c[++S]):(G+=a-32,y=c[++S],n[e].second|=y>>>32-G));var N=0,F=0,f=new s;for(o=0;o<n.length;o++)void 0!==n[o]&&(N=Math.max(N,n[o].first));F=N>=g?g:N;var k,R,L,U,u,Y=[];for(o=Q;o<E;o++)if((a=n[e=o-(o<C?0:C)].first)>0)if(k=[a,e],a<=F)for(R=n[e].second<<F-a,L=1<<F-a,t=0;t<L;t++)Y[R|t]=k;else for(R=n[e].second,u=f,U=a-1;U>=0;U--)R>>>U&1?(u.right||(u.right=new s),u=u.right):(u.left||(u.left=new s),u=u.left),0!==U||u.val||(u.val=k[1]);return{decodeLut:Y,numBitsLUTQick:F,numBitsLUT:N,tree:f,stuffedData:c,srcPtr:S,bitPos:G}},readHuffman:function(A,I,g,B){var C,Q,E,i,o,e,t,a,s,n=I.headerInfo.numDims,D=I.headerInfo.height,w=I.headerInfo.width,h=w*D,y=this.readHuffmanTree(A,I),c=y.decodeLut,G=y.tree,S=y.stuffedData,N=y.srcPtr,F=y.bitPos,f=y.numBitsLUTQick,k=y.numBitsLUT,R=0===I.headerInfo.imageType?128:0,L=I.pixels.resultMask,U=0;F>0&&(N++,F=0);var u,Y=S[N],d=1===I.encodeMode,l=new g(h*n),K=l;if(n<2||d){for(u=0;u<n;u++)if(n>1&&(K=new g(l.buffer,h*u,h),U=0),I.headerInfo.numValidPixel===w*D)for(a=0,e=0;e<D;e++)for(t=0;t<w;t++,a++){if(Q=0,o=i=Y<<F>>>32-f,32-F<f&&(o=i|=S[N+1]>>>64-F-f),c[o])Q=c[o][1],F+=c[o][0];else for(o=i=Y<<F>>>32-k,32-F<k&&(o=i|=S[N+1]>>>64-F-k),C=G,s=0;s<k;s++)if(!(C=i>>>k-s-1&1?C.right:C.left).left&&!C.right){Q=C.val,F=F+s+1;break}F>=32&&(F-=32,Y=S[++N]),E=Q-R,d?(E+=t>0?U:e>0?K[a-w]:U,E&=255,K[a]=E,U=E):K[a]=E}else for(a=0,e=0;e<D;e++)for(t=0;t<w;t++,a++)if(L[a]){if(Q=0,o=i=Y<<F>>>32-f,32-F<f&&(o=i|=S[N+1]>>>64-F-f),c[o])Q=c[o][1],F+=c[o][0];else for(o=i=Y<<F>>>32-k,32-F<k&&(o=i|=S[N+1]>>>64-F-k),C=G,s=0;s<k;s++)if(!(C=i>>>k-s-1&1?C.right:C.left).left&&!C.right){Q=C.val,F=F+s+1;break}F>=32&&(F-=32,Y=S[++N]),E=Q-R,d?(t>0&&L[a-1]?E+=U:e>0&&L[a-w]?E+=K[a-w]:E+=U,E&=255,K[a]=E,U=E):K[a]=E}}else for(a=0,e=0;e<D;e++)for(t=0;t<w;t++)if(a=e*w+t,!L||L[a])for(u=0;u<n;u++,a+=h){if(Q=0,o=i=Y<<F>>>32-f,32-F<f&&(o=i|=S[N+1]>>>64-F-f),c[o])Q=c[o][1],F+=c[o][0];else for(o=i=Y<<F>>>32-k,32-F<k&&(o=i|=S[N+1]>>>64-F-k),C=G,s=0;s<k;s++)if(!(C=i>>>k-s-1&1?C.right:C.left).left&&!C.right){Q=C.val,F=F+s+1;break}F>=32&&(F-=32,Y=S[++N]),E=Q-R,K[a]=E}I.ptr=I.ptr+4*(N+1)+(F>0?4:0),I.pixels.resultPixels=l,n>1&&!B&&(I.pixels.resultPixels=r.swapDimensionOrder(l,h,n,g))},decodeBits:function(A,I,g,B,C){var Q=I.headerInfo,r=Q.fileVersion,s=0,n=A.byteLength-I.ptr>=5?5:A.byteLength-I.ptr,D=new DataView(A,I.ptr,n),w=D.getUint8(0);s++;var h=w>>6,y=0===h?4:3-h,c=(32&w)>0,G=31&w,S=0;if(1===y)S=D.getUint8(s),s++;else if(2===y)S=D.getUint16(s,!0),s+=2;else{if(4!==y)throw"Invalid valid pixel count type";S=D.getUint32(s,!0),s+=4}var N,F,f,k,R,L,U,u,Y,d=2*Q.maxZError,l=Q.numDims>1?Q.maxValues[C]:Q.zMax;if(c){for(I.counter.lut++,u=D.getUint8(s),s++,k=Math.ceil((u-1)*G/8),R=Math.ceil(k/4),F=new ArrayBuffer(4*R),f=new Uint8Array(F),I.ptr+=s,f.set(new Uint8Array(A,I.ptr,k)),U=new Uint32Array(F),I.ptr+=k,Y=0;u-1>>>Y;)Y++;k=Math.ceil(S*Y/8),R=Math.ceil(k/4),F=new ArrayBuffer(4*R),(f=new Uint8Array(F)).set(new Uint8Array(A,I.ptr,k)),N=new Uint32Array(F),I.ptr+=k,L=r>=3?e(U,G,u-1,B,d,l):i(U,G,u-1,B,d,l),r>=3?o(N,g,Y,S,L):E(N,g,Y,S,L)}else I.counter.bitstuffer++,Y=G,I.ptr+=s,Y>0&&(k=Math.ceil(S*Y/8),R=Math.ceil(k/4),F=new ArrayBuffer(4*R),(f=new Uint8Array(F)).set(new Uint8Array(A,I.ptr,k)),N=new Uint32Array(F),I.ptr+=k,r>=3?null==B?a(N,g,Y,S):o(N,g,Y,S,!1,B,d,l):null==B?t(N,g,Y,S):E(N,g,Y,S,!1,B,d,l))},readTiles:function(A,I,g,B){var C=I.headerInfo,Q=C.width,E=C.height,i=Q*E,o=C.microBlockSize,e=C.imageType,t=r.getDataTypeSize(e),a=Math.ceil(Q/o),s=Math.ceil(E/o);I.pixels.numBlocksY=s,I.pixels.numBlocksX=a,I.pixels.ptr=0;var n,D,w,h,y,c,G,S,N,F,f=0,k=0,R=0,L=0,U=0,u=0,Y=0,d=0,l=0,K=0,M=0,J=0,H=0,p=0,q=0,m=new g(o*o),b=E%o||o,x=Q%o||o,v=C.numDims,O=I.pixels.resultMask,T=I.pixels.resultPixels,P=C.fileVersion>=5?14:15,Z=C.zMax;for(R=0;R<s;R++)for(U=R!==s-1?o:b,L=0;L<a;L++)for(K=R*Q*o+L*o,M=Q-(u=L!==a-1?o:x),S=0;S<v;S++){if(v>1?(F=T,K=R*Q*o+L*o,T=new g(I.pixels.resultPixels.buffer,i*S*t,i),Z=C.maxValues[S]):F=null,Y=A.byteLength-I.ptr,D={},q=0,d=(n=new DataView(A,I.ptr,Math.min(10,Y))).getUint8(0),q++,N=C.fileVersion>=5?4&d:0,l=d>>6&255,(d>>2&P)!=(L*o>>3&P))throw"integrity issue";if(N&&0===S)throw"integrity issue";if((y=3&d)>3)throw I.ptr+=q,"Invalid block encoding ("+y+")";if(2!==y)if(0===y){if(N)throw"integrity issue";if(I.counter.uncompressed++,I.ptr+=q,J=(J=U*u*t)<(H=A.byteLength-I.ptr)?J:H,w=new ArrayBuffer(J%t==0?J:J+t-J%t),new Uint8Array(w).set(new Uint8Array(A,I.ptr,J)),h=new g(w),p=0,O)for(f=0;f<U;f++){for(k=0;k<u;k++)O[K]&&(T[K]=h[p++]),K++;K+=M}else for(f=0;f<U;f++){for(k=0;k<u;k++)T[K++]=h[p++];K+=M}I.ptr+=p*t}else if(c=r.getDataTypeUsed(N&&e<6?4:e,l),G=r.getOnePixel(D,q,c,n),q+=r.getDataTypeSize(c),3===y)if(I.ptr+=q,I.counter.constantoffset++,O)for(f=0;f<U;f++){for(k=0;k<u;k++)O[K]&&(T[K]=N?Math.min(Z,F[K]+G):G),K++;K+=M}else for(f=0;f<U;f++){for(k=0;k<u;k++)T[K]=N?Math.min(Z,F[K]+G):G,K++;K+=M}else if(I.ptr+=q,r.decodeBits(A,I,m,G,S),q=0,N)if(O)for(f=0;f<U;f++){for(k=0;k<u;k++)O[K]&&(T[K]=m[q++]+F[K]),K++;K+=M}else for(f=0;f<U;f++){for(k=0;k<u;k++)T[K]=m[q++]+F[K],K++;K+=M}else if(O)for(f=0;f<U;f++){for(k=0;k<u;k++)O[K]&&(T[K]=m[q++]),K++;K+=M}else for(f=0;f<U;f++){for(k=0;k<u;k++)T[K++]=m[q++];K+=M}else{if(N)if(O)for(f=0;f<U;f++)for(k=0;k<u;k++)O[K]&&(T[K]=F[K]),K++;else for(f=0;f<U;f++)for(k=0;k<u;k++)T[K]=F[K],K++;I.counter.constant++,I.ptr+=q}}v>1&&!B&&(I.pixels.resultPixels=r.swapDimensionOrder(I.pixels.resultPixels,i,v,g))},formatFileInfo:function(A){return{fileIdentifierString:A.headerInfo.fileIdentifierString,fileVersion:A.headerInfo.fileVersion,imageType:A.headerInfo.imageType,height:A.headerInfo.height,width:A.headerInfo.width,numValidPixel:A.headerInfo.numValidPixel,microBlockSize:A.headerInfo.microBlockSize,blobSize:A.headerInfo.blobSize,maxZError:A.headerInfo.maxZError,pixelType:r.getPixelType(A.headerInfo.imageType),eofOffset:A.eofOffset,mask:A.mask?{numBytes:A.mask.numBytes}:null,pixels:{numBlocksX:A.pixels.numBlocksX,numBlocksY:A.pixels.numBlocksY,maxValue:A.headerInfo.zMax,minValue:A.headerInfo.zMin,noDataValue:A.noDataValue}}},constructConstantSurface:function(A,I){var g=A.headerInfo.zMax,B=A.headerInfo.zMin,C=A.headerInfo.maxValues,Q=A.headerInfo.numDims,E=A.headerInfo.height*A.headerInfo.width,i=0,o=0,e=0,t=A.pixels.resultMask,a=A.pixels.resultPixels;if(t)if(Q>1){if(I)for(i=0;i<Q;i++)for(e=i*E,g=C[i],o=0;o<E;o++)t[o]&&(a[e+o]=g);else for(o=0;o<E;o++)if(t[o])for(e=o*Q,i=0;i<Q;i++)a[e+Q]=C[i]}else for(o=0;o<E;o++)t[o]&&(a[o]=g);else if(Q>1&&B!==g)if(I)for(i=0;i<Q;i++)for(e=i*E,g=C[i],o=0;o<E;o++)a[e+o]=g;else for(o=0;o<E;o++)for(e=o*Q,i=0;i<Q;i++)a[e+i]=C[i];else for(o=0;o<E*Q;o++)a[o]=g},getDataTypeArray:function(A){var I;switch(A){case 0:I=Int8Array;break;case 1:I=Uint8Array;break;case 2:I=Int16Array;break;case 3:I=Uint16Array;break;case 4:I=Int32Array;break;case 5:I=Uint32Array;break;case 6:default:I=Float32Array;break;case 7:I=Float64Array}return I},getPixelType:function(A){var I;switch(A){case 0:I="S8";break;case 1:I="U8";break;case 2:I="S16";break;case 3:I="U16";break;case 4:I="S32";break;case 5:I="U32";break;case 6:default:I="F32";break;case 7:I="F64"}return I},isValidPixelValue:function(A,I){if(null==I)return!1;var g;switch(A){case 0:g=I>=-128&&I<=127;break;case 1:g=I>=0&&I<=255;break;case 2:g=I>=-32768&&I<=32767;break;case 3:g=I>=0&&I<=65536;break;case 4:g=I>=-2147483648&&I<=2147483647;break;case 5:g=I>=0&&I<=4294967296;break;case 6:g=I>=-34027999387901484e22&&I<=34027999387901484e22;break;case 7:g=I>=-17976931348623157e292&&I<=17976931348623157e292;break;default:g=!1}return g},getDataTypeSize:function(A){var I=0;switch(A){case 0:case 1:I=1;break;case 2:case 3:I=2;break;case 4:case 5:case 6:I=4;break;case 7:I=8;break;default:I=A}return I},getDataTypeUsed:function(A,I){var g=A;switch(A){case 2:case 4:g=A-I;break;case 3:case 5:g=A-2*I;break;case 6:g=0===I?A:1===I?2:1;break;case 7:g=0===I?A:A-2*I+1;break;default:g=A}return g},getOnePixel:function(A,I,g,B){var C=0;switch(g){case 0:C=B.getInt8(I);break;case 1:C=B.getUint8(I);break;case 2:C=B.getInt16(I,!0);break;case 3:C=B.getUint16(I,!0);break;case 4:C=B.getInt32(I,!0);break;case 5:C=B.getUInt32(I,!0);break;case 6:C=B.getFloat32(I,!0);break;case 7:C=B.getFloat64(I,!0);break;default:throw"the decoder does not understand this pixel type"}return C},swapDimensionOrder:function(A,I,g,B,C){var Q=0,E=0,i=0,o=0,e=A;if(g>1)if(e=new B(I*g),C)for(Q=0;Q<I;Q++)for(o=Q,i=0;i<g;i++,o+=I)e[o]=A[E++];else for(Q=0;Q<I;Q++)for(o=Q,i=0;i<g;i++,o+=I)e[E++]=A[o];return e}},s=function(A,I,g){this.val=A,this.left=I,this.right=g},{decode:function(A,I){var g=(I=I||{}).noDataValue,B=0,C={};C.ptr=I.inputOffset||0,C.pixels={},r.readHeaderInfo(A,C);var Q=C.headerInfo,E=Q.fileVersion,i=r.getDataTypeArray(Q.imageType);if(E>5)throw"unsupported lerc version 2."+E;r.readMask(A,C),Q.numValidPixel===Q.width*Q.height||C.pixels.resultMask||(C.pixels.resultMask=I.maskData);var o=Q.width*Q.height;C.pixels.resultPixels=new i(o*Q.numDims),C.counter={onesweep:0,uncompressed:0,lut:0,bitstuffer:0,constant:0,constantoffset:0};var e,t=!I.returnPixelInterleavedDims;if(0!==Q.numValidPixel)if(Q.zMax===Q.zMin)r.constructConstantSurface(C,t);else if(E>=4&&r.checkMinMaxRanges(A,C))r.constructConstantSurface(C,t);else{var a=new DataView(A,C.ptr,2),s=a.getUint8(0);if(C.ptr++,s)r.readDataOneSweep(A,C,i,t);else if(E>1&&Q.imageType<=1&&Math.abs(Q.maxZError-.5)<1e-5){var n=a.getUint8(1);if(C.ptr++,C.encodeMode=n,n>2||E<4&&n>1)throw"Invalid Huffman flag "+n;n?r.readHuffman(A,C,i,t):r.readTiles(A,C,i,t)}else r.readTiles(A,C,i,t)}C.eofOffset=C.ptr,I.inputOffset?(e=C.headerInfo.blobSize+I.inputOffset-C.ptr,Math.abs(e)>=1&&(C.eofOffset=I.inputOffset+C.headerInfo.blobSize)):(e=C.headerInfo.blobSize-C.ptr,Math.abs(e)>=1&&(C.eofOffset=C.headerInfo.blobSize));var D={width:Q.width,height:Q.height,pixelData:C.pixels.resultPixels,minValue:Q.zMin,maxValue:Q.zMax,validPixelCount:Q.numValidPixel,dimCount:Q.numDims,dimStats:{minValues:Q.minValues,maxValues:Q.maxValues},maskData:C.pixels.resultMask};if(C.pixels.resultMask&&r.isValidPixelValue(Q.imageType,g)){var w=C.pixels.resultMask;for(B=0;B<o;B++)w[B]||(D.pixelData[B]=g);D.noDataValue=g}return C.noDataValue=g,I.returnFileInfo&&(D.fileInfo=r.formatFileInfo(C)),D},getBandCount:function(A){for(var I=0,g=0,B={ptr:0,pixels:{}};g<A.byteLength-58;)r.readHeaderInfo(A,B),g+=B.headerInfo.blobSize,I++,B.ptr=g;return I}}),y=(n=new ArrayBuffer(4),D=new Uint8Array(n),new Uint32Array(n)[0]=1,1===D[0]),c={decode:function(A,I){if(!y)throw"Big endian system is not supported.";var g,B,C=(I=I||{}).inputOffset||0,Q=new Uint8Array(A,C,10),E=String.fromCharCode.apply(null,Q);if("CntZImage"===E.trim())g=w,B=1;else{if("Lerc2"!==E.substring(0,5))throw"Unexpected file identifier string: "+E;g=h,B=2}for(var i,o,e,t,a,r,s=0,n=A.byteLength-10,D=[],c={width:0,height:0,pixels:[],pixelType:I.pixelType,mask:null,statistics:[]},G=0;C<n;){var S=g.decode(A,{inputOffset:C,encodedMaskData:i,maskData:e,returnMask:0===s,returnEncodedMask:0===s,returnFileInfo:!0,returnPixelInterleavedDims:I.returnPixelInterleavedDims,pixelType:I.pixelType||null,noDataValue:I.noDataValue||null});C=S.fileInfo.eofOffset,e=S.maskData,0===s&&(i=S.encodedMaskData,c.width=S.width,c.height=S.height,c.dimCount=S.dimCount||1,c.pixelType=S.pixelType||S.fileInfo.pixelType,c.mask=e),B>1&&(e&&D.push(e),S.fileInfo.mask&&S.fileInfo.mask.numBytes>0&&G++),s++,c.pixels.push(S.pixelData),c.statistics.push({minValue:S.minValue,maxValue:S.maxValue,noDataValue:S.noDataValue,dimStats:S.dimStats})}if(B>1&&G>1){for(r=c.width*c.height,c.bandMasks=D,(e=new Uint8Array(r)).set(D[0]),t=1;t<D.length;t++)for(o=D[t],a=0;a<r;a++)e[a]=e[a]&o[a];c.maskData=e}return c}};XA.exports?XA.exports=c:this.Lerc=c}();var II,gI,BI,CI=AI.exports,QI={env:{emscripten_notify_memory_growth:function(A){BI=new Uint8Array(gI.exports.memory.buffer)}}},EI=function(){function A(){w(this,A)}return y(A,[{key:"init",value:function(){return II||(II="undefined"!=typeof fetch?fetch("data:application/wasm;base64,".concat(iI)).then((function(A){return A.arrayBuffer()})).then((function(A){return WebAssembly.instantiate(A,QI)})).then(this._init):WebAssembly.instantiate(Buffer.from(iI,"base64"),QI).then(this._init))}},{key:"_init",value:function(A){gI=A.instance,QI.env.emscripten_notify_memory_growth(0)}},{key:"decode",value:function(A){var I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!gI)throw new Error("ZSTDDecoder: Await .init() before decoding.");var g=A.byteLength,B=gI.exports.malloc(g);BI.set(A,B),I=I||Number(gI.exports.ZSTD_findDecompressedSize(B,g));var C=gI.exports.malloc(I),Q=gI.exports.ZSTD_decompress(C,I,B,g),E=BI.slice(C,C+Q);return gI.exports.free(B),gI.exports.free(C),E}}]),A}(),iI="",oI={315:"Artist",258:"BitsPerSample",265:"CellLength",264:"CellWidth",320:"ColorMap",259:"Compression",33432:"Copyright",306:"DateTime",338:"ExtraSamples",266:"FillOrder",289:"FreeByteCounts",288:"FreeOffsets",291:"GrayResponseCurve",290:"GrayResponseUnit",316:"HostComputer",270:"ImageDescription",257:"ImageLength",256:"ImageWidth",271:"Make",281:"MaxSampleValue",280:"MinSampleValue",272:"Model",254:"NewSubfileType",274:"Orientation",262:"PhotometricInterpretation",284:"PlanarConfiguration",296:"ResolutionUnit",278:"RowsPerStrip",277:"SamplesPerPixel",305:"Software",279:"StripByteCounts",273:"StripOffsets",255:"SubfileType",263:"Threshholding",282:"XResolution",283:"YResolution",326:"BadFaxLines",327:"CleanFaxData",343:"ClipPath",328:"ConsecutiveBadFaxLines",433:"Decode",434:"DefaultImageColor",269:"DocumentName",336:"DotRange",321:"HalftoneHints",346:"Indexed",347:"JPEGTables",285:"PageName",297:"PageNumber",317:"Predictor",319:"PrimaryChromaticities",532:"ReferenceBlackWhite",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",559:"StripRowCounts",330:"SubIFDs",292:"T4Options",293:"T6Options",325:"TileByteCounts",323:"TileLength",324:"TileOffsets",322:"TileWidth",301:"TransferFunction",318:"WhitePoint",344:"XClipPathUnits",286:"XPosition",529:"YCbCrCoefficients",531:"YCbCrPositioning",530:"YCbCrSubSampling",345:"YClipPathUnits",287:"YPosition",37378:"ApertureValue",40961:"ColorSpace",36868:"DateTimeDigitized",36867:"DateTimeOriginal",34665:"Exif IFD",36864:"ExifVersion",33434:"ExposureTime",41728:"FileSource",37385:"Flash",40960:"FlashpixVersion",33437:"FNumber",42016:"ImageUniqueID",37384:"LightSource",37500:"MakerNote",37377:"ShutterSpeedValue",37510:"UserComment",33723:"IPTC",34412:"CZ_LSMINFO",34675:"ICC Profile",700:"XMP",42112:"GDAL_METADATA",42113:"GDAL_NODATA",34377:"Photoshop",33550:"ModelPixelScale",33922:"ModelTiepoint",34264:"ModelTransformation",34735:"GeoKeyDirectory",34736:"GeoDoubleParams",34737:"GeoAsciiParams",50674:"LercParameters"},eI={};for(var tI in oI)oI.hasOwnProperty(tI)&&(eI[oI[tI]]=parseInt(tI,10));eI.BitsPerSample,eI.ExtraSamples,eI.SampleFormat,eI.StripByteCounts,eI.StripOffsets,eI.StripRowCounts,eI.TileByteCounts,eI.TileOffsets,eI.SubIFDs;var aI={1:"BYTE",2:"ASCII",3:"SHORT",4:"LONG",5:"RATIONAL",6:"SBYTE",7:"UNDEFINED",8:"SSHORT",9:"SLONG",10:"SRATIONAL",11:"FLOAT",12:"DOUBLE",13:"IFD",16:"LONG8",17:"SLONG8",18:"IFD8"},rI={};for(var sI in aI)aI.hasOwnProperty(sI)&&(rI[aI[sI]]=parseInt(sI,10));var nI=1,DI=0,wI=1,hI=2,yI={1024:"GTModelTypeGeoKey",1025:"GTRasterTypeGeoKey",1026:"GTCitationGeoKey",2048:"GeographicTypeGeoKey",2049:"GeogCitationGeoKey",2050:"GeogGeodeticDatumGeoKey",2051:"GeogPrimeMeridianGeoKey",2052:"GeogLinearUnitsGeoKey",2053:"GeogLinearUnitSizeGeoKey",2054:"GeogAngularUnitsGeoKey",2055:"GeogAngularUnitSizeGeoKey",2056:"GeogEllipsoidGeoKey",2057:"GeogSemiMajorAxisGeoKey",2058:"GeogSemiMinorAxisGeoKey",2059:"GeogInvFlatteningGeoKey",2060:"GeogAzimuthUnitsGeoKey",2061:"GeogPrimeMeridianLongGeoKey",2062:"GeogTOWGS84GeoKey",3072:"ProjectedCSTypeGeoKey",3073:"PCSCitationGeoKey",3074:"ProjectionGeoKey",3075:"ProjCoordTransGeoKey",3076:"ProjLinearUnitsGeoKey",3077:"ProjLinearUnitSizeGeoKey",3078:"ProjStdParallel1GeoKey",3079:"ProjStdParallel2GeoKey",3080:"ProjNatOriginLongGeoKey",3081:"ProjNatOriginLatGeoKey",3082:"ProjFalseEastingGeoKey",3083:"ProjFalseNorthingGeoKey",3084:"ProjFalseOriginLongGeoKey",3085:"ProjFalseOriginLatGeoKey",3086:"ProjFalseOriginEastingGeoKey",3087:"ProjFalseOriginNorthingGeoKey",3088:"ProjCenterLongGeoKey",3089:"ProjCenterLatGeoKey",3090:"ProjCenterEastingGeoKey",3091:"ProjCenterNorthingGeoKey",3092:"ProjScaleAtNatOriginGeoKey",3093:"ProjScaleAtCenterGeoKey",3094:"ProjAzimuthAngleGeoKey",3095:"ProjStraightVertPoleLongGeoKey",3096:"ProjRectifiedGridAngleGeoKey",4096:"VerticalCSTypeGeoKey",4097:"VerticalCitationGeoKey",4098:"VerticalDatumGeoKey",4099:"VerticalUnitsGeoKey"},cI={};for(var GI in yI)yI.hasOwnProperty(GI)&&(cI[yI[GI]]=parseInt(GI,10));function SI(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var NI,FI,fI,kI,RI=new EI,LI=function(A){G(g,R);var I=SI(g);function g(A){var B;return w(this,g),(B=I.call(this)).planarConfiguration=void 0!==A.PlanarConfiguration?A.PlanarConfiguration:1,B.samplesPerPixel=void 0!==A.SamplesPerPixel?A.SamplesPerPixel:1,B.addCompression=A.LercParameters[nI],B}return y(g,[{key:"decodeBlock",value:function(A){switch(this.addCompression){case DI:break;case wI:A=ZA(new Uint8Array(A)).buffer;break;case hI:A=RI.decode(new Uint8Array(A)).buffer;break;default:throw new Error("Unsupported LERC additional compression method identifier: ".concat(this.addCompression))}return CI.decode(A,{returnPixelInterleavedDims:1===this.planarConfiguration}).pixels[0].buffer}}]),g}(),UI=Object.freeze({__proto__:null,zstd:RI,default:LI});function uI(A,I){var g="undefined"!=typeof Symbol&&A[Symbol.iterator]||A["@@iterator"];if(!g){if(Array.isArray(A)||(g=function(A,I){if(!A)return;if("string"==typeof A)return YI(A,I);var g=Object.prototype.toString.call(A).slice(8,-1);"Object"===g&&A.constructor&&(g=A.constructor.name);if("Map"===g||"Set"===g)return Array.from(A);if("Arguments"===g||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(g))return YI(A,I)}(A))||I&&A&&"number"==typeof A.length){g&&(A=g);var B=0,C=function(){};return{s:C,n:function(){return B>=A.length?{done:!0}:{done:!1,value:A[B++]}},e:function(A){throw A},f:C}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var Q,E=!0,i=!1;return{s:function(){g=g.call(A)},n:function(){var A=g.next();return E=A.done,A},e:function(A){i=!0,Q=A},f:function(){try{E||null==g.return||g.return()}finally{if(i)throw Q}}}}function YI(A,I){(null==I||I>A.length)&&(I=A.length);for(var g=0,B=new Array(I);g<I;g++)B[g]=A[g];return B}var dI={env:{emscripten_notify_memory_growth:function(A){fI=new Uint8Array(FI.exports.memory.buffer),kI=new DataView(fI.buffer)}}},lI=function(){function A(){w(this,A)}return y(A,[{key:"init",value:function(){return NI||(NI="undefined"!=typeof fetch?fetch("data:application/wasm;base64,".concat(KI)).then((function(A){return A.arrayBuffer()})).then((function(A){return WebAssembly.instantiate(A,dI)})).then(this._init):WebAssembly.instantiate(Buffer.from(KI,"base64"),dI).then(this._init))}},{key:"_init",value:function(A){FI=A.instance,dI.env.emscripten_notify_memory_growth(0)}},{key:"decode",value:function(A){var I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!FI)throw new Error("ZSTDDecoder: Await .init() before decoding.");var g=A.byteLength,B=FI.exports.malloc(g);if(fI.set(A,B),0===I&&(I=Number(FI.exports.ZSTD_findDecompressedSize(B,g))),-1===I){FI.exports.free(B);var C,Q=[],E=uI(this.decodeStreaming([A]));try{for(E.s();!(C=E.n()).done;){var i=C.value;Q.push(i)}}catch(A){E.e(A)}finally{E.f()}if(1===Q.length)return Q[0];for(var o=Q.reduce((function(A,I){return A+I.byteLength}),0),e=new Uint8Array(o),t=0,a=0,r=Q;a<r.length;a++){var s=r[a];e.set(s,t),t+=s.byteLength}return e}var n=FI.exports.malloc(I),D=FI.exports.ZSTD_decompress(n,I,B,g),w=fI.slice(n,n+D);return FI.exports.free(B),FI.exports.free(n),w}},{key:"decodeStreaming",value:E.mark((function A(I){var g,B,C,Q,i,o,e,t,a,r,s,n,D,w;return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(FI){A.next=2;break}throw new Error("ZSTDDecoder: Await .init() before decoding.");case 2:g=FI.exports.ZSTD_DStreamInSize(),B=FI.exports.malloc(g),C=FI.exports.ZSTD_DStreamOutSize(),Q=FI.exports.malloc(C),i=FI.exports.ZSTD_createDCtx(),o=4,e=4,t=FI.exports.malloc(o+2*e),a=FI.exports.malloc(o+2*e),r=uI(I),A.prev=12,r.s();case 14:if((s=r.n()).done){A.next=34;break}n=s.value,D=FI.exports.malloc(n.byteLength),fI.set(n,D),kI.setInt32(t,D,!0),kI.setInt32(t+o,n.byteLength,!0),kI.setInt32(t+o+e,0,!0);case 21:if(!(kI.getUint32(t+o+e,!0)<kI.getUint32(t+o,!0))){A.next=31;break}return kI.setInt32(a,Q,!0),kI.setInt32(a+o,C,!0),kI.setInt32(a+o+e,0,!0),FI.exports.ZSTD_decompressStream(i,a,t),w=kI.getUint32(a+o+e),A.next=29,fI.slice(Q,Q+w);case 29:A.next=21;break;case 31:FI.exports.free(D);case 32:A.next=14;break;case 34:A.next=39;break;case 36:A.prev=36,A.t0=A.catch(12),r.e(A.t0);case 39:return A.prev=39,r.f(),A.finish(39);case 42:FI.exports.ZSTD_freeDCtx(i),FI.exports.free(B),FI.exports.free(Q),FI.exports.free(t),FI.exports.free(a);case 47:case"end":return A.stop()}}),A,null,[[12,36,39,42]])}))}]),A}(),KI="";function MI(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var JI=new lI,HI=function(A){G(g,R);var I=MI(g);function g(){return w(this,g),I.apply(this,arguments)}return y(g,[{key:"decodeBlock",value:function(A){return JI.decode(new Uint8Array(A)).buffer}}]),g}(),pI=Object.freeze({__proto__:null,zstd:JI,default:HI});function qI(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,B=N(A);if(I){var C=N(this).constructor;g=Reflect.construct(B,arguments,C)}else g=B.apply(this,arguments);return S(this,g)}}var mI=function(A){G(C,R);var I,g=qI(C);function C(){var A;if(w(this,C),A=g.call(this),"undefined"==typeof createImageBitmap)throw new Error("Cannot decode WebImage as `createImageBitmap` is not available");if("undefined"==typeof document&&"undefined"==typeof OffscreenCanvas)throw new Error("Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available");return A}return y(C,[{key:"decode",value:(I=B(E.mark((function A(I,g){var B,C,Q,i;return E.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return B=new Blob([g]),A.next=3,createImageBitmap(B);case 3:return C=A.sent,"undefined"!=typeof document?((Q=document.createElement("canvas")).width=C.width,Q.height=C.height):Q=new OffscreenCanvas(C.width,C.height),(i=Q.getContext("2d")).drawImage(C,0,0),A.abrupt("return",i.getImageData(0,0,C.width,C.height).data.buffer);case 8:case"end":return A.stop()}}),A)}))),function(A,g){return I.apply(this,arguments)})}]),C}(),bI=Object.freeze({__proto__:null,default:mI});';
  return new browser_default(typeof Buffer !== "undefined" ? "data:application/javascript;base64," + Buffer.from(source, "binary").toString("base64") : URL.createObjectURL(new Blob([source], { type: "application/javascript" })));
}

// node_modules/geotiff/dist-module/pool.js
var defaultPoolSize = typeof navigator !== "undefined" ? navigator.hardwareConcurrency || 2 : 2;
var WorkerWrapper = class {
  /**
   * @param {Worker} worker the worker to wrap
   */
  constructor(worker) {
    this.worker = worker;
    this.worker.addEventListener("message", (e) => this._onWorkerMessage(e));
    this.jobIdCounter = 0;
    this.jobs = /* @__PURE__ */ new Map();
  }
  /**
   * Get a new job id
   * @returns {Number} the new job id
   */
  newJobId() {
    return this.jobIdCounter++;
  }
  /**
   * Get the number of jobs currently running
   * @returns {Number} the number of jobs currently running
   */
  getJobCount() {
    return this.jobs.size;
  }
  _onWorkerMessage(e) {
    const { jobId, error, ...result } = e.data;
    const job = this.jobs.get(jobId);
    this.jobs.delete(jobId);
    if (error) {
      job.reject(new Error(error));
    } else {
      job.resolve(result);
    }
  }
  /**
   * Submit a job to the worker
   * @param {Object} message the message to send to the worker. A "jobId" property will be added to this object.
   * @param {Object[]} [transferables] an optional array of transferable objects to transfer to the worker.
   * @returns {Promise} a promise that gets resolved/rejected when a message with the same jobId is received from the worker.
   */
  submitJob(message, transferables = void 0) {
    const jobId = this.newJobId();
    let resolve;
    let reject;
    const promise = new Promise((_resolve, _reject) => {
      resolve = _resolve;
      reject = _reject;
    });
    this.jobs.set(jobId, { resolve, reject });
    this.worker.postMessage({ ...message, jobId }, transferables);
    return promise;
  }
  terminate() {
    this.worker.terminate();
  }
};
var finalizationRegistry = new FinalizationRegistry((worker) => {
  worker.terminate();
});
var Pool = class {
  /**
   * @constructor
   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs
   *                      available. When this parameter is `null` or 0, then the
   *                      decoding will be done in the main thread.
   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.
   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`
   * function is expected to return a `Worker` compatible with Web Workers. For code that
   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.
   *
   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:
   * ```js
   * import { addDecoder, getDecoder } from 'geotiff';
   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));
   * self.addEventListener('message', async (e) => {
   *   const { id, fileDirectory, buffer } = e.data;
   *   const decoder = await getDecoder(fileDirectory);
   *   const decoded = await decoder.decode(fileDirectory, buffer);
   *   self.postMessage({ decoded, id }, [decoded]);
   * });
   * ```
   * The way the above code is built into a worker by the `createWorker()` function
   * depends on the used bundler. For most bundlers, something like this will work:
   * ```js
   * function createWorker() {
   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));
   * }
   * ```
   */
  constructor(size = defaultPoolSize, createWorker = create) {
    this.workerWrappers = null;
    if (size) {
      this.workerWrappers = (async () => {
        const workerWrappers = [];
        for (let i = 0; i < size; i++) {
          const worker = createWorker();
          const wrapper = new WorkerWrapper(worker);
          workerWrappers.push(wrapper);
          finalizationRegistry.register(wrapper, worker, wrapper);
        }
        return workerWrappers;
      })();
    }
  }
  /**
   * Decode the given block of bytes with the set compression method.
   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.
   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`
   */
  async decode(fileDirectory, buffer2) {
    if (preferWorker(fileDirectory) && this.workerWrappers) {
      const workerWrapper = (await this.workerWrappers).reduce((a, b) => {
        return a.getJobCount() < b.getJobCount() ? a : b;
      });
      const { decoded } = await workerWrapper.submitJob({ fileDirectory, buffer: buffer2 }, [buffer2]);
      return decoded;
    } else {
      return getDecoder(fileDirectory).then((decoder) => decoder.decode(fileDirectory, buffer2));
    }
  }
  async destroy() {
    if (this.workerWrappers) {
      (await this.workerWrappers).forEach((worker) => {
        worker.terminate();
      });
      this.workerWrappers = null;
    }
  }
};
var pool_default = Pool;

// node_modules/geotiff/dist-module/source/httputils.js
var CRLFCRLF = "\r\n\r\n";
function itemsToObject(items) {
  if (typeof Object.fromEntries !== "undefined") {
    return Object.fromEntries(items);
  }
  const obj = {};
  for (const [key, value] of items) {
    obj[key.toLowerCase()] = value;
  }
  return obj;
}
function parseHeaders(text) {
  const items = text.split("\r\n").map((line) => {
    const kv = line.split(":").map((str) => str.trim());
    kv[0] = kv[0].toLowerCase();
    return kv;
  });
  return itemsToObject(items);
}
function parseContentType(rawContentType) {
  const [type, ...rawParams] = rawContentType.split(";").map((s) => s.trim());
  const paramsItems = rawParams.map((param) => param.split("="));
  return { type, params: itemsToObject(paramsItems) };
}
function parseContentRange(rawContentRange) {
  let start;
  let end;
  let total;
  if (rawContentRange) {
    [, start, end, total] = rawContentRange.match(/bytes (\d+)-(\d+)\/(\d+)/);
    start = parseInt(start, 10);
    end = parseInt(end, 10);
    total = parseInt(total, 10);
  }
  return { start, end, total };
}
function parseByteRanges(responseArrayBuffer, boundary) {
  let offset = null;
  const decoder = new TextDecoder("ascii");
  const out = [];
  const startBoundary = `--${boundary}`;
  const endBoundary = `${startBoundary}--`;
  for (let i = 0; i < 10; ++i) {
    const text = decoder.decode(
      new Uint8Array(responseArrayBuffer, i, startBoundary.length)
    );
    if (text === startBoundary) {
      offset = i;
    }
  }
  if (offset === null) {
    throw new Error("Could not find initial boundary");
  }
  while (offset < responseArrayBuffer.byteLength) {
    const text = decoder.decode(
      new Uint8Array(
        responseArrayBuffer,
        offset,
        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset)
      )
    );
    if (text.length === 0 || text.startsWith(endBoundary)) {
      break;
    }
    if (!text.startsWith(startBoundary)) {
      throw new Error("Part does not start with boundary");
    }
    const innerText = text.substr(startBoundary.length + 2);
    if (innerText.length === 0) {
      break;
    }
    const endOfHeaders = innerText.indexOf(CRLFCRLF);
    const headers = parseHeaders(innerText.substr(0, endOfHeaders));
    const { start, end, total } = parseContentRange(headers["content-range"]);
    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;
    const length = parseInt(end, 10) + 1 - parseInt(start, 10);
    out.push({
      headers,
      data: responseArrayBuffer.slice(startOfData, startOfData + length),
      offset: start,
      length,
      fileSize: total
    });
    offset = startOfData + length + 4;
  }
  return out;
}

// node_modules/geotiff/dist-module/source/basesource.js
var BaseSource = class {
  /**
   *
   * @param {Slice[]} slices
   * @returns {ArrayBuffer[]}
   */
  async fetch(slices, signal = void 0) {
    return Promise.all(
      slices.map((slice) => this.fetchSlice(slice, signal))
    );
  }
  /**
   *
   * @param {Slice} slice
   * @returns {ArrayBuffer}
   */
  async fetchSlice(slice) {
    throw new Error(`fetching of slice ${slice} not possible, not implemented`);
  }
  /**
   * Returns the filesize if already determined and null otherwise
   */
  get fileSize() {
    return null;
  }
  async close() {
  }
};

// node_modules/quick-lru/index.js
var QuickLRU = class extends Map {
  constructor(options = {}) {
    super();
    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError("`maxSize` must be a number greater than 0");
    }
    if (typeof options.maxAge === "number" && options.maxAge === 0) {
      throw new TypeError("`maxAge` must be a number greater than 0");
    }
    this.maxSize = options.maxSize;
    this.maxAge = options.maxAge || Number.POSITIVE_INFINITY;
    this.onEviction = options.onEviction;
    this.cache = /* @__PURE__ */ new Map();
    this.oldCache = /* @__PURE__ */ new Map();
    this._size = 0;
  }
  // TODO: Use private class methods when targeting Node.js 16.
  _emitEvictions(cache) {
    if (typeof this.onEviction !== "function") {
      return;
    }
    for (const [key, item] of cache) {
      this.onEviction(key, item.value);
    }
  }
  _deleteIfExpired(key, item) {
    if (typeof item.expiry === "number" && item.expiry <= Date.now()) {
      if (typeof this.onEviction === "function") {
        this.onEviction(key, item.value);
      }
      return this.delete(key);
    }
    return false;
  }
  _getOrDeleteIfExpired(key, item) {
    const deleted = this._deleteIfExpired(key, item);
    if (deleted === false) {
      return item.value;
    }
  }
  _getItemValue(key, item) {
    return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;
  }
  _peek(key, cache) {
    const item = cache.get(key);
    return this._getItemValue(key, item);
  }
  _set(key, value) {
    this.cache.set(key, value);
    this._size++;
    if (this._size >= this.maxSize) {
      this._size = 0;
      this._emitEvictions(this.oldCache);
      this.oldCache = this.cache;
      this.cache = /* @__PURE__ */ new Map();
    }
  }
  _moveToRecent(key, item) {
    this.oldCache.delete(key);
    this._set(key, item);
  }
  *_entriesAscending() {
    for (const item of this.oldCache) {
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield item;
        }
      }
    }
    for (const item of this.cache) {
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield item;
      }
    }
  }
  get(key) {
    if (this.cache.has(key)) {
      const item = this.cache.get(key);
      return this._getItemValue(key, item);
    }
    if (this.oldCache.has(key)) {
      const item = this.oldCache.get(key);
      if (this._deleteIfExpired(key, item) === false) {
        this._moveToRecent(key, item);
        return item.value;
      }
    }
  }
  set(key, value, { maxAge = this.maxAge } = {}) {
    const expiry = typeof maxAge === "number" && maxAge !== Number.POSITIVE_INFINITY ? Date.now() + maxAge : void 0;
    if (this.cache.has(key)) {
      this.cache.set(key, {
        value,
        expiry
      });
    } else {
      this._set(key, { value, expiry });
    }
    return this;
  }
  has(key) {
    if (this.cache.has(key)) {
      return !this._deleteIfExpired(key, this.cache.get(key));
    }
    if (this.oldCache.has(key)) {
      return !this._deleteIfExpired(key, this.oldCache.get(key));
    }
    return false;
  }
  peek(key) {
    if (this.cache.has(key)) {
      return this._peek(key, this.cache);
    }
    if (this.oldCache.has(key)) {
      return this._peek(key, this.oldCache);
    }
  }
  delete(key) {
    const deleted = this.cache.delete(key);
    if (deleted) {
      this._size--;
    }
    return this.oldCache.delete(key) || deleted;
  }
  clear() {
    this.cache.clear();
    this.oldCache.clear();
    this._size = 0;
  }
  resize(newSize) {
    if (!(newSize && newSize > 0)) {
      throw new TypeError("`maxSize` must be a number greater than 0");
    }
    const items = [...this._entriesAscending()];
    const removeCount = items.length - newSize;
    if (removeCount < 0) {
      this.cache = new Map(items);
      this.oldCache = /* @__PURE__ */ new Map();
      this._size = items.length;
    } else {
      if (removeCount > 0) {
        this._emitEvictions(items.slice(0, removeCount));
      }
      this.oldCache = new Map(items.slice(removeCount));
      this.cache = /* @__PURE__ */ new Map();
      this._size = 0;
    }
    this.maxSize = newSize;
  }
  *keys() {
    for (const [key] of this) {
      yield key;
    }
  }
  *values() {
    for (const [, value] of this) {
      yield value;
    }
  }
  *[Symbol.iterator]() {
    for (const item of this.cache) {
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield [key, value.value];
      }
    }
    for (const item of this.oldCache) {
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield [key, value.value];
        }
      }
    }
  }
  *entriesDescending() {
    let items = [...this.cache];
    for (let i = items.length - 1; i >= 0; --i) {
      const item = items[i];
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield [key, value.value];
      }
    }
    items = [...this.oldCache];
    for (let i = items.length - 1; i >= 0; --i) {
      const item = items[i];
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield [key, value.value];
        }
      }
    }
  }
  *entriesAscending() {
    for (const [key, value] of this._entriesAscending()) {
      yield [key, value.value];
    }
  }
  get size() {
    if (!this._size) {
      return this.oldCache.size;
    }
    let oldCacheSize = 0;
    for (const key of this.oldCache.keys()) {
      if (!this.cache.has(key)) {
        oldCacheSize++;
      }
    }
    return Math.min(this._size + oldCacheSize, this.maxSize);
  }
  entries() {
    return this.entriesAscending();
  }
  forEach(callbackFunction, thisArgument = this) {
    for (const [key, value] of this.entriesAscending()) {
      callbackFunction.call(thisArgument, value, key, this);
    }
  }
  get [Symbol.toStringTag]() {
    return JSON.stringify([...this.entriesAscending()]);
  }
};

// node_modules/geotiff/dist-module/utils.js
function assign(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
function endsWith(string, expectedEnding) {
  if (string.length < expectedEnding.length) {
    return false;
  }
  const actualEnding = string.substr(string.length - expectedEnding.length);
  return actualEnding === expectedEnding;
}
function forEach(iterable, func) {
  const { length } = iterable;
  for (let i = 0; i < length; i++) {
    func(iterable[i], i);
  }
}
function invert(oldObj) {
  const newObj = {};
  for (const key in oldObj) {
    if (oldObj.hasOwnProperty(key)) {
      const value = oldObj[key];
      newObj[value] = key;
    }
  }
  return newObj;
}
function times(numTimes, func) {
  const results = [];
  for (let i = 0; i < numTimes; i++) {
    results.push(func(i));
  }
  return results;
}
async function wait(milliseconds) {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
}
function zip(a, b) {
  const A = Array.isArray(a) ? a : Array.from(a);
  const B = Array.isArray(b) ? b : Array.from(b);
  return A.map((k, i) => [k, B[i]]);
}
var AbortError = class _AbortError extends Error {
  constructor(params) {
    super(params);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, _AbortError);
    }
    this.name = "AbortError";
  }
};
var CustomAggregateError = class extends Error {
  constructor(errors, message) {
    super(message);
    this.errors = errors;
    this.message = message;
    this.name = "AggregateError";
  }
};
var AggregateError = CustomAggregateError;
function isTypedFloatArray(input) {
  if (ArrayBuffer.isView(input)) {
    const ctr = input.constructor;
    if (ctr === Float32Array || ctr === Float64Array) {
      return true;
    }
  }
  return false;
}
function isTypedIntArray(input) {
  if (ArrayBuffer.isView(input)) {
    const ctr = input.constructor;
    if (ctr === Int8Array || ctr === Int16Array || ctr === Int32Array) {
      return true;
    }
  }
  return false;
}
function isTypedUintArray(input) {
  if (ArrayBuffer.isView(input)) {
    const ctr = input.constructor;
    if (ctr === Uint8Array || ctr === Uint16Array || ctr === Uint32Array || ctr === Uint8ClampedArray) {
      return true;
    }
  }
  return false;
}
var typeMap = {
  Float64Array,
  Float32Array,
  Uint32Array,
  Uint16Array,
  Uint8Array
};

// node_modules/geotiff/dist-module/source/blockedsource.js
var Block = class {
  /**
   *
   * @param {number} offset
   * @param {number} length
   * @param {ArrayBuffer} [data]
   */
  constructor(offset, length, data = null) {
    this.offset = offset;
    this.length = length;
    this.data = data;
  }
  /**
   * @returns {number} the top byte border
   */
  get top() {
    return this.offset + this.length;
  }
};
var BlockGroup = class {
  /**
   *
   * @param {number} offset
   * @param {number} length
   * @param {number[]} blockIds
   */
  constructor(offset, length, blockIds) {
    this.offset = offset;
    this.length = length;
    this.blockIds = blockIds;
  }
};
var BlockedSource = class extends BaseSource {
  /**
   *
   * @param {BaseSource} source The underlying source that shall be blocked and cached
   * @param {object} options
   * @param {number} [options.blockSize]
   * @param {number} [options.cacheSize]
   */
  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {
    super();
    this.source = source;
    this.blockSize = blockSize;
    this.blockCache = new QuickLRU({
      maxSize: cacheSize,
      onEviction: (blockId, block) => {
        this.evictedBlocks.set(blockId, block);
      }
    });
    this.evictedBlocks = /* @__PURE__ */ new Map();
    this.blockRequests = /* @__PURE__ */ new Map();
    this.blockIdsToFetch = /* @__PURE__ */ new Set();
    this.abortedBlockIds = /* @__PURE__ */ new Set();
  }
  get fileSize() {
    return this.source.fileSize;
  }
  /**
   *
   * @param {import("./basesource").Slice[]} slices
   */
  async fetch(slices, signal) {
    const blockRequests = [];
    const missingBlockIds = [];
    const allBlockIds = [];
    this.evictedBlocks.clear();
    for (const { offset, length } of slices) {
      let top = offset + length;
      const { fileSize } = this;
      if (fileSize !== null) {
        top = Math.min(top, fileSize);
      }
      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;
      for (let current = firstBlockOffset; current < top; current += this.blockSize) {
        const blockId = Math.floor(current / this.blockSize);
        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {
          this.blockIdsToFetch.add(blockId);
          missingBlockIds.push(blockId);
        }
        if (this.blockRequests.has(blockId)) {
          blockRequests.push(this.blockRequests.get(blockId));
        }
        allBlockIds.push(blockId);
      }
    }
    await wait();
    this.fetchBlocks(signal);
    const missingRequests = [];
    for (const blockId of missingBlockIds) {
      if (this.blockRequests.has(blockId)) {
        missingRequests.push(this.blockRequests.get(blockId));
      }
    }
    await Promise.allSettled(blockRequests);
    await Promise.allSettled(missingRequests);
    const abortedBlockRequests = [];
    const abortedBlockIds = allBlockIds.filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));
    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));
    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {
      this.fetchBlocks(null);
      for (const blockId of abortedBlockIds) {
        const block = this.blockRequests.get(blockId);
        if (!block) {
          throw new Error(`Block ${blockId} is not in the block requests`);
        }
        abortedBlockRequests.push(block);
      }
      await Promise.allSettled(abortedBlockRequests);
    }
    if (signal && signal.aborted) {
      throw new AbortError("Request was aborted");
    }
    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));
    const failedBlocks = blocks.filter((i) => !i);
    if (failedBlocks.length) {
      throw new AggregateError(failedBlocks, "Request failed");
    }
    const requiredBlocks = new Map(zip(allBlockIds, blocks));
    return this.readSliceData(slices, requiredBlocks);
  }
  /**
   *
   * @param {AbortSignal} signal
   */
  fetchBlocks(signal) {
    if (this.blockIdsToFetch.size > 0) {
      const groups = this.groupBlocks(this.blockIdsToFetch);
      const groupRequests = this.source.fetch(groups, signal);
      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {
        const group = groups[groupIndex];
        for (const blockId of group.blockIds) {
          this.blockRequests.set(blockId, (async () => {
            try {
              const response = (await groupRequests)[groupIndex];
              const blockOffset = blockId * this.blockSize;
              const o = blockOffset - response.offset;
              const t = Math.min(o + this.blockSize, response.data.byteLength);
              const data = response.data.slice(o, t);
              const block = new Block(
                blockOffset,
                data.byteLength,
                data,
                blockId
              );
              this.blockCache.set(blockId, block);
              this.abortedBlockIds.delete(blockId);
            } catch (err) {
              if (err.name === "AbortError") {
                err.signal = signal;
                this.blockCache.delete(blockId);
                this.abortedBlockIds.add(blockId);
              } else {
                throw err;
              }
            } finally {
              this.blockRequests.delete(blockId);
            }
          })());
        }
      }
      this.blockIdsToFetch.clear();
    }
  }
  /**
   *
   * @param {Set} blockIds
   * @returns {BlockGroup[]}
   */
  groupBlocks(blockIds) {
    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);
    if (sortedBlockIds.length === 0) {
      return [];
    }
    let current = [];
    let lastBlockId = null;
    const groups = [];
    for (const blockId of sortedBlockIds) {
      if (lastBlockId === null || lastBlockId + 1 === blockId) {
        current.push(blockId);
        lastBlockId = blockId;
      } else {
        groups.push(new BlockGroup(
          current[0] * this.blockSize,
          current.length * this.blockSize,
          current
        ));
        current = [blockId];
        lastBlockId = blockId;
      }
    }
    groups.push(new BlockGroup(
      current[0] * this.blockSize,
      current.length * this.blockSize,
      current
    ));
    return groups;
  }
  /**
   *
   * @param {import("./basesource").Slice[]} slices
   * @param {Map} blocks
   */
  readSliceData(slices, blocks) {
    return slices.map((slice) => {
      let top = slice.offset + slice.length;
      if (this.fileSize !== null) {
        top = Math.min(this.fileSize, top);
      }
      const blockIdLow = Math.floor(slice.offset / this.blockSize);
      const blockIdHigh = Math.floor(top / this.blockSize);
      const sliceData = new ArrayBuffer(slice.length);
      const sliceView = new Uint8Array(sliceData);
      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {
        const block = blocks.get(blockId);
        const delta = block.offset - slice.offset;
        const topDelta = block.top - top;
        let blockInnerOffset = 0;
        let rangeInnerOffset = 0;
        let usedBlockLength;
        if (delta < 0) {
          blockInnerOffset = -delta;
        } else if (delta > 0) {
          rangeInnerOffset = delta;
        }
        if (topDelta < 0) {
          usedBlockLength = block.length - blockInnerOffset;
        } else {
          usedBlockLength = top - block.offset - blockInnerOffset;
        }
        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);
        sliceView.set(blockView, rangeInnerOffset);
      }
      return sliceData;
    });
  }
};

// node_modules/geotiff/dist-module/source/client/base.js
var BaseResponse = class {
  /**
   * Returns whether the response has an ok'ish status code
   */
  get ok() {
    return this.status >= 200 && this.status <= 299;
  }
  /**
   * Returns the status code of the response
   */
  get status() {
    throw new Error("not implemented");
  }
  /**
   * Returns the value of the specified header
   * @param {string} headerName the header name
   * @returns {string} the header value
   */
  getHeader(headerName) {
    throw new Error("not implemented");
  }
  /**
   * @returns {ArrayBuffer} the response data of the request
   */
  async getData() {
    throw new Error("not implemented");
  }
};
var BaseClient = class {
  constructor(url) {
    this.url = url;
  }
  /**
   * Send a request with the options
   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]
   * @returns {Promise<BaseResponse>}
   */
  async request({ headers, signal } = {}) {
    throw new Error("request is not implemented");
  }
};

// node_modules/geotiff/dist-module/source/client/fetch.js
var FetchResponse = class extends BaseResponse {
  /**
   * BaseResponse facade for fetch API Response
   * @param {Response} response
   */
  constructor(response) {
    super();
    this.response = response;
  }
  get status() {
    return this.response.status;
  }
  getHeader(name) {
    return this.response.headers.get(name);
  }
  async getData() {
    const data = this.response.arrayBuffer ? await this.response.arrayBuffer() : (await this.response.buffer()).buffer;
    return data;
  }
};
var FetchClient = class extends BaseClient {
  constructor(url, credentials) {
    super(url);
    this.credentials = credentials;
  }
  /**
   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]
   * @returns {Promise<FetchResponse>}
   */
  async request({ headers, signal } = {}) {
    const response = await fetch(this.url, {
      headers,
      credentials: this.credentials,
      signal
    });
    return new FetchResponse(response);
  }
};

// node_modules/geotiff/dist-module/source/client/xhr.js
var XHRResponse = class extends BaseResponse {
  /**
   * BaseResponse facade for XMLHttpRequest
   * @param {XMLHttpRequest} xhr
   * @param {ArrayBuffer} data
   */
  constructor(xhr, data) {
    super();
    this.xhr = xhr;
    this.data = data;
  }
  get status() {
    return this.xhr.status;
  }
  getHeader(name) {
    return this.xhr.getResponseHeader(name);
  }
  async getData() {
    return this.data;
  }
};
var XHRClient = class extends BaseClient {
  constructRequest(headers, signal) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", this.url);
      xhr.responseType = "arraybuffer";
      for (const [key, value] of Object.entries(headers)) {
        xhr.setRequestHeader(key, value);
      }
      xhr.onload = () => {
        const data = xhr.response;
        resolve(new XHRResponse(xhr, data));
      };
      xhr.onerror = reject;
      xhr.onabort = () => reject(new AbortError("Request aborted"));
      xhr.send();
      if (signal) {
        if (signal.aborted) {
          xhr.abort();
        }
        signal.addEventListener("abort", () => xhr.abort());
      }
    });
  }
  async request({ headers, signal } = {}) {
    const response = await this.constructRequest(headers, signal);
    return response;
  }
};

// node_modules/geotiff/dist-module/source/client/http.js
var import_http = __toESM(require_http(), 1);
var import_https = __toESM(require_https(), 1);
var import_url = __toESM(require_url(), 1);
var HttpResponse = class extends BaseResponse {
  /**
   * BaseResponse facade for node HTTP/HTTPS API Response
   * @param {http.ServerResponse} response
   */
  constructor(response, dataPromise) {
    super();
    this.response = response;
    this.dataPromise = dataPromise;
  }
  get status() {
    return this.response.statusCode;
  }
  getHeader(name) {
    return this.response.headers[name];
  }
  async getData() {
    const data = await this.dataPromise;
    return data;
  }
};
var HttpClient = class extends BaseClient {
  constructor(url) {
    super(url);
    this.parsedUrl = import_url.default.parse(this.url);
    this.httpApi = this.parsedUrl.protocol === "http:" ? import_http.default : import_https.default;
  }
  constructRequest(headers, signal) {
    return new Promise((resolve, reject) => {
      const request = this.httpApi.get(
        {
          ...this.parsedUrl,
          headers
        },
        (response) => {
          const dataPromise = new Promise((resolveData) => {
            const chunks = [];
            response.on("data", (chunk) => {
              chunks.push(chunk);
            });
            response.on("end", () => {
              const data = Buffer.concat(chunks).buffer;
              resolveData(data);
            });
            response.on("error", reject);
          });
          resolve(new HttpResponse(response, dataPromise));
        }
      );
      request.on("error", reject);
      if (signal) {
        if (signal.aborted) {
          request.destroy(new AbortError("Request aborted"));
        }
        signal.addEventListener("abort", () => request.destroy(new AbortError("Request aborted")));
      }
    });
  }
  async request({ headers, signal } = {}) {
    const response = await this.constructRequest(headers, signal);
    return response;
  }
};

// node_modules/geotiff/dist-module/source/remote.js
var RemoteSource = class extends BaseSource {
  /**
   *
   * @param {BaseClient} client
   * @param {object} headers
   * @param {numbers} maxRanges
   * @param {boolean} allowFullFile
   */
  constructor(client, headers, maxRanges, allowFullFile) {
    super();
    this.client = client;
    this.headers = headers;
    this.maxRanges = maxRanges;
    this.allowFullFile = allowFullFile;
    this._fileSize = null;
  }
  /**
   *
   * @param {Slice[]} slices
   */
  async fetch(slices, signal) {
    if (this.maxRanges >= slices.length) {
      return this.fetchSlices(slices, signal);
    } else if (this.maxRanges > 0 && slices.length > 1) {
    }
    return Promise.all(
      slices.map((slice) => this.fetchSlice(slice, signal))
    );
  }
  async fetchSlices(slices, signal) {
    const response = await this.client.request({
      headers: {
        ...this.headers,
        Range: `bytes=${slices.map(({ offset, length }) => `${offset}-${offset + length}`).join(",")}`
      },
      signal
    });
    if (!response.ok) {
      throw new Error("Error fetching data.");
    } else if (response.status === 206) {
      const { type, params } = parseContentType(response.getHeader("content-type"));
      if (type === "multipart/byteranges") {
        const byteRanges = parseByteRanges(await response.getData(), params.boundary);
        this._fileSize = byteRanges[0].fileSize || null;
        return byteRanges;
      }
      const data = await response.getData();
      const { start, end, total } = parseContentRange(response.getHeader("content-range"));
      this._fileSize = total || null;
      const first = [{
        data,
        offset: start,
        length: end - start
      }];
      if (slices.length > 1) {
        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));
        return first.concat(others);
      }
      return first;
    } else {
      if (!this.allowFullFile) {
        throw new Error("Server responded with full file");
      }
      const data = await response.getData();
      this._fileSize = data.byteLength;
      return [{
        data,
        offset: 0,
        length: data.byteLength
      }];
    }
  }
  async fetchSlice(slice, signal) {
    const { offset, length } = slice;
    const response = await this.client.request({
      headers: {
        ...this.headers,
        Range: `bytes=${offset}-${offset + length}`
      },
      signal
    });
    if (!response.ok) {
      throw new Error("Error fetching data.");
    } else if (response.status === 206) {
      const data = await response.getData();
      const { total } = parseContentRange(response.getHeader("content-range"));
      this._fileSize = total || null;
      return {
        data,
        offset,
        length
      };
    } else {
      if (!this.allowFullFile) {
        throw new Error("Server responded with full file");
      }
      const data = await response.getData();
      this._fileSize = data.byteLength;
      return {
        data,
        offset: 0,
        length: data.byteLength
      };
    }
  }
  get fileSize() {
    return this._fileSize;
  }
};
function maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {
  if (blockSize === null) {
    return source;
  }
  return new BlockedSource(source, { blockSize, cacheSize });
}
function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
  const client = new FetchClient(url, credentials);
  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
  return maybeWrapInBlockedSource(source, blockOptions);
}
function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
  const client = new XHRClient(url);
  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
  return maybeWrapInBlockedSource(source, blockOptions);
}
function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
  const client = new HttpClient(url);
  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
  return maybeWrapInBlockedSource(source, blockOptions);
}
function makeCustomSource(client, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
  return maybeWrapInBlockedSource(source, blockOptions);
}
function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {
  if (typeof fetch === "function" && !forceXHR) {
    return makeFetchSource(url, clientOptions);
  }
  if (typeof XMLHttpRequest !== "undefined") {
    return makeXHRSource(url, clientOptions);
  }
  return makeHttpSource(url, clientOptions);
}

// node_modules/geotiff/dist-module/source/arraybuffer.js
var ArrayBufferSource = class extends BaseSource {
  constructor(arrayBuffer) {
    super();
    this.arrayBuffer = arrayBuffer;
  }
  fetchSlice(slice, signal) {
    if (signal && signal.aborted) {
      throw new AbortError("Request aborted");
    }
    return this.arrayBuffer.slice(slice.offset, slice.offset + slice.length);
  }
};
function makeBufferSource(arrayBuffer) {
  return new ArrayBufferSource(arrayBuffer);
}

// node_modules/geotiff/dist-module/source/filereader.js
var FileReaderSource = class extends BaseSource {
  constructor(file) {
    super();
    this.file = file;
  }
  async fetchSlice(slice, signal) {
    return new Promise((resolve, reject) => {
      const blob = this.file.slice(slice.offset, slice.offset + slice.length);
      const reader = new FileReader();
      reader.onload = (event) => resolve(event.target.result);
      reader.onerror = reject;
      reader.onabort = reject;
      reader.readAsArrayBuffer(blob);
      if (signal) {
        signal.addEventListener("abort", () => reader.abort());
      }
    });
  }
};
function makeFileReaderSource(file) {
  return new FileReaderSource(file);
}

// node_modules/geotiff/dist-module/source/file.js
var import_fs = __toESM(require_fs(), 1);
function closeAsync(fd) {
  return new Promise((resolve, reject) => {
    import_fs.default.close(fd, (err) => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}
function openAsync(path, flags, mode = void 0) {
  return new Promise((resolve, reject) => {
    import_fs.default.open(path, flags, mode, (err, fd) => {
      if (err) {
        reject(err);
      } else {
        resolve(fd);
      }
    });
  });
}
function readAsync(...args) {
  return new Promise((resolve, reject) => {
    import_fs.default.read(...args, (err, bytesRead, buffer2) => {
      if (err) {
        reject(err);
      } else {
        resolve({ bytesRead, buffer: buffer2 });
      }
    });
  });
}
var FileSource = class extends BaseSource {
  constructor(path) {
    super();
    this.path = path;
    this.openRequest = openAsync(path, "r");
  }
  async fetchSlice(slice) {
    const fd = await this.openRequest;
    const { buffer: buffer2 } = await readAsync(
      fd,
      Buffer.alloc(slice.length),
      0,
      slice.length,
      slice.offset
    );
    return buffer2.buffer;
  }
  async close() {
    const fd = await this.openRequest;
    await closeAsync(fd);
  }
};
function makeFileSource(path) {
  return new FileSource(path);
}

// node_modules/geotiff/dist-module/geotiffwriter.js
var tagName2Code = invert(fieldTagNames);
var geoKeyName2Code = invert(geoKeyNames);
var name2code = {};
assign(name2code, tagName2Code);
assign(name2code, geoKeyName2Code);
var typeName2byte = invert(fieldTypeNames);
var numBytesInIfd = 1e3;
var _binBE = {
  nextZero: (data, o) => {
    let oincr = o;
    while (data[oincr] !== 0) {
      oincr++;
    }
    return oincr;
  },
  readUshort: (buff, p) => {
    return buff[p] << 8 | buff[p + 1];
  },
  readShort: (buff, p) => {
    const a = _binBE.ui8;
    a[0] = buff[p + 1];
    a[1] = buff[p + 0];
    return _binBE.i16[0];
  },
  readInt: (buff, p) => {
    const a = _binBE.ui8;
    a[0] = buff[p + 3];
    a[1] = buff[p + 2];
    a[2] = buff[p + 1];
    a[3] = buff[p + 0];
    return _binBE.i32[0];
  },
  readUint: (buff, p) => {
    const a = _binBE.ui8;
    a[0] = buff[p + 3];
    a[1] = buff[p + 2];
    a[2] = buff[p + 1];
    a[3] = buff[p + 0];
    return _binBE.ui32[0];
  },
  readASCII: (buff, p, l) => {
    return l.map((i) => String.fromCharCode(buff[p + i])).join("");
  },
  readFloat: (buff, p) => {
    const a = _binBE.ui8;
    times(4, (i) => {
      a[i] = buff[p + 3 - i];
    });
    return _binBE.fl32[0];
  },
  readDouble: (buff, p) => {
    const a = _binBE.ui8;
    times(8, (i) => {
      a[i] = buff[p + 7 - i];
    });
    return _binBE.fl64[0];
  },
  writeUshort: (buff, p, n) => {
    buff[p] = n >> 8 & 255;
    buff[p + 1] = n & 255;
  },
  writeUint: (buff, p, n) => {
    buff[p] = n >> 24 & 255;
    buff[p + 1] = n >> 16 & 255;
    buff[p + 2] = n >> 8 & 255;
    buff[p + 3] = n >> 0 & 255;
  },
  writeASCII: (buff, p, s) => {
    times(s.length, (i) => {
      buff[p + i] = s.charCodeAt(i);
    });
  },
  ui8: new Uint8Array(8)
};
_binBE.fl64 = new Float64Array(_binBE.ui8.buffer);
_binBE.writeDouble = (buff, p, n) => {
  _binBE.fl64[0] = n;
  times(8, (i) => {
    buff[p + i] = _binBE.ui8[7 - i];
  });
};
var _writeIFD = (bin, data, _offset, ifd) => {
  let offset = _offset;
  const keys = Object.keys(ifd).filter((key) => {
    return key !== void 0 && key !== null && key !== "undefined";
  });
  bin.writeUshort(data, offset, keys.length);
  offset += 2;
  let eoff = offset + 12 * keys.length + 4;
  for (const key of keys) {
    let tag = null;
    if (typeof key === "number") {
      tag = key;
    } else if (typeof key === "string") {
      tag = parseInt(key, 10);
    }
    const typeName = fieldTagTypes[tag];
    const typeNum = typeName2byte[typeName];
    if (typeName == null || typeName === void 0 || typeof typeName === "undefined") {
      throw new Error(`unknown type of tag: ${tag}`);
    }
    let val = ifd[key];
    if (val === void 0) {
      throw new Error(`failed to get value for key ${key}`);
    }
    if (typeName === "ASCII" && typeof val === "string" && endsWith(val, "\0") === false) {
      val += "\0";
    }
    const num = val.length;
    bin.writeUshort(data, offset, tag);
    offset += 2;
    bin.writeUshort(data, offset, typeNum);
    offset += 2;
    bin.writeUint(data, offset, num);
    offset += 4;
    let dlen = [-1, 1, 1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 8][typeNum] * num;
    let toff = offset;
    if (dlen > 4) {
      bin.writeUint(data, offset, eoff);
      toff = eoff;
    }
    if (typeName === "ASCII") {
      bin.writeASCII(data, toff, val);
    } else if (typeName === "SHORT") {
      times(num, (i) => {
        bin.writeUshort(data, toff + 2 * i, val[i]);
      });
    } else if (typeName === "LONG") {
      times(num, (i) => {
        bin.writeUint(data, toff + 4 * i, val[i]);
      });
    } else if (typeName === "RATIONAL") {
      times(num, (i) => {
        bin.writeUint(data, toff + 8 * i, Math.round(val[i] * 1e4));
        bin.writeUint(data, toff + 8 * i + 4, 1e4);
      });
    } else if (typeName === "DOUBLE") {
      times(num, (i) => {
        bin.writeDouble(data, toff + 8 * i, val[i]);
      });
    }
    if (dlen > 4) {
      dlen += dlen & 1;
      eoff += dlen;
    }
    offset += 4;
  }
  return [offset, eoff];
};
var encodeIfds = (ifds) => {
  const data = new Uint8Array(numBytesInIfd);
  let offset = 4;
  const bin = _binBE;
  data[0] = 77;
  data[1] = 77;
  data[3] = 42;
  let ifdo = 8;
  bin.writeUint(data, offset, ifdo);
  offset += 4;
  ifds.forEach((ifd, i) => {
    const noffs = _writeIFD(bin, data, ifdo, ifd);
    ifdo = noffs[1];
    if (i < ifds.length - 1) {
      bin.writeUint(data, noffs[0], ifdo);
    }
  });
  if (data.slice) {
    return data.slice(0, ifdo).buffer;
  }
  const result = new Uint8Array(ifdo);
  for (let i = 0; i < ifdo; i++) {
    result[i] = data[i];
  }
  return result.buffer;
};
var encodeImage = (values2, width, height, metadata) => {
  if (height === void 0 || height === null) {
    throw new Error(`you passed into encodeImage a width of type ${height}`);
  }
  if (width === void 0 || width === null) {
    throw new Error(`you passed into encodeImage a width of type ${width}`);
  }
  const ifd = {
    256: [width],
    // ImageWidth
    257: [height],
    // ImageLength
    273: [numBytesInIfd],
    // strips offset
    278: [height],
    // RowsPerStrip
    305: "geotiff.js"
    // no array for ASCII(Z)
  };
  if (metadata) {
    for (const i in metadata) {
      if (metadata.hasOwnProperty(i)) {
        ifd[i] = metadata[i];
      }
    }
  }
  const prfx = new Uint8Array(encodeIfds([ifd]));
  const samplesPerPixel = ifd[fieldTags.SamplesPerPixel];
  const dataType = values2.constructor.name;
  const TypedArray2 = typeMap[dataType];
  let elementSize = 8;
  if (TypedArray2) {
    elementSize = TypedArray2.BYTES_PER_ELEMENT;
  }
  const data = new Uint8Array(numBytesInIfd + values2.length * elementSize * samplesPerPixel);
  times(prfx.length, (i) => {
    data[i] = prfx[i];
  });
  forEach(values2, (value, i) => {
    if (!TypedArray2) {
      data[numBytesInIfd + i] = value;
      return;
    }
    const buffer2 = new ArrayBuffer(elementSize);
    const view = new DataView(buffer2);
    if (dataType === "Float64Array") {
      view.setFloat64(0, value, false);
    } else if (dataType === "Float32Array") {
      view.setFloat32(0, value, false);
    } else if (dataType === "Uint32Array") {
      view.setUint32(0, value, false);
    } else if (dataType === "Uint16Array") {
      view.setUint16(0, value, false);
    } else if (dataType === "Uint8Array") {
      view.setUint8(0, value);
    }
    const typedArray = new Uint8Array(view.buffer);
    const idx = numBytesInIfd + i * elementSize;
    for (let j = 0; j < elementSize; j++) {
      data[idx + j] = typedArray[j];
    }
  });
  return data.buffer;
};
var convertToTids = (input) => {
  const result = {};
  for (const key in input) {
    if (key !== "StripOffsets") {
      if (!name2code[key]) {
        console.error(key, "not in name2code:", Object.keys(name2code));
      }
      result[name2code[key]] = input[key];
    }
  }
  return result;
};
var toArray = (input) => {
  if (Array.isArray(input)) {
    return input;
  }
  return [input];
};
var metadataDefaults = [
  ["Compression", 1],
  // no compression
  ["PlanarConfiguration", 1],
  ["ExtraSamples", 0]
];
function writeGeotiff(data, metadata) {
  const isFlattened = typeof data[0] === "number";
  let height;
  let numBands;
  let width;
  let flattenedValues;
  if (isFlattened) {
    height = metadata.height || metadata.ImageLength;
    width = metadata.width || metadata.ImageWidth;
    numBands = data.length / (height * width);
    flattenedValues = data;
  } else {
    numBands = data.length;
    height = data[0].length;
    width = data[0][0].length;
    flattenedValues = [];
    times(height, (rowIndex) => {
      times(width, (columnIndex) => {
        times(numBands, (bandIndex) => {
          flattenedValues.push(data[bandIndex][rowIndex][columnIndex]);
        });
      });
    });
  }
  metadata.ImageLength = height;
  delete metadata.height;
  metadata.ImageWidth = width;
  delete metadata.width;
  if (!metadata.BitsPerSample) {
    let bitsPerSample = 8;
    if (ArrayBuffer.isView(flattenedValues)) {
      bitsPerSample = 8 * flattenedValues.BYTES_PER_ELEMENT;
    }
    metadata.BitsPerSample = times(numBands, () => bitsPerSample);
  }
  metadataDefaults.forEach((tag) => {
    const key = tag[0];
    if (!metadata[key]) {
      const value = tag[1];
      metadata[key] = value;
    }
  });
  if (!metadata.PhotometricInterpretation) {
    metadata.PhotometricInterpretation = metadata.BitsPerSample.length === 3 ? 2 : 1;
  }
  if (!metadata.SamplesPerPixel) {
    metadata.SamplesPerPixel = [numBands];
  }
  if (!metadata.StripByteCounts) {
    let elementSize = 8;
    if (ArrayBuffer.isView(flattenedValues)) {
      elementSize = flattenedValues.BYTES_PER_ELEMENT;
    }
    metadata.StripByteCounts = [numBands * elementSize * height * width];
  }
  if (!metadata.ModelPixelScale) {
    metadata.ModelPixelScale = [360 / width, 180 / height, 0];
  }
  if (!metadata.SampleFormat) {
    let sampleFormat = 1;
    if (isTypedFloatArray(flattenedValues)) {
      sampleFormat = 3;
    }
    if (isTypedIntArray(flattenedValues)) {
      sampleFormat = 2;
    }
    if (isTypedUintArray(flattenedValues)) {
      sampleFormat = 1;
    }
    metadata.SampleFormat = times(numBands, () => sampleFormat);
  }
  if (!metadata.hasOwnProperty("GeographicTypeGeoKey") && !metadata.hasOwnProperty("ProjectedCSTypeGeoKey")) {
    metadata.GeographicTypeGeoKey = 4326;
    metadata.ModelTiepoint = [0, 0, 0, -180, 90, 0];
    metadata.GeogCitationGeoKey = "WGS 84";
    metadata.GTModelTypeGeoKey = 2;
  }
  const geoKeys = Object.keys(metadata).filter((key) => endsWith(key, "GeoKey")).sort((a, b) => name2code[a] - name2code[b]);
  if (!metadata.GeoAsciiParams) {
    let geoAsciiParams = "";
    geoKeys.forEach((name) => {
      const code = Number(name2code[name]);
      const tagType = fieldTagTypes[code];
      if (tagType === "ASCII") {
        geoAsciiParams += `${metadata[name].toString()}\0`;
      }
    });
    if (geoAsciiParams.length > 0) {
      metadata.GeoAsciiParams = geoAsciiParams;
    }
  }
  if (!metadata.GeoKeyDirectory) {
    const NumberOfKeys = geoKeys.length;
    const GeoKeyDirectory = [1, 1, 0, NumberOfKeys];
    geoKeys.forEach((geoKey) => {
      const KeyID = Number(name2code[geoKey]);
      GeoKeyDirectory.push(KeyID);
      let Count;
      let TIFFTagLocation;
      let valueOffset;
      if (fieldTagTypes[KeyID] === "SHORT") {
        Count = 1;
        TIFFTagLocation = 0;
        valueOffset = metadata[geoKey];
      } else if (geoKey === "GeogCitationGeoKey") {
        Count = metadata.GeoAsciiParams.length;
        TIFFTagLocation = Number(name2code.GeoAsciiParams);
        valueOffset = 0;
      } else {
        console.log(`[geotiff.js] couldn't get TIFFTagLocation for ${geoKey}`);
      }
      GeoKeyDirectory.push(TIFFTagLocation);
      GeoKeyDirectory.push(Count);
      GeoKeyDirectory.push(valueOffset);
    });
    metadata.GeoKeyDirectory = GeoKeyDirectory;
  }
  for (const geoKey of geoKeys) {
    if (metadata.hasOwnProperty(geoKey)) {
      delete metadata[geoKey];
    }
  }
  [
    "Compression",
    "ExtraSamples",
    "GeographicTypeGeoKey",
    "GTModelTypeGeoKey",
    "GTRasterTypeGeoKey",
    "ImageLength",
    // synonym of ImageHeight
    "ImageWidth",
    "Orientation",
    "PhotometricInterpretation",
    "ProjectedCSTypeGeoKey",
    "PlanarConfiguration",
    "ResolutionUnit",
    "SamplesPerPixel",
    "XPosition",
    "YPosition",
    "RowsPerStrip"
  ].forEach((name) => {
    if (metadata[name]) {
      metadata[name] = toArray(metadata[name]);
    }
  });
  const encodedMetadata = convertToTids(metadata);
  const outputImage = encodeImage(flattenedValues, width, height, encodedMetadata);
  return outputImage;
}

// node_modules/geotiff/dist-module/logging.js
var DummyLogger = class {
  log() {
  }
  debug() {
  }
  info() {
  }
  warn() {
  }
  error() {
  }
  time() {
  }
  timeEnd() {
  }
};
var LOGGER = new DummyLogger();
function setLogger(logger = new DummyLogger()) {
  LOGGER = logger;
}

// node_modules/geotiff/dist-module/geotiff.js
function getFieldTypeLength(fieldType) {
  switch (fieldType) {
    case fieldTypes.BYTE:
    case fieldTypes.ASCII:
    case fieldTypes.SBYTE:
    case fieldTypes.UNDEFINED:
      return 1;
    case fieldTypes.SHORT:
    case fieldTypes.SSHORT:
      return 2;
    case fieldTypes.LONG:
    case fieldTypes.SLONG:
    case fieldTypes.FLOAT:
    case fieldTypes.IFD:
      return 4;
    case fieldTypes.RATIONAL:
    case fieldTypes.SRATIONAL:
    case fieldTypes.DOUBLE:
    case fieldTypes.LONG8:
    case fieldTypes.SLONG8:
    case fieldTypes.IFD8:
      return 8;
    default:
      throw new RangeError(`Invalid field type: ${fieldType}`);
  }
}
function parseGeoKeyDirectory(fileDirectory) {
  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;
  if (!rawGeoKeyDirectory) {
    return null;
  }
  const geoKeyDirectory = {};
  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {
    const key = geoKeyNames[rawGeoKeyDirectory[i]];
    const location = rawGeoKeyDirectory[i + 1] ? fieldTagNames[rawGeoKeyDirectory[i + 1]] : null;
    const count = rawGeoKeyDirectory[i + 2];
    const offset = rawGeoKeyDirectory[i + 3];
    let value = null;
    if (!location) {
      value = offset;
    } else {
      value = fileDirectory[location];
      if (typeof value === "undefined" || value === null) {
        throw new Error(`Could not get value of geoKey '${key}'.`);
      } else if (typeof value === "string") {
        value = value.substring(offset, offset + count - 1);
      } else if (value.subarray) {
        value = value.subarray(offset, offset + count);
        if (count === 1) {
          value = value[0];
        }
      }
    }
    geoKeyDirectory[key] = value;
  }
  return geoKeyDirectory;
}
function getValues(dataSlice, fieldType, count, offset) {
  let values2 = null;
  let readMethod = null;
  const fieldTypeLength = getFieldTypeLength(fieldType);
  switch (fieldType) {
    case fieldTypes.BYTE:
    case fieldTypes.ASCII:
    case fieldTypes.UNDEFINED:
      values2 = new Uint8Array(count);
      readMethod = dataSlice.readUint8;
      break;
    case fieldTypes.SBYTE:
      values2 = new Int8Array(count);
      readMethod = dataSlice.readInt8;
      break;
    case fieldTypes.SHORT:
      values2 = new Uint16Array(count);
      readMethod = dataSlice.readUint16;
      break;
    case fieldTypes.SSHORT:
      values2 = new Int16Array(count);
      readMethod = dataSlice.readInt16;
      break;
    case fieldTypes.LONG:
    case fieldTypes.IFD:
      values2 = new Uint32Array(count);
      readMethod = dataSlice.readUint32;
      break;
    case fieldTypes.SLONG:
      values2 = new Int32Array(count);
      readMethod = dataSlice.readInt32;
      break;
    case fieldTypes.LONG8:
    case fieldTypes.IFD8:
      values2 = new Array(count);
      readMethod = dataSlice.readUint64;
      break;
    case fieldTypes.SLONG8:
      values2 = new Array(count);
      readMethod = dataSlice.readInt64;
      break;
    case fieldTypes.RATIONAL:
      values2 = new Uint32Array(count * 2);
      readMethod = dataSlice.readUint32;
      break;
    case fieldTypes.SRATIONAL:
      values2 = new Int32Array(count * 2);
      readMethod = dataSlice.readInt32;
      break;
    case fieldTypes.FLOAT:
      values2 = new Float32Array(count);
      readMethod = dataSlice.readFloat32;
      break;
    case fieldTypes.DOUBLE:
      values2 = new Float64Array(count);
      readMethod = dataSlice.readFloat64;
      break;
    default:
      throw new RangeError(`Invalid field type: ${fieldType}`);
  }
  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
    for (let i = 0; i < count; ++i) {
      values2[i] = readMethod.call(
        dataSlice,
        offset + i * fieldTypeLength
      );
    }
  } else {
    for (let i = 0; i < count; i += 2) {
      values2[i] = readMethod.call(
        dataSlice,
        offset + i * fieldTypeLength
      );
      values2[i + 1] = readMethod.call(
        dataSlice,
        offset + (i * fieldTypeLength + 4)
      );
    }
  }
  if (fieldType === fieldTypes.ASCII) {
    return new TextDecoder("utf-8").decode(values2);
  }
  return values2;
}
var ImageFileDirectory = class {
  /**
   * Create an ImageFileDirectory.
   * @param {object} fileDirectory the file directory, mapping tag names to values
   * @param {Map} rawFileDirectory the raw file directory, mapping tag IDs to values
   * @param {object} geoKeyDirectory the geo key directory, mapping geo key names to values
   * @param {number} nextIFDByteOffset the byte offset to the next IFD
   */
  constructor(fileDirectory, rawFileDirectory, geoKeyDirectory, nextIFDByteOffset) {
    this.fileDirectory = fileDirectory;
    this.rawFileDirectory = rawFileDirectory;
    this.geoKeyDirectory = geoKeyDirectory;
    this.nextIFDByteOffset = nextIFDByteOffset;
  }
};
var GeoTIFFImageIndexError = class extends Error {
  constructor(index) {
    super(`No image at index ${index}`);
    this.index = index;
  }
};
var GeoTIFFBase = class {
  /**
   * (experimental) Reads raster data from the best fitting image. This function uses
   * the image with the lowest resolution that is still a higher resolution than the
   * requested resolution.
   * When specified, the `bbox` option is translated to the `window` option and the
   * `resX` and `resY` to `width` and `height` respectively.
   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected
   * image is called and the result returned.
   * @see GeoTIFFImage.readRasters
   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters
   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise
   */
  async readRasters(options = {}) {
    const { window: imageWindow, width, height } = options;
    let { resX, resY, bbox } = options;
    const firstImage = await this.getImage();
    let usedImage = firstImage;
    const imageCount = await this.getImageCount();
    const imgBBox = firstImage.getBoundingBox();
    if (imageWindow && bbox) {
      throw new Error('Both "bbox" and "window" passed.');
    }
    if (width || height) {
      if (imageWindow) {
        const [oX, oY] = firstImage.getOrigin();
        const [rX, rY] = firstImage.getResolution();
        bbox = [
          oX + imageWindow[0] * rX,
          oY + imageWindow[1] * rY,
          oX + imageWindow[2] * rX,
          oY + imageWindow[3] * rY
        ];
      }
      const usedBBox = bbox || imgBBox;
      if (width) {
        if (resX) {
          throw new Error("Both width and resX passed");
        }
        resX = (usedBBox[2] - usedBBox[0]) / width;
      }
      if (height) {
        if (resY) {
          throw new Error("Both width and resY passed");
        }
        resY = (usedBBox[3] - usedBBox[1]) / height;
      }
    }
    if (resX || resY) {
      const allImages = [];
      for (let i = 0; i < imageCount; ++i) {
        const image = await this.getImage(i);
        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;
        if (i === 0 || subfileType === 2 || newSubfileType & 1) {
          allImages.push(image);
        }
      }
      allImages.sort((a, b) => a.getWidth() - b.getWidth());
      for (let i = 0; i < allImages.length; ++i) {
        const image = allImages[i];
        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();
        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();
        usedImage = image;
        if (resX && resX > imgResX || resY && resY > imgResY) {
          break;
        }
      }
    }
    let wnd = imageWindow;
    if (bbox) {
      const [oX, oY] = firstImage.getOrigin();
      const [imageResX, imageResY] = usedImage.getResolution(firstImage);
      wnd = [
        Math.round((bbox[0] - oX) / imageResX),
        Math.round((bbox[1] - oY) / imageResY),
        Math.round((bbox[2] - oX) / imageResX),
        Math.round((bbox[3] - oY) / imageResY)
      ];
      wnd = [
        Math.min(wnd[0], wnd[2]),
        Math.min(wnd[1], wnd[3]),
        Math.max(wnd[0], wnd[2]),
        Math.max(wnd[1], wnd[3])
      ];
    }
    return usedImage.readRasters({ ...options, window: wnd });
  }
};
var GeoTIFF = class _GeoTIFF extends GeoTIFFBase {
  /**
   * @constructor
   * @param {*} source The datasource to read from.
   * @param {boolean} littleEndian Whether the image uses little endian.
   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.
   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image
   *                                to the first IFD.
   * @param {GeoTIFFOptions} [options] further options.
   */
  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {
    super();
    this.source = source;
    this.littleEndian = littleEndian;
    this.bigTiff = bigTiff;
    this.firstIFDOffset = firstIFDOffset;
    this.cache = options.cache || false;
    this.ifdRequests = [];
    this.ghostValues = null;
  }
  async getSlice(offset, size) {
    const fallbackSize = this.bigTiff ? 4048 : 1024;
    return new DataSlice(
      (await this.source.fetch([{
        offset,
        length: typeof size !== "undefined" ? size : fallbackSize
      }]))[0],
      offset,
      this.littleEndian,
      this.bigTiff
    );
  }
  /**
   * Instructs to parse an image file directory at the given file offset.
   * As there is no way to ensure that a location is indeed the start of an IFD,
   * this function must be called with caution (e.g only using the IFD offsets from
   * the headers or other IFDs).
   * @param {number} offset the offset to parse the IFD at
   * @returns {Promise<ImageFileDirectory>} the parsed IFD
   */
  async parseFileDirectoryAt(offset) {
    const entrySize = this.bigTiff ? 20 : 12;
    const offsetSize = this.bigTiff ? 8 : 2;
    let dataSlice = await this.getSlice(offset);
    const numDirEntries = this.bigTiff ? dataSlice.readUint64(offset) : dataSlice.readUint16(offset);
    const byteSize = numDirEntries * entrySize + (this.bigTiff ? 16 : 6);
    if (!dataSlice.covers(offset, byteSize)) {
      dataSlice = await this.getSlice(offset, byteSize);
    }
    const fileDirectory = {};
    const rawFileDirectory = /* @__PURE__ */ new Map();
    let i = offset + (this.bigTiff ? 8 : 2);
    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {
      const fieldTag = dataSlice.readUint16(i);
      const fieldType = dataSlice.readUint16(i + 2);
      const typeCount = this.bigTiff ? dataSlice.readUint64(i + 4) : dataSlice.readUint32(i + 4);
      let fieldValues;
      let value;
      const fieldTypeLength = getFieldTypeLength(fieldType);
      const valueOffset = i + (this.bigTiff ? 12 : 8);
      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {
        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);
      } else {
        const actualOffset = dataSlice.readOffset(valueOffset);
        const length = getFieldTypeLength(fieldType) * typeCount;
        if (dataSlice.covers(actualOffset, length)) {
          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);
        } else {
          const fieldDataSlice = await this.getSlice(actualOffset, length);
          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);
        }
      }
      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
        value = fieldValues[0];
      } else {
        value = fieldValues;
      }
      const tagName = fieldTagNames[fieldTag];
      if (tagName) {
        fileDirectory[tagName] = value;
      }
      rawFileDirectory.set(fieldTag, value);
    }
    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);
    const nextIFDByteOffset = dataSlice.readOffset(
      offset + offsetSize + entrySize * numDirEntries
    );
    return new ImageFileDirectory(
      fileDirectory,
      rawFileDirectory,
      geoKeyDirectory,
      nextIFDByteOffset
    );
  }
  async requestIFD(index) {
    if (this.ifdRequests[index]) {
      return this.ifdRequests[index];
    } else if (index === 0) {
      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);
      return this.ifdRequests[index];
    } else if (!this.ifdRequests[index - 1]) {
      try {
        this.ifdRequests[index - 1] = this.requestIFD(index - 1);
      } catch (e) {
        if (e instanceof GeoTIFFImageIndexError) {
          throw new GeoTIFFImageIndexError(index);
        }
        throw e;
      }
    }
    this.ifdRequests[index] = (async () => {
      const previousIfd = await this.ifdRequests[index - 1];
      if (previousIfd.nextIFDByteOffset === 0) {
        throw new GeoTIFFImageIndexError(index);
      }
      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);
    })();
    return this.ifdRequests[index];
  }
  /**
   * Get the n-th internal subfile of an image. By default, the first is returned.
   *
   * @param {number} [index=0] the index of the image to return.
   * @returns {Promise<GeoTIFFImage>} the image at the given index
   */
  async getImage(index = 0) {
    const ifd = await this.requestIFD(index);
    return new geotiffimage_default(
      ifd.fileDirectory,
      ifd.geoKeyDirectory,
      this.dataView,
      this.littleEndian,
      this.cache,
      this.source
    );
  }
  /**
   * Returns the count of the internal subfiles.
   *
   * @returns {Promise<number>} the number of internal subfile images
   */
  async getImageCount() {
    let index = 0;
    let hasNext = true;
    while (hasNext) {
      try {
        await this.requestIFD(index);
        ++index;
      } catch (e) {
        if (e instanceof GeoTIFFImageIndexError) {
          hasNext = false;
        } else {
          throw e;
        }
      }
    }
    return index;
  }
  /**
   * Get the values of the COG ghost area as a parsed map.
   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference
   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found
   */
  async getGhostValues() {
    const offset = this.bigTiff ? 16 : 8;
    if (this.ghostValues) {
      return this.ghostValues;
    }
    const detectionString = "GDAL_STRUCTURAL_METADATA_SIZE=";
    const heuristicAreaSize = detectionString.length + 100;
    let slice = await this.getSlice(offset, heuristicAreaSize);
    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {
      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);
      const firstLine = valuesString.split("\n")[0];
      const metadataSize = Number(firstLine.split("=")[1].split(" ")[0]) + firstLine.length;
      if (metadataSize > heuristicAreaSize) {
        slice = await this.getSlice(offset, metadataSize);
      }
      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);
      this.ghostValues = {};
      fullString.split("\n").filter((line) => line.length > 0).map((line) => line.split("=")).forEach(([key, value]) => {
        this.ghostValues[key] = value;
      });
    }
    return this.ghostValues;
  }
  /**
   * Parse a (Geo)TIFF file from the given source.
   *
   * @param {*} source The source of data to parse from.
   * @param {GeoTIFFOptions} [options] Additional options.
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   */
  static async fromSource(source, options, signal) {
    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];
    const dataView = new DataView64(headerData);
    const BOM = dataView.getUint16(0, 0);
    let littleEndian;
    if (BOM === 18761) {
      littleEndian = true;
    } else if (BOM === 19789) {
      littleEndian = false;
    } else {
      throw new TypeError("Invalid byte order value.");
    }
    const magicNumber = dataView.getUint16(2, littleEndian);
    let bigTiff;
    if (magicNumber === 42) {
      bigTiff = false;
    } else if (magicNumber === 43) {
      bigTiff = true;
      const offsetByteSize = dataView.getUint16(4, littleEndian);
      if (offsetByteSize !== 8) {
        throw new Error("Unsupported offset byte-size.");
      }
    } else {
      throw new TypeError("Invalid magic number.");
    }
    const firstIFDOffset = bigTiff ? dataView.getUint64(8, littleEndian) : dataView.getUint32(4, littleEndian);
    return new _GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);
  }
  /**
   * Closes the underlying file buffer
   * N.B. After the GeoTIFF has been completely processed it needs
   * to be closed but only if it has been constructed from a file.
   */
  close() {
    if (typeof this.source.close === "function") {
      return this.source.close();
    }
    return false;
  }
};
var geotiff_default = GeoTIFF;
var MultiGeoTIFF = class extends GeoTIFFBase {
  /**
   * Construct a new MultiGeoTIFF from a main and several overview files.
   * @param {GeoTIFF} mainFile The main GeoTIFF file.
   * @param {GeoTIFF[]} overviewFiles An array of overview files.
   */
  constructor(mainFile, overviewFiles) {
    super();
    this.mainFile = mainFile;
    this.overviewFiles = overviewFiles;
    this.imageFiles = [mainFile].concat(overviewFiles);
    this.fileDirectoriesPerFile = null;
    this.fileDirectoriesPerFileParsing = null;
    this.imageCount = null;
  }
  async parseFileDirectoriesPerFile() {
    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));
    this.fileDirectoriesPerFile = await Promise.all(requests);
    return this.fileDirectoriesPerFile;
  }
  /**
   * Get the n-th internal subfile of an image. By default, the first is returned.
   *
   * @param {number} [index=0] the index of the image to return.
   * @returns {Promise<GeoTIFFImage>} the image at the given index
   */
  async getImage(index = 0) {
    await this.getImageCount();
    await this.parseFileDirectoriesPerFile();
    let visited = 0;
    let relativeIndex = 0;
    for (let i = 0; i < this.imageFiles.length; i++) {
      const imageFile = this.imageFiles[i];
      for (let ii = 0; ii < this.imageCounts[i]; ii++) {
        if (index === visited) {
          const ifd = await imageFile.requestIFD(relativeIndex);
          return new geotiffimage_default(
            ifd.fileDirectory,
            ifd.geoKeyDirectory,
            imageFile.dataView,
            imageFile.littleEndian,
            imageFile.cache,
            imageFile.source
          );
        }
        visited++;
        relativeIndex++;
      }
      relativeIndex = 0;
    }
    throw new RangeError("Invalid image index");
  }
  /**
   * Returns the count of the internal subfiles.
   *
   * @returns {Promise<number>} the number of internal subfile images
   */
  async getImageCount() {
    if (this.imageCount !== null) {
      return this.imageCount;
    }
    const requests = [this.mainFile.getImageCount()].concat(this.overviewFiles.map((file) => file.getImageCount()));
    this.imageCounts = await Promise.all(requests);
    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);
    return this.imageCount;
  }
};
async function fromUrl(url, options = {}, signal) {
  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);
}
async function fromCustomClient(client, options = {}, signal) {
  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);
}
async function fromArrayBuffer(arrayBuffer, signal) {
  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);
}
async function fromFile(path, signal) {
  return GeoTIFF.fromSource(makeFileSource(path), signal);
}
async function fromBlob(blob, signal) {
  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);
}
async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {
  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);
  const overviewFiles = await Promise.all(
    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options)))
  );
  return new MultiGeoTIFF(mainFile, overviewFiles);
}
function writeArrayBuffer(values2, metadata) {
  return writeGeotiff(values2, metadata);
}
export {
  BaseClient,
  BaseDecoder,
  BaseResponse,
  GeoTIFF,
  geotiffimage_default as GeoTIFFImage,
  MultiGeoTIFF,
  pool_default as Pool,
  addDecoder,
  geotiff_default as default,
  fromArrayBuffer,
  fromBlob,
  fromCustomClient,
  fromFile,
  fromUrl,
  fromUrls,
  getDecoder,
  globals_exports as globals,
  rgb_exports as rgb,
  setLogger,
  writeArrayBuffer
};
//# sourceMappingURL=geotiff.js.map
